From ec60164a73a3b4eecf16f9bb2caf36fc5c30b8b4 Mon Sep 17 00:00:00 2001
From: Ng Khai Wen <khai.wen.ng@intel.com>
Date: Wed, 11 Jan 2023 15:27:18 +0800
Subject: [PATCH 1/3] int3472: Add LT6911UXC support to INT3472 driver

Signed-off-by: Ng Khai Wen <khai.wen.ng@intel.com>
Signed-off-by: zouxiaoh <xiaohong.zou@intel.com>
---
 drivers/platform/x86/intel/int3472/common.h   |  5 +++-
 drivers/platform/x86/intel/int3472/discrete.c | 24 +++++++++++++++++--
 2 files changed, 26 insertions(+), 3 deletions(-)

diff --git a/drivers/platform/x86/intel/int3472/common.h b/drivers/platform/x86/intel/int3472/common.h
index d14944ee8586..61938a2fc909 100644
--- a/drivers/platform/x86/intel/int3472/common.h
+++ b/drivers/platform/x86/intel/int3472/common.h
@@ -21,9 +21,11 @@
 #define INT3472_GPIO_TYPE_POWER_ENABLE				0x0b
 #define INT3472_GPIO_TYPE_CLK_ENABLE				0x0c
 #define INT3472_GPIO_TYPE_PRIVACY_LED				0x0d
+#define INT3472_GPIO_TYPE_READY_STAT				0x13
+#define INT3472_GPIO_TYPE_HDMI_DETECT				0x14
 
 #define INT3472_PDEV_MAX_NAME_LEN				23
-#define INT3472_MAX_SENSOR_GPIOS				3
+#define INT3472_MAX_SENSOR_GPIOS				4
 
 #define GPIO_REGULATOR_NAME_LENGTH				21
 #define GPIO_REGULATOR_SUPPLY_NAME_LENGTH			9
@@ -73,6 +75,7 @@ struct int3472_sensor_config {
 	const char *sensor_module_name;
 	struct regulator_consumer_supply supply_map;
 	const struct int3472_gpio_function_remap *function_maps;
+	const bool independent_clk_gpios;
 };
 
 struct int3472_discrete_device {
diff --git a/drivers/platform/x86/intel/int3472/discrete.c b/drivers/platform/x86/intel/int3472/discrete.c
index 401fa8f223d6..bafc3e5dbd3e 100644
--- a/drivers/platform/x86/intel/int3472/discrete.c
+++ b/drivers/platform/x86/intel/int3472/discrete.c
@@ -62,6 +62,8 @@ static const struct int3472_sensor_config int3472_sensor_configs[] = {
 	{ "GEFF150023R", REGULATOR_SUPPLY("avdd", NULL), NULL },
 	/* Surface Go 1&2 - OV5693, Front */
 	{ "YHCU", REGULATOR_SUPPLY("avdd", NULL), NULL },
+	/* Lontium Display Bridge */
+	{ "LT6911UXC", { 0 }, NULL, true },
 };
 
 static const struct int3472_sensor_config *
@@ -230,6 +232,8 @@ static int skl_int3472_handle_gpio_resources(struct acpi_resource *ares,
 	const char *err_msg;
 	int ret;
 	u8 type;
+	u8 active_value;
+	u32 polarity = GPIO_LOOKUP_FLAGS_DEFAULT;
 
 	if (!acpi_gpio_get_io_resource(ares, &agpio))
 		return 1;
@@ -251,17 +255,21 @@ static int skl_int3472_handle_gpio_resources(struct acpi_resource *ares,
 
 	type = obj->integer.value & 0xff;
 
+	active_value = obj->integer.value >> 24;
+	if (!active_value)
+		polarity = GPIO_ACTIVE_LOW;
+
 	switch (type) {
 	case INT3472_GPIO_TYPE_RESET:
 		ret = skl_int3472_map_gpio_to_sensor(int3472, agpio, "reset",
-						     GPIO_ACTIVE_LOW);
+							polarity);
 		if (ret)
 			err_msg = "Failed to map reset pin to sensor\n";
 
 		break;
 	case INT3472_GPIO_TYPE_POWERDOWN:
 		ret = skl_int3472_map_gpio_to_sensor(int3472, agpio, "powerdown",
-						     GPIO_ACTIVE_LOW);
+							polarity);
 		if (ret)
 			err_msg = "Failed to map powerdown pin to sensor\n";
 
@@ -279,6 +287,18 @@ static int skl_int3472_handle_gpio_resources(struct acpi_resource *ares,
 			err_msg = "Failed to map regulator to sensor\n";
 
 		break;
+	case INT3472_GPIO_TYPE_READY_STAT:
+		ret = skl_int3472_map_gpio_to_sensor(int3472, agpio, "readystat",
+							polarity);
+		if (ret)
+			err_msg = "Failed to map hdmi_detect to sensor\n";
+		break;
+	case INT3472_GPIO_TYPE_HDMI_DETECT:
+		ret = skl_int3472_map_gpio_to_sensor(int3472, agpio, "hdmidetect",
+							polarity);
+		if (ret)
+			err_msg = "Failed to map hdmi_detect to sensor\n";
+		break;
 	default:
 		dev_warn(int3472->dev,
 			 "GPIO type 0x%02x unknown; the sensor may not work\n",
-- 
2.17.1

