From 61497addfca2edd0b73a24fe314e51f355a73df7 Mon Sep 17 00:00:00 2001
From: hepengpx <pengpengx.he@intel.com>
Date: Thu, 14 Nov 2024 09:54:11 +0800
Subject: [PATCH 8/9] media: i2c: merge upstream and non-upstream imx390 driver

Signed-off-by: hepengpx <pengpengx.he@intel.com>
Signed-off-by: zouxiaoh <xiaohong.zou@intel.com>
---
 drivers/media/i2c/imx390-mode-1280x960-CROP.h | 3089 -------------
 drivers/media/i2c/imx390.c                    | 2090 ---------
 .../imx390_mode_1920x1200HDR3_CUST_PWL12.h    | 3891 -----------------
 drivers/media/i2c/ti953-ser.c                 |  193 -
 drivers/media/i2c/ti953.h                     |  160 -
 drivers/media/i2c/ti960-des.c                 | 1903 --------
 drivers/media/i2c/ti960-reg.h                 |  153 -
 include/media/imx390.h                        |   24 -
 include/media/ti960.h                         |  113 -
 9 files changed, 11616 deletions(-)
 delete mode 100644 drivers/media/i2c/imx390-mode-1280x960-CROP.h
 delete mode 100644 drivers/media/i2c/imx390.c
 delete mode 100644 drivers/media/i2c/imx390_mode_1920x1200HDR3_CUST_PWL12.h
 delete mode 100644 drivers/media/i2c/ti953-ser.c
 delete mode 100644 drivers/media/i2c/ti953.h
 delete mode 100644 drivers/media/i2c/ti960-des.c
 delete mode 100644 drivers/media/i2c/ti960-reg.h
 delete mode 100644 include/media/imx390.h
 delete mode 100644 include/media/ti960.h

diff --git a/drivers/media/i2c/imx390-mode-1280x960-CROP.h b/drivers/media/i2c/imx390-mode-1280x960-CROP.h
deleted file mode 100644
index 5488c832c8ff..000000000000
--- a/drivers/media/i2c/imx390-mode-1280x960-CROP.h
+++ /dev/null
@@ -1,3089 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0 */
-/**
- * @author George Vigelette <gvigelette@d3engineering.com>
- *
- * imx390 v4l2 driver for tgl
- */
-
-#ifndef __IMX390_MODE_1280X960_CROP_H
-#define __IMX390_MODE_1280X960_CROP_H
-
-static const struct imx390_reg imx390_mode_1280x960CROP[] = {
-	{0x2E18, 0x00},             /* disable rear embedded data line */
-	{0x000C, 0xF2},
-	{0x000E, 0x00},
-	{0x0010, 0xF2},
-	{0x0011, 0x02},
-	{0x0012, 0x00},
-	{0x0018, 0x15},
-	{0x0019, 0x00},
-	{0x001A, 0x0C},
-	{0x001B, 0x00},
-	{0x0038, 0x00},
-	{0x003C, 0x00},
-	{0x003D, 0x00},
-	{0x003E, 0x00},
-	{0x0040, 0x00},
-	{0x0041, 0x00},
-	{0x0042, 0x00},
-	{0x0044, 0x00},
-	{0x0045, 0x00},
-	{0x0046, 0x00},
-	{0x0048, 0x00},
-	{0x0049, 0x00},
-	{0x004A, 0x00},
-	{0x004C, 0x00},
-	{0x004D, 0x00},
-	{0x004E, 0x00},
-	{0x0050, 0x00},
-	{0x0051, 0x00},
-	{0x0052, 0x00},
-	{0x0054, 0x00},
-	{0x0055, 0x00},
-	{0x0056, 0x00},
-	{0x0058, 0x00},
-	{0x0059, 0x00},
-	{0x005A, 0x00},
-	{0x005C, 0x00},
-	{0x005D, 0x00},
-	{0x005E, 0x00},
-	{0x0060, 0x00},
-	{0x0061, 0x00},
-	{0x0062, 0x00},
-	{0x0064, 0x00},
-	{0x0065, 0x00},
-	{0x0066, 0x00},
-	{0x0068, 0x00},
-	{0x0069, 0x00},
-	{0x006A, 0x00},
-	{0x0074, 0x00}, /* V_REVERSE and H_REVERSE */
-	{0x0078, 0x01}, /* CROP_ON 0x00 */
-	{0x007C, 0x08}, /* CROP_H_OFFSET 0x00 */
-	{0x007D, 0x00},
-	{0x0080, 0x08}, /* CROP_V_OFFSET 0x00 */
-	{0x0081, 0x00},
-	{0x00F4, 0x1C},
-	{0x00F5, 0xF8},
-	{0x00F6, 0x01},
-	{0x00F8, 0x03},
-	{0x00F9, 0x00},
-	{0x00FA, 0x00},
-	{0x00FB, 0x00},
-	{0x0114, 0x00},
-	{0x0115, 0x01},
-	{0x0118, 0x20},
-	{0x0119, 0x03},
-	{0x011A, 0x00},
-	{0x011B, 0x41},
-	{0x011C, 0x80},
-	{0x011D, 0x00},
-	{0x0120, 0x20},
-	{0x0121, 0x00},
-	{0x0122, 0x00},
-	{0x0123, 0x44},
-	{0x0124, 0x00},
-	{0x0125, 0x01},
-	{0x0128, 0xAC},
-	{0x0129, 0x0D},
-	{0x012A, 0x00},
-	{0x012B, 0xA4},
-	{0x012C, 0x00},
-	{0x012D, 0x01},
-	{0x0130, 0xC4},
-	{0x0131, 0x09},
-	{0x0132, 0x00},
-	{0x0133, 0xDA},
-	{0x013B, 0x01},
-	{0x01C4, 0x00},
-	{0x01C5, 0x00},
-	{0x01CC, 0x01},
-	{0x01D0, 0x09},
-	{0x01D4, 0x01},
-	{0x0332, 0x18},
-	{0x0333, 0x00},
-	{0x0390, 0x00},
-	{0x0391, 0x00},
-	{0x0392, 0x00},
-	{0x03C0, 0x01}, /* SM_CROP_ON_APL 0x00 */
-	{0x2000, 0x55},
-	{0x2001, 0x55},
-	{0x2002, 0x55},
-	{0x2003, 0x05},
-	{0x2004, 0x02},
-	{0x2008, 0x65},
-	{0x2009, 0x04},
-	{0x200A, 0x00},
-	{0x200C, 0x30},
-	{0x200D, 0x11},
-	{0x2010, 0x04},
-	{0x2014, 0x01},
-	{0x2018, 0x02},
-	{0x2019, 0x04},
-	{0x201A, 0x00},
-	{0x201C, 0x21},
-	{0x201D, 0x11},
-	{0x201E, 0x00},
-	{0x201F, 0x00},
-	{0x2020, 0xBC},
-	{0x2021, 0x00},
-	{0x2022, 0x7F},
-	{0x2023, 0x00},
-	{0x2024, 0xBA},
-	{0x2025, 0x00},
-	{0x2026, 0x81},
-	{0x2027, 0x00},
-	{0x2028, 0x7D},
-	{0x2029, 0x90},
-	{0x202A, 0x05},
-	{0x202C, 0xFC},
-	{0x202D, 0x02},
-	{0x202E, 0x25},
-	{0x202F, 0x03},
-	{0x2030, 0x05},
-	{0x2031, 0x02},
-	{0x2032, 0xCA},
-	{0x2033, 0x02},
-	{0x2034, 0xFC},
-	{0x2035, 0x02},
-	{0x2036, 0x25},
-	{0x2037, 0x03},
-	{0x2038, 0x25},
-	{0x2039, 0x97},
-	{0x203A, 0xEC},
-	{0x203B, 0x01},
-	{0x203C, 0xF5},
-	{0x203D, 0x8E},
-	{0x203E, 0x0C},
-	{0x203F, 0x2D},
-	{0x2040, 0x69},
-	{0x2041, 0x01},
-	{0x2042, 0x8E},
-	{0x2043, 0x01},
-	{0x2044, 0x0C},
-	{0x2045, 0x02},
-	{0x2046, 0x31},
-	{0x2047, 0x02},
-	{0x2048, 0x6A},
-	{0x2049, 0x01},
-	{0x204A, 0x8E},
-	{0x204B, 0x01},
-	{0x204C, 0x0D},
-	{0x204D, 0x02},
-	{0x204E, 0x31},
-	{0x204F, 0x02},
-	{0x2050, 0x7B},
-	{0x2051, 0x00},
-	{0x2052, 0x7D},
-	{0x2053, 0x00},
-	{0x2054, 0x95},
-	{0x2055, 0x00},
-	{0x2056, 0x97},
-	{0x2057, 0x00},
-	{0x2058, 0xAD},
-	{0x2059, 0x00},
-	{0x205A, 0xAF},
-	{0x205B, 0x00},
-	{0x205C, 0x92},
-	{0x205D, 0x00},
-	{0x205E, 0x94},
-	{0x205F, 0x00},
-	{0x2060, 0x8E},
-	{0x2061, 0x00},
-	{0x2062, 0x90},
-	{0x2063, 0x00},
-	{0x2064, 0xB1},
-	{0x2065, 0x00},
-	{0x2066, 0xB3},
-	{0x2067, 0x00},
-	{0x2068, 0x08},
-	{0x2069, 0x00},
-	{0x206A, 0x04},
-	{0x206B, 0x00},
-	{0x206C, 0x84},
-	{0x206D, 0x00},
-	{0x206E, 0x80},
-	{0x206F, 0x00},
-	{0x2070, 0x04},
-	{0x2071, 0x00},
-	{0x2072, 0x46},
-	{0x2073, 0x00},
-	{0x2074, 0xE9},
-	{0x2075, 0x01},
-	{0x2076, 0x74},
-	{0x2077, 0x02},
-	{0x2078, 0x80},
-	{0x2079, 0x00},
-	{0x207A, 0xC1},
-	{0x207B, 0x00},
-	{0x207C, 0xFF},
-	{0x207D, 0x03},
-	{0x207E, 0xFF},
-	{0x207F, 0x03},
-	{0x2080, 0x78},
-	{0x2081, 0x00},
-	{0x2082, 0x6A},
-	{0x2083, 0x01},
-	{0x2084, 0xE4},
-	{0x2085, 0x01},
-	{0x2086, 0x2B},
-	{0x2087, 0x03},
-	{0x2088, 0x00},
-	{0x2089, 0x00},
-	{0x208A, 0xFF},
-	{0x208B, 0x03},
-	{0x208C, 0xFF},
-	{0x208D, 0x03},
-	{0x208E, 0xFF},
-	{0x208F, 0x03},
-	{0x2090, 0x7D},
-	{0x2091, 0x00},
-	{0x2092, 0x62},
-	{0x2093, 0x01},
-	{0x2094, 0xE9},
-	{0x2095, 0x01},
-	{0x2096, 0x00},
-	{0x2097, 0x00},
-	{0x2098, 0x7C},
-	{0x2099, 0x00},
-	{0x209A, 0x21},
-	{0x209B, 0x03},
-	{0x209C, 0xE9},
-	{0x209D, 0x01},
-	{0x209E, 0x21},
-	{0x209F, 0x03},
-	{0x20A0, 0xFF},
-	{0x20A1, 0x03},
-	{0x20A2, 0xFF},
-	{0x20A3, 0x03},
-	{0x20A4, 0xFF},
-	{0x20A5, 0x03},
-	{0x20A6, 0xFF},
-	{0x20A7, 0x03},
-	{0x20A8, 0xFF},
-	{0x20A9, 0x03},
-	{0x20AA, 0xFF},
-	{0x20AB, 0x03},
-	{0x20AC, 0xFF},
-	{0x20AD, 0x03},
-	{0x20AE, 0xFF},
-	{0x20AF, 0x03},
-	{0x20B0, 0xFF},
-	{0x20B1, 0x03},
-	{0x20B2, 0xFF},
-	{0x20B3, 0x03},
-	{0x20B4, 0x87},
-	{0x20B5, 0xCC},
-	{0x20B6, 0x87},
-	{0x20B7, 0x08},
-	{0x20B8, 0xF4},
-	{0x20B9, 0xA5},
-	{0x20BA, 0x07},
-	{0x20BC, 0x1F},
-	{0x20BD, 0x01},
-	{0x20BE, 0xF6},
-	{0x20BF, 0x00},
-	{0x20C0, 0x90},
-	{0x20C1, 0x01},
-	{0x20C2, 0x67},
-	{0x20C3, 0x01},
-	{0x20C4, 0xFF},
-	{0x20C5, 0x03},
-	{0x20C6, 0xFF},
-	{0x20C7, 0x03},
-	{0x20C8, 0x33},
-	{0x20C9, 0x02},
-	{0x20CA, 0x0A},
-	{0x20CB, 0x02},
-	{0x20CC, 0x7F},
-	{0x20CD, 0x00},
-	{0x20CE, 0xD2},
-	{0x20CF, 0x00},
-	{0x20D0, 0x81},
-	{0x20D1, 0x00},
-	{0x20D2, 0x87},
-	{0x20D3, 0x00},
-	{0x20D4, 0x09},
-	{0x20D5, 0x00},
-	{0x20D8, 0x7F},
-	{0x20D9, 0x00},
-	{0x20DA, 0x62},
-	{0x20DB, 0x01},
-	{0x20DC, 0x7F},
-	{0x20DD, 0x00},
-	{0x20DE, 0x62},
-	{0x20DF, 0x01},
-	{0x20E0, 0x65},
-	{0x20E1, 0x00},
-	{0x20E2, 0x75},
-	{0x20E3, 0x00},
-	{0x20E4, 0xE0},
-	{0x20E5, 0x00},
-	{0x20E6, 0xF0},
-	{0x20E7, 0x00},
-	{0x20E8, 0x4C},
-	{0x20E9, 0x01},
-	{0x20EA, 0x5C},
-	{0x20EB, 0x01},
-	{0x20EC, 0xD1},
-	{0x20ED, 0x01},
-	{0x20EE, 0xE1},
-	{0x20EF, 0x01},
-	{0x20F0, 0x93},
-	{0x20F1, 0x02},
-	{0x20F2, 0xA3},
-	{0x20F3, 0x02},
-	{0x20F4, 0x0D},
-	{0x20F5, 0x03},
-	{0x20F6, 0x1D},
-	{0x20F7, 0x03},
-	{0x20F8, 0x57},
-	{0x20F9, 0x00},
-	{0x20FA, 0x7B},
-	{0x20FB, 0x00},
-	{0x20FC, 0xD2},
-	{0x20FD, 0x00},
-	{0x20FE, 0xF6},
-	{0x20FF, 0x00},
-	{0x2100, 0x3E},
-	{0x2101, 0x01},
-	{0x2102, 0x60},
-	{0x2103, 0x01},
-	{0x2104, 0xC3},
-	{0x2105, 0x01},
-	{0x2106, 0xE5},
-	{0x2107, 0x01},
-	{0x2108, 0x85},
-	{0x2109, 0x02},
-	{0x210A, 0xA9},
-	{0x210B, 0x02},
-	{0x210C, 0xFF},
-	{0x210D, 0x02},
-	{0x210E, 0x21},
-	{0x210F, 0x03},
-	{0x2110, 0xFF},
-	{0x2111, 0x03},
-	{0x2112, 0x00},
-	{0x2113, 0x00},
-	{0x2114, 0xFF},
-	{0x2115, 0x03},
-	{0x2116, 0xFF},
-	{0x2117, 0x03},
-	{0x2118, 0xFF},
-	{0x2119, 0x03},
-	{0x211A, 0xFF},
-	{0x211B, 0x03},
-	{0x211C, 0xFF},
-	{0x211D, 0x03},
-	{0x211E, 0xFF},
-	{0x211F, 0x03},
-	{0x2120, 0xFF},
-	{0x2121, 0x03},
-	{0x2122, 0xFF},
-	{0x2123, 0x03},
-	{0x2124, 0xFF},
-	{0x2125, 0x03},
-	{0x2126, 0xFF},
-	{0x2127, 0x03},
-	{0x2128, 0x7D},
-	{0x2129, 0x90},
-	{0x212A, 0xD5},
-	{0x212B, 0x07},
-	{0x212C, 0x64},
-	{0x212D, 0x01},
-	{0x2130, 0x5F},
-	{0x2131, 0x7D},
-	{0x2132, 0x05},
-	{0x2134, 0x78},
-	{0x2135, 0x00},
-	{0x2136, 0x76},
-	{0x2137, 0x00},
-	{0x2138, 0xF3},
-	{0x2139, 0x00},
-	{0x213A, 0xF1},
-	{0x213B, 0x00},
-	{0x213C, 0xA6},
-	{0x213D, 0x02},
-	{0x213E, 0xA4},
-	{0x213F, 0x02},
-	{0x2140, 0x7D},
-	{0x2141, 0x00},
-	{0x2142, 0x8D},
-	{0x2143, 0x00},
-	{0x2144, 0xA1},
-	{0x2145, 0x01},
-	{0x2146, 0xB1},
-	{0x2147, 0x01},
-	{0x2148, 0xAB},
-	{0x2149, 0x02},
-	{0x214A, 0xBB},
-	{0x214B, 0x02},
-	{0x214C, 0x17},
-	{0x214D, 0x5C},
-	{0x214E, 0x00},
-	{0x2150, 0x00},
-	{0x2151, 0x00},
-	{0x2152, 0xF8},
-	{0x2153, 0x00},
-	{0x2154, 0xBE},
-	{0x2155, 0x00},
-	{0x2156, 0x7D},
-	{0x2157, 0x00},
-	{0x2158, 0x25},
-	{0x2159, 0x00},
-	{0x215A, 0x7D},
-	{0x215B, 0x00},
-	{0x215C, 0x62},
-	{0x215D, 0x01},
-	{0x215E, 0xFF},
-	{0x215F, 0x03},
-	{0x2160, 0x26},
-	{0x2161, 0x00},
-	{0x2162, 0x7D},
-	{0x2163, 0x00},
-	{0x2164, 0x63},
-	{0x2165, 0x01},
-	{0x2166, 0xFF},
-	{0x2167, 0x03},
-	{0x2168, 0xCB},
-	{0x2169, 0x02},
-	{0x216A, 0xCF},
-	{0x216B, 0x02},
-	{0x216C, 0xFF},
-	{0x216D, 0x03},
-	{0x216E, 0xFF},
-	{0x216F, 0x03},
-	{0x2170, 0xFF},
-	{0x2171, 0x03},
-	{0x2172, 0xFF},
-	{0x2173, 0x03},
-	{0x2174, 0xFF},
-	{0x2175, 0x03},
-	{0x2176, 0xFF},
-	{0x2177, 0x03},
-	{0x2178, 0x7E},
-	{0x2179, 0x00},
-	{0x217A, 0xBD},
-	{0x217B, 0x00},
-	{0x217C, 0xEC},
-	{0x217D, 0x01},
-	{0x217E, 0x7B},
-	{0x217F, 0x02},
-	{0x2180, 0xD1},
-	{0x2181, 0x02},
-	{0x2182, 0x25},
-	{0x2183, 0x03},
-	{0x2184, 0x7F},
-	{0x2185, 0x00},
-	{0x2186, 0xBD},
-	{0x2187, 0x00},
-	{0x2188, 0xED},
-	{0x2189, 0x01},
-	{0x218A, 0x7B},
-	{0x218B, 0x02},
-	{0x218C, 0xD2},
-	{0x218D, 0x02},
-	{0x218E, 0x25},
-	{0x218F, 0x03},
-	{0x2190, 0xFF},
-	{0x2191, 0x03},
-	{0x2192, 0xFF},
-	{0x2193, 0x03},
-	{0x2194, 0xE9},
-	{0x2195, 0x01},
-	{0x2196, 0x21},
-	{0x2197, 0x03},
-	{0x2198, 0x17},
-	{0x2199, 0xFC},
-	{0x219A, 0x7F},
-	{0x219B, 0x01},
-	{0x219C, 0xFF},
-	{0x219D, 0x03},
-	{0x21A0, 0x1B},
-	{0x21A1, 0x1B},
-	{0x21A2, 0x1B},
-	{0x21A3, 0x1B},
-	{0x21A4, 0x2E},
-	{0x21A5, 0x80},
-	{0x21A6, 0x00},
-	{0x21A8, 0x04},
-	{0x21A9, 0x98},
-	{0x21AA, 0x60},
-	{0x21AB, 0x03},
-	{0x21AC, 0x7F},
-	{0x21AD, 0x80},
-	{0x21AE, 0x09},
-	{0x21B0, 0x1C},
-	{0x21B1, 0x00},
-	{0x21B2, 0xA0},
-	{0x21B3, 0x00},
-	{0x21B4, 0x0C},
-	{0x21B5, 0x00},
-	{0x21B6, 0x2D},
-	{0x21B7, 0x00},
-	{0x21B8, 0x20},
-	{0x21B9, 0x00},
-	{0x21BA, 0x02},
-	{0x21BB, 0x00},
-	{0x21BC, 0xCC},
-	{0x21BD, 0x00},
-	{0x21BE, 0x4A},
-	{0x21BF, 0x00},
-	{0x21C0, 0xD0},
-	{0x21C1, 0x00},
-	{0x21C2, 0x44},
-	{0x21C3, 0x00},
-	{0x21C4, 0x00},
-	{0x21C5, 0xE0},
-	{0x21C6, 0x00},
-	{0x21C8, 0x11},
-	{0x21C9, 0x00},
-	{0x21CA, 0x02},
-	{0x21CC, 0x08},
-	{0x21CD, 0xC0},
-	{0x21CE, 0x0C},
-	{0x21D0, 0x44},
-	{0x21D1, 0x00},
-	{0x21D2, 0x02},
-	{0x21D4, 0x02},
-	{0x21D5, 0x20},
-	{0x21D6, 0x2C},
-	{0x21D8, 0xFE},
-	{0x21D9, 0x9D},
-	{0x21DA, 0xDF},
-	{0x21DB, 0x03},
-	{0x21DC, 0x62},
-	{0x21DD, 0x01},
-	{0x21DE, 0x7F},
-	{0x21DF, 0x00},
-	{0x21E0, 0xB7},
-	{0x21E1, 0x01},
-	{0x21E2, 0xB5},
-	{0x21E3, 0x01},
-	{0x21E4, 0xC1},
-	{0x21E5, 0x02},
-	{0x21E6, 0xBF},
-	{0x21E7, 0x02},
-	{0x21E8, 0xB3},
-	{0x21E9, 0x0D},
-	{0x21EA, 0x00},
-	{0x21EB, 0x04},
-	{0x21EC, 0x90},
-	{0x21ED, 0x07},
-	{0x21EE, 0x58},
-	{0x21EF, 0x04},
-	{0x21F0, 0x54},
-	{0x21F1, 0x04},
-	{0x21F4, 0x02},
-	{0x21F5, 0x00},
-	{0x21F6, 0x00},
-	{0x21F8, 0x3C},
-	{0x21F9, 0x00},
-	{0x21FC, 0x28},
-	{0x21FD, 0x00},
-	{0x21FE, 0x3C},
-	{0x21FF, 0x00},
-	{0x2200, 0x00},
-	{0x2204, 0x4C},
-	{0x2205, 0x04},
-	{0x2206, 0x65},
-	{0x2207, 0x04},
-	{0x2208, 0x0A},
-	{0x2209, 0x00},
-	{0x220C, 0x47},
-	{0x220D, 0x00},
-	{0x220E, 0x1F},
-	{0x220F, 0x00},
-	{0x2210, 0x17},
-	{0x2211, 0x00},
-	{0x2212, 0x0F},
-	{0x2213, 0x00},
-	{0x2214, 0x17},
-	{0x2215, 0x00},
-	{0x2216, 0x47},
-	{0x2217, 0x00},
-	{0x2218, 0x0F},
-	{0x2219, 0x00},
-	{0x221A, 0x0F},
-	{0x221B, 0x00},
-	{0x221C, 0x03},
-	{0x2220, 0x20},
-	{0x2221, 0x20},
-	{0x2222, 0x22},
-	{0x2223, 0x02},
-	{0x2224, 0xA7},
-	{0x2225, 0xAA},
-	{0x2226, 0x80},
-	{0x2227, 0x08},
-	{0x2228, 0x01},
-	{0x22B2, 0x92},
-	{0x22B4, 0x20},
-	{0x22B5, 0x00},
-	{0x22B6, 0x20},
-	{0x22B7, 0x00},
-	{0x22B8, 0x20},
-	{0x22B9, 0x00},
-	{0x22BA, 0x20},
-	{0x22BB, 0x00},
-	{0x22BC, 0x20},
-	{0x22BD, 0x00},
-	{0x22BE, 0x20},
-	{0x22BF, 0x00},
-	{0x22C0, 0x20},
-	{0x22C1, 0x00},
-	{0x22C2, 0x20},
-	{0x22C3, 0x00},
-	{0x22C4, 0x20},
-	{0x22C5, 0x00},
-	{0x22C6, 0x20},
-	{0x22C7, 0x00},
-	{0x22C8, 0x20},
-	{0x22C9, 0x00},
-	{0x22CA, 0x20},
-	{0x22CB, 0x00},
-	{0x22CC, 0x20},
-	{0x22CD, 0x00},
-	{0x22CE, 0x20},
-	{0x22CF, 0x00},
-	{0x22DA, 0x00},
-	{0x2308, 0x01},
-	{0x2311, 0x09},
-	{0x2318, 0x40},
-	{0x2319, 0xCD},
-	{0x231A, 0x54},
-	{0x2324, 0x10},
-	{0x2325, 0x00},
-	{0x2328, 0x00},
-	{0x2354, 0x0C},
-	{0x23C0, 0x5D},
-	{0x244C, 0x00},
-	{0x244D, 0x02},
-	{0x244E, 0x54},
-	{0x244F, 0x02},
-	{0x24A0, 0x00},
-	{0x24DA, 0x6F},
-	{0x24DB, 0x00},
-	{0x24DC, 0x62},
-	{0x24DD, 0x01},
-	{0x24EA, 0x32},
-	{0x24EB, 0x00},
-	{0x24EC, 0xDC},
-	{0x24ED, 0x00},
-	{0x24FA, 0x32},
-	{0x24FB, 0x00},
-	{0x24FC, 0xDD},
-	{0x24FD, 0x00},
-	{0x254A, 0x15},
-	{0x254B, 0x01},
-	{0x255A, 0x15},
-	{0x255B, 0x01},
-	{0x2560, 0x01},
-	{0x2561, 0x00},
-	{0x2562, 0x2A},
-	{0x2563, 0x00},
-	{0x2564, 0xF8},
-	{0x2565, 0x00},
-	{0x2566, 0x15},
-	{0x2567, 0x01},
-	{0x2568, 0x0C},
-	{0x2569, 0x02},
-	{0x256A, 0x31},
-	{0x256B, 0x02},
-	{0x2578, 0x90},
-	{0x2579, 0x01},
-	{0x257A, 0x92},
-	{0x257B, 0x01},
-	{0x257C, 0xB8},
-	{0x257D, 0x02},
-	{0x257E, 0xBA},
-	{0x257F, 0x02},
-	{0x2584, 0x90},
-	{0x2585, 0x01},
-	{0x2586, 0x92},
-	{0x2587, 0x01},
-	{0x2588, 0xB8},
-	{0x2589, 0x02},
-	{0x258A, 0xBA},
-	{0x258B, 0x02},
-	{0x26B8, 0x10},
-	{0x26B9, 0x00},
-	{0x26BA, 0x33},
-	{0x26BB, 0x00},
-	{0x26BC, 0x89},
-	{0x26BD, 0x00},
-	{0x26BE, 0xB0},
-	{0x26BF, 0x00},
-	{0x26C4, 0x4E},
-	{0x26C5, 0x00},
-	{0x26C8, 0xC9},
-	{0x26C9, 0x00},
-	{0x26CC, 0x35},
-	{0x26CD, 0x01},
-	{0x26D0, 0xBA},
-	{0x26D1, 0x01},
-	{0x26D4, 0x7C},
-	{0x26D5, 0x02},
-	{0x26D8, 0xF6},
-	{0x26D9, 0x02},
-	{0x26DE, 0x51},
-	{0x26DF, 0x00},
-	{0x26E0, 0x7F},
-	{0x26E1, 0x00},
-	{0x26E2, 0xCC},
-	{0x26E3, 0x00},
-	{0x26E4, 0xF8},
-	{0x26E5, 0x00},
-	{0x26E6, 0x38},
-	{0x26E7, 0x01},
-	{0x26E8, 0x65},
-	{0x26E9, 0x01},
-	{0x26EA, 0xBD},
-	{0x26EB, 0x01},
-	{0x26EE, 0x7F},
-	{0x26EF, 0x02},
-	{0x26F0, 0xAB},
-	{0x26F1, 0x02},
-	{0x26F2, 0xF9},
-	{0x26F3, 0x02},
-	{0x2722, 0x59},
-	{0x2723, 0x02},
-	{0x2938, 0x55},
-	{0x2939, 0x00},
-	{0x293A, 0x17},
-	{0x293B, 0x00},
-	{0x293C, 0xD0},
-	{0x293D, 0x00},
-	{0x293E, 0x91},
-	{0x293F, 0x00},
-	{0x2940, 0x3C},
-	{0x2941, 0x01},
-	{0x2942, 0x0C},
-	{0x2943, 0x01},
-	{0x2944, 0xC1},
-	{0x2945, 0x01},
-	{0x2946, 0x76},
-	{0x2947, 0x01},
-	{0x2948, 0x83},
-	{0x2949, 0x02},
-	{0x294A, 0xFB},
-	{0x294B, 0x01},
-	{0x294C, 0xFD},
-	{0x294D, 0x02},
-	{0x294E, 0xBF},
-	{0x294F, 0x02},
-	{0x2A06, 0xFF},
-	{0x2A07, 0x03},
-	{0x2A20, 0x00},
-	{0x2A21, 0x00},
-	{0x2A22, 0x7D},
-	{0x2A23, 0x00},
-	{0x2B11, 0x19},
-	{0x2B13, 0x15},
-	{0x2B14, 0x14},
-	{0x2B15, 0x13},
-	{0x2B16, 0x12},
-	{0x2B17, 0x11},
-	{0x2B18, 0x10},
-	{0x2B19, 0x0F},
-	{0x2B1A, 0x0E},
-	{0x2B1B, 0x0D},
-	{0x2B1C, 0x0C},
-	{0x2B1D, 0x0B},
-	{0x2B1E, 0x0A},
-	{0x2B1F, 0x09},
-	{0x2B20, 0x08},
-	{0x2B21, 0x07},
-	{0x2B22, 0x06},
-	{0x2B23, 0x05},
-	{0x2B24, 0x04},
-	{0x2B25, 0x03},
-	{0x2B26, 0x03},
-	{0x2B38, 0x01},
-	{0x2B45, 0xE3},
-	{0x2B50, 0x01},
-	{0x2B51, 0x00},
-	{0x2B6D, 0x47},
-	{0x2B70, 0x02},
-	{0x2B71, 0x02},
-	{0x2B72, 0x02},
-	{0x2B7F, 0x7F},
-	{0x2B80, 0x94},
-	{0x2B81, 0x06},
-	{0x2B87, 0x1B},
-	{0x2B88, 0x1B},
-	{0x2B89, 0x17},
-	{0x2B8A, 0x12},
-	{0x2B8B, 0x12},
-	{0x2B8D, 0x2B},
-	{0x2B8E, 0x2B},
-	{0x2B8F, 0x2B},
-	{0x2B90, 0x7F},
-	{0x2B91, 0x1F},
-	{0x2B94, 0x7F},
-	{0x2B95, 0x27},
-	{0x2B98, 0x7F},
-	{0x2B99, 0x57},
-	{0x2BA8, 0xBC},
-	{0x2BA9, 0x62},
-	{0x2BC1, 0x70},
-	{0x2BC5, 0x80},
-	{0x2BD5, 0x30},
-	{0x2BD6, 0xF0},
-	{0x2BD8, 0xDB},
-	{0x2BD9, 0xF6},
-	{0x2BDA, 0x63},
-	{0x2BDB, 0x0C},
-	{0x2BDC, 0x5C},
-	{0x2C98, 0xE1},
-	{0x2C99, 0x2E},
-	{0x2C9B, 0x86},
-	{0x2CA9, 0x80},
-	{0x2CAA, 0x01},
-	{0x2D39, 0x0E},
-	{0x2D54, 0x00},
-	{0x2D5B, 0x58},
-	{0x2D64, 0x02}, /* GRBG */
-	{0x3000, 0x00},
-	{0x3001, 0x00},
-	{0x3002, 0x23},
-	{0x3003, 0xA1},
-	{0x3004, 0x00},
-	{0x3005, 0x20},
-	{0x3006, 0x84},
-	{0x3007, 0x00},
-	{0x3008, 0x06},
-	{0x3009, 0xB4},
-	{0x300A, 0x1F},
-	{0x300B, 0x00},
-	{0x300C, 0x00},
-	{0x300D, 0x1B},
-	{0x300E, 0x90},
-	{0x300F, 0x97},
-	{0x3010, 0x00},
-	{0x3011, 0x00},
-	{0x3012, 0x21},
-	{0x3013, 0x21},
-	{0x3014, 0x00},
-	{0x3015, 0x20},
-	{0x3016, 0x84},
-	{0x3017, 0x00},
-	{0x3018, 0x30},
-	{0x3019, 0x09},
-	{0x301A, 0x46},
-	{0x301B, 0x00},
-	{0x3070, 0xC1},
-	{0x3071, 0x81},
-	{0x3072, 0x29},
-	{0x3073, 0x81},
-	{0x3410, 0x00}, /* crop_h_size */
-	{0x3411, 0x05},
-	{0x3418, 0xBA}, /* crop_v_size */
-	{0x3419, 0x03},
-	{0x34C0, 0xD3},
-	{0x34C1, 0x00},
-	{0x34C2, 0xD3},
-	{0x34C3, 0x00},
-	{0x34C4, 0xD3},
-	{0x34C5, 0x00},
-	{0x34C6, 0xD3},
-	{0x34C7, 0x00},
-	{0x34C8, 0xE2},
-	{0x34C9, 0x21},
-	{0x34CA, 0xE0},
-	{0x34CB, 0x1F},
-	{0x34CC, 0x06},
-	{0x34CD, 0x20},
-	{0x34CE, 0x28},
-	{0x34CF, 0x1F},
-	{0x3584, 0x00},
-	{0x3586, 0x00},
-	{0x3587, 0x01},
-	{0x3588, 0xE6},
-	{0x3589, 0x00},
-	{0x3590, 0x00},
-	{0x3591, 0x00},
-	{0x3594, 0x40},
-	{0x3598, 0x03},
-	{0x3599, 0x00},
-	{0x359A, 0x80},
-	{0x359B, 0x00},
-	{0x359C, 0x00},
-	{0x359D, 0x01},
-	{0x359E, 0x00},
-	{0x359F, 0x02},
-	{0x35A0, 0x00},
-	{0x35A1, 0x04},
-	{0x35A2, 0x20},
-	{0x35A3, 0x00},
-	{0x35A4, 0x40},
-	{0x35A5, 0x00},
-	{0x35A6, 0x80},
-	{0x35A7, 0x00},
-	{0x35A8, 0x00},
-	{0x35A9, 0x01},
-	{0x35AA, 0x3A},
-	{0x35AB, 0x00},
-	{0x35AC, 0x80},
-	{0x35AD, 0x00},
-	{0x35AE, 0x00},
-	{0x35AF, 0x01},
-	{0x35B0, 0x00},
-	{0x35B1, 0x02},
-	{0x35B2, 0x00},
-	{0x35B3, 0x04},
-	{0x35B4, 0x02},
-	{0x35B5, 0x00},
-	{0x35B6, 0x04},
-	{0x35B7, 0x00},
-	{0x35B8, 0x08},
-	{0x35B9, 0x00},
-	{0x35BA, 0x10},
-	{0x35BB, 0x00},
-	{0x35BC, 0x03},
-	{0x35BD, 0x00},
-	{0x35C8, 0x00},
-	{0x35C9, 0x01},
-	{0x35CA, 0x00},
-	{0x35CB, 0x04},
-	{0x35CC, 0x00},
-	{0x35CD, 0x10},
-	{0x35CE, 0x00},
-	{0x35CF, 0x40},
-	{0x35D0, 0x00},
-	{0x35D1, 0x0C},
-	{0x35D2, 0x00},
-	{0x35D3, 0x0C},
-	{0x35D4, 0x00},
-	{0x35D5, 0x0C},
-	{0x35D6, 0x00},
-	{0x35D7, 0x0C},
-	{0x35D8, 0x00},
-	{0x35D9, 0x00},
-	{0x35DA, 0x08},
-	{0x35DB, 0x00},
-	{0x35DC, 0xD8},
-	{0x35DD, 0x0E},
-	{0x35F0, 0x00},
-	{0x35F1, 0x10},
-	{0x35F2, 0x00},
-	{0x35F3, 0x10},
-	{0x35F4, 0x00},
-	{0x35F5, 0x10},
-	{0x35F6, 0x00},
-	{0x35F7, 0x03},
-	{0x35F8, 0x00},
-	{0x35F9, 0x01},
-	{0x35FA, 0x38},
-	{0x35FB, 0x00},
-	{0x35FC, 0xB3},
-	{0x35FD, 0x01},
-	{0x35FE, 0x00},
-	{0x35FF, 0x00},
-	{0x3600, 0x04},
-	{0x3601, 0x06},
-	{0x3604, 0x03},
-	{0x3605, 0x00},
-	{0x3608, 0x03},
-	{0x3609, 0x00},
-	{0x360C, 0x00},
-	{0x360D, 0x00},
-	{0x3610, 0x10},
-	{0x3611, 0x01},
-	{0x3612, 0x00},
-	{0x3613, 0x00},
-	{0x3614, 0x00},
-	{0x3615, 0x00},
-	{0x361C, 0x00},
-	{0x361D, 0x01},
-	{0x361E, 0x00},
-	{0x361F, 0x01},
-	{0x3620, 0x01},
-	{0x3621, 0x00},
-	{0x3622, 0xB0},
-	{0x3623, 0x04},
-	{0x3624, 0xDC},
-	{0x3625, 0x05},
-	{0x3626, 0x00},
-	{0x3627, 0x01},
-	{0x3628, 0xFF},
-	{0x3629, 0x0F},
-	{0x362A, 0x00},
-	{0x362B, 0x10},
-	{0x362C, 0x00},
-	{0x362D, 0x01},
-	{0x3630, 0x40},
-	{0x3631, 0x00},
-	{0x3632, 0x40},
-	{0x3633, 0x00},
-	{0x3634, 0x40},
-	{0x3635, 0x00},
-	{0x3636, 0x40},
-	{0x3637, 0x00},
-	{0x3638, 0x40},
-	{0x3639, 0x00},
-	{0x363A, 0x40},
-	{0x363B, 0x00},
-	{0x363C, 0x40},
-	{0x363D, 0x00},
-	{0x363E, 0x40},
-	{0x363F, 0x00},
-	{0x36C4, 0x99},
-	{0x36C5, 0x09},
-	{0x36C6, 0x18},
-	{0x36C7, 0x07},
-	{0x36C8, 0x65},
-	{0x36C9, 0x0E},
-	{0x36CC, 0x99},
-	{0x36CD, 0x01},
-	{0x36CE, 0x47},
-	{0x36CF, 0x00},
-	{0x36D0, 0x04},
-	{0x36D1, 0x00},
-	{0x36D4, 0x65},
-	{0x36D5, 0x0E},
-	{0x36D6, 0xA4},
-	{0x36D7, 0x0A},
-	{0x36D8, 0x65},
-	{0x36D9, 0x0E},
-	{0x36DC, 0x65},
-	{0x36DD, 0x0E},
-	{0x36DE, 0xA4},
-	{0x36DF, 0x0A},
-	{0x36E0, 0x65},
-	{0x36E1, 0x0E},
-	{0x36E4, 0x65},
-	{0x36E5, 0x0E},
-	{0x36E6, 0xA4},
-	{0x36E7, 0x0A},
-	{0x36E8, 0x65},
-	{0x36E9, 0x0E},
-	{0x36EE, 0x00},
-	{0x36EF, 0x00},
-	{0x36F0, 0x00},
-	{0x36F1, 0x80},
-	{0x36F8, 0x00},
-	{0x3702, 0x03},
-	{0x3703, 0x04},
-	{0x3704, 0x08},
-	{0x370E, 0x0E},
-	{0x3718, 0x62},
-	{0x3719, 0x4A},
-	{0x371A, 0x38},
-	{0x371B, 0x20},
-	{0x371C, 0x64},
-	{0x371D, 0x42},
-	{0x371E, 0x32},
-	{0x371F, 0x1B},
-	{0x3720, 0x9C},
-	{0x3721, 0xA4},
-	{0x3722, 0xAC},
-	{0x3723, 0xB4},
-	{0x3748, 0xAA},
-	{0x3749, 0x96},
-	{0x374A, 0x7D},
-	{0x374B, 0x69},
-	{0x37C0, 0x00},
-	{0x37C1, 0x00},
-	{0x37C2, 0x00},
-	{0x37C4, 0x00},
-	{0x37C5, 0x00},
-	{0x37C6, 0x00},
-	{0x37C8, 0x00},
-	{0x37C9, 0x00},
-	{0x37CA, 0x00},
-	{0x37CC, 0x00},
-	{0x37CD, 0x00},
-	{0x37CE, 0x00},
-	{0x37D0, 0x00},
-	{0x37D1, 0x00},
-	{0x37D2, 0x00},
-	{0x37D4, 0x00},
-	{0x37D5, 0x00},
-	{0x37D6, 0x00},
-	{0x37D8, 0x00},
-	{0x37D9, 0x00},
-	{0x37DA, 0x00},
-	{0x37DC, 0x00},
-	{0x37DD, 0x00},
-	{0x37DE, 0x00},
-	{0x37E0, 0x00},
-	{0x37E1, 0x00},
-	{0x37E2, 0x00},
-	{0x37E4, 0x00},
-	{0x37E5, 0x00},
-	{0x37E6, 0x00},
-	{0x37E8, 0x00},
-	{0x37E9, 0x00},
-	{0x37EA, 0x00},
-	{0x37EC, 0x00},
-	{0x37ED, 0x00},
-	{0x37EE, 0x00},
-	{0x37F0, 0x00},
-	{0x37F4, 0x00},
-	{0x37F5, 0x1E},
-	{0x37F6, 0x34},
-	{0x37F7, 0x00},
-	{0x37F8, 0xFF},
-	{0x37F9, 0xFF},
-	{0x37FA, 0x03},
-	{0x37FC, 0x00},
-	{0x37FD, 0x00},
-	{0x37FE, 0x04},
-	{0x3800, 0xFF},
-	{0x3801, 0xFF},
-	{0x3802, 0x03},
-	{0x3804, 0x00},
-	{0x3805, 0x00},
-	{0x3806, 0x04},
-	{0x3808, 0x00},
-	{0x3809, 0x00},
-	{0x380A, 0x00},
-	{0x380C, 0x00},
-	{0x380D, 0x00},
-	{0x380E, 0x00},
-	{0x3810, 0x00},
-	{0x3811, 0x00},
-	{0x3812, 0x00},
-	{0x3814, 0x00},
-	{0x3815, 0x00},
-	{0x3816, 0x00},
-	{0x3818, 0x00},
-	{0x3819, 0x00},
-	{0x381A, 0x00},
-	{0x381C, 0x00},
-	{0x381D, 0x00},
-	{0x381E, 0x00},
-	{0x3820, 0x00},
-	{0x3821, 0x00},
-	{0x3822, 0x00},
-	{0x3824, 0x00},
-	{0x3825, 0x00},
-	{0x3826, 0x00},
-	{0x3828, 0x00},
-	{0x3829, 0x00},
-	{0x382A, 0x00},
-	{0x382C, 0x00},
-	{0x382D, 0x00},
-	{0x382E, 0x00},
-	{0x3830, 0x00},
-	{0x3831, 0x00},
-	{0x3832, 0x00},
-	{0x3834, 0x00},
-	{0x3835, 0x00},
-	{0x3836, 0x00},
-	{0x3838, 0x00},
-	{0x3839, 0x00},
-	{0x383A, 0x00},
-	{0x383B, 0x00},
-	{0x383C, 0x00},
-	{0x383D, 0x00},
-	{0x383E, 0x00},
-	{0x383F, 0x00},
-	{0x3840, 0x00},
-	{0x3841, 0x00},
-	{0x3842, 0x00},
-	{0x3843, 0x00},
-	{0x3844, 0x00},
-	{0x3845, 0x00},
-	{0x3846, 0x00},
-	{0x3847, 0x00},
-	{0x3848, 0x00},
-	{0x3849, 0x00},
-	{0x384A, 0x00},
-	{0x384B, 0x00},
-	{0x384C, 0x00},
-	{0x384D, 0x00},
-	{0x384E, 0x00},
-	{0x384F, 0x00},
-	{0x3850, 0xFF},
-	{0x3851, 0x0F},
-	{0x3852, 0x00},
-	{0x3853, 0x10},
-	{0x3854, 0xFF},
-	{0x3855, 0x0F},
-	{0x3856, 0x00},
-	{0x3857, 0x10},
-	{0x3858, 0xFF},
-	{0x3859, 0x0F},
-	{0x385A, 0x00},
-	{0x385B, 0x10},
-	{0x385C, 0x02},
-	{0x385D, 0x00},
-	{0x385E, 0x06},
-	{0x385F, 0x00},
-	{0x3860, 0x06},
-	{0x3861, 0x00},
-	{0x3862, 0x08},
-	{0x3863, 0x00},
-	{0x3864, 0x02},
-	{0x3865, 0x00},
-	{0x38A0, 0x01},
-	{0x38A1, 0x01},
-	{0x38A2, 0x00},
-	{0x38A3, 0x01},
-	{0x38A4, 0x07},
-	{0x38A5, 0x00},
-	{0x38A6, 0x04},
-	{0x38A7, 0x05},
-	{0x38A8, 0x00},
-	{0x38A9, 0x00},
-	{0x38AC, 0x00},
-	{0x38AD, 0x00},
-	{0x38AE, 0x01},
-	{0x38B0, 0x02},
-	{0x38B2, 0x22},
-	{0x38B3, 0x00},
-	{0x38B4, 0x17},
-	{0x38B5, 0x00},
-	{0x38B6, 0x11},
-	{0x38B7, 0x00},
-	{0x38B8, 0x0E},
-	{0x38B9, 0x00},
-	{0x38BA, 0x2A},
-	{0x38BB, 0x00},
-	{0x38BC, 0x1C},
-	{0x38BD, 0x00},
-	{0x38BE, 0x14},
-	{0x38BF, 0x00},
-	{0x38C0, 0x10},
-	{0x38C1, 0x00},
-	{0x38C2, 0x31},
-	{0x38C3, 0x00},
-	{0x38C4, 0x21},
-	{0x38C5, 0x00},
-	{0x38C6, 0x18},
-	{0x38C7, 0x00},
-	{0x38C8, 0x12},
-	{0x38C9, 0x00},
-	{0x38CA, 0x3C},
-	{0x38CB, 0x00},
-	{0x38CC, 0x29},
-	{0x38CD, 0x00},
-	{0x38CE, 0x1D},
-	{0x38CF, 0x00},
-	{0x38D0, 0x15},
-	{0x38D1, 0x00},
-	{0x38D2, 0x4E},
-	{0x38D3, 0x00},
-	{0x38D4, 0x35},
-	{0x38D5, 0x00},
-	{0x38D6, 0x26},
-	{0x38D7, 0x00},
-	{0x38D8, 0x1A},
-	{0x38D9, 0x00},
-	{0x38DA, 0x69},
-	{0x38DB, 0x00},
-	{0x38DC, 0x48},
-	{0x38DD, 0x00},
-	{0x38DE, 0x33},
-	{0x38DF, 0x00},
-	{0x38E0, 0x22},
-	{0x38E1, 0x00},
-	{0x38E2, 0x93},
-	{0x38E3, 0x00},
-	{0x38E4, 0x64},
-	{0x38E5, 0x00},
-	{0x38E6, 0x48},
-	{0x38E7, 0x00},
-	{0x38E8, 0x30},
-	{0x38E9, 0x00},
-	{0x38EA, 0xD3},
-	{0x38EB, 0x00},
-	{0x38EC, 0x90},
-	{0x38ED, 0x00},
-	{0x38EE, 0x69},
-	{0x38EF, 0x00},
-	{0x38F0, 0x49},
-	{0x38F1, 0x00},
-	{0x38F2, 0x39},
-	{0x38F3, 0x01},
-	{0x38F4, 0xD5},
-	{0x38F5, 0x00},
-	{0x38F6, 0x9F},
-	{0x38F7, 0x00},
-	{0x38F8, 0x75},
-	{0x38F9, 0x00},
-	{0x38FA, 0x00},
-	{0x38FB, 0x01},
-	{0x38FC, 0x00},
-	{0x38FD, 0x01},
-	{0x38FE, 0x00},
-	{0x38FF, 0x01},
-	{0x3900, 0x00},
-	{0x3901, 0x01},
-	{0x3902, 0x70},
-	{0x3903, 0x00},
-	{0x3904, 0x30},
-	{0x3905, 0x00},
-	{0x3906, 0x25},
-	{0x3907, 0x00},
-	{0x3908, 0x20},
-	{0x3909, 0x00},
-	{0x390A, 0xB2},
-	{0x390B, 0x00},
-	{0x390C, 0x80},
-	{0x390D, 0x00},
-	{0x390E, 0x70},
-	{0x390F, 0x00},
-	{0x3910, 0x50},
-	{0x3911, 0x00},
-	{0x3912, 0xB2},
-	{0x3913, 0x00},
-	{0x3914, 0x80},
-	{0x3915, 0x00},
-	{0x3916, 0x70},
-	{0x3917, 0x00},
-	{0x3918, 0x50},
-	{0x3919, 0x00},
-	{0x391A, 0xB2},
-	{0x391B, 0x00},
-	{0x391C, 0x80},
-	{0x391D, 0x00},
-	{0x391E, 0x70},
-	{0x391F, 0x00},
-	{0x3920, 0x50},
-	{0x3921, 0x00},
-	{0x3922, 0x40},
-	{0x3923, 0x00},
-	{0x3924, 0x40},
-	{0x3925, 0x00},
-	{0x3926, 0x40},
-	{0x3927, 0x00},
-	{0x3928, 0x40},
-	{0x3929, 0x00},
-	{0x392A, 0x80},
-	{0x392B, 0x00},
-	{0x392C, 0x80},
-	{0x392D, 0x00},
-	{0x392E, 0x80},
-	{0x392F, 0x00},
-	{0x3930, 0x80},
-	{0x3931, 0x00},
-	{0x3932, 0x80},
-	{0x3933, 0x80},
-	{0x3934, 0x80},
-	{0x3940, 0x01},
-	{0x3941, 0x01},
-	{0x3942, 0x00},
-	{0x3943, 0x01},
-	{0x3944, 0x07},
-	{0x3945, 0x00},
-	{0x3946, 0x04},
-	{0x3947, 0x05},
-	{0x3948, 0x00},
-	{0x3949, 0x00},
-	{0x394C, 0x00},
-	{0x394D, 0x00},
-	{0x394E, 0x01},
-	{0x3950, 0x03},
-	{0x3952, 0x14},
-	{0x3953, 0x00},
-	{0x3954, 0x0F},
-	{0x3955, 0x00},
-	{0x3956, 0x0E},
-	{0x3957, 0x00},
-	{0x3958, 0x0E},
-	{0x3959, 0x00},
-	{0x395A, 0x19},
-	{0x395B, 0x00},
-	{0x395C, 0x11},
-	{0x395D, 0x00},
-	{0x395E, 0x0F},
-	{0x395F, 0x00},
-	{0x3960, 0x0E},
-	{0x3961, 0x00},
-	{0x3962, 0x1C},
-	{0x3963, 0x00},
-	{0x3964, 0x13},
-	{0x3965, 0x00},
-	{0x3966, 0x0F},
-	{0x3967, 0x00},
-	{0x3968, 0x0E},
-	{0x3969, 0x00},
-	{0x396A, 0x23},
-	{0x396B, 0x00},
-	{0x396C, 0x15},
-	{0x396D, 0x00},
-	{0x396E, 0x11},
-	{0x396F, 0x00},
-	{0x3970, 0x0E},
-	{0x3971, 0x00},
-	{0x3972, 0x2E},
-	{0x3973, 0x00},
-	{0x3974, 0x1A},
-	{0x3975, 0x00},
-	{0x3976, 0x14},
-	{0x3977, 0x00},
-	{0x3978, 0x0F},
-	{0x3979, 0x00},
-	{0x397A, 0x3E},
-	{0x397B, 0x00},
-	{0x397C, 0x23},
-	{0x397D, 0x00},
-	{0x397E, 0x1A},
-	{0x397F, 0x00},
-	{0x3980, 0x12},
-	{0x3981, 0x00},
-	{0x3982, 0x56},
-	{0x3983, 0x00},
-	{0x3984, 0x31},
-	{0x3985, 0x00},
-	{0x3986, 0x25},
-	{0x3987, 0x00},
-	{0x3988, 0x1A},
-	{0x3989, 0x00},
-	{0x398A, 0x7B},
-	{0x398B, 0x00},
-	{0x398C, 0x49},
-	{0x398D, 0x00},
-	{0x398E, 0x39},
-	{0x398F, 0x00},
-	{0x3990, 0x2C},
-	{0x3991, 0x00},
-	{0x3992, 0xB4},
-	{0x3993, 0x00},
-	{0x3994, 0x75},
-	{0x3995, 0x00},
-	{0x3996, 0x61},
-	{0x3997, 0x00},
-	{0x3998, 0x53},
-	{0x3999, 0x00},
-	{0x399A, 0x00},
-	{0x399B, 0x01},
-	{0x399C, 0x00},
-	{0x399D, 0x01},
-	{0x399E, 0x00},
-	{0x399F, 0x01},
-	{0x39A0, 0x00},
-	{0x39A1, 0x01},
-	{0x39A2, 0x70},
-	{0x39A3, 0x00},
-	{0x39A4, 0x30},
-	{0x39A5, 0x00},
-	{0x39A6, 0x25},
-	{0x39A7, 0x00},
-	{0x39A8, 0x20},
-	{0x39A9, 0x00},
-	{0x39AA, 0xB2},
-	{0x39AB, 0x00},
-	{0x39AC, 0x80},
-	{0x39AD, 0x00},
-	{0x39AE, 0x70},
-	{0x39AF, 0x00},
-	{0x39B0, 0x80},
-	{0x39B1, 0x00},
-	{0x39B2, 0xB2},
-	{0x39B3, 0x00},
-	{0x39B4, 0x80},
-	{0x39B5, 0x00},
-	{0x39B6, 0x70},
-	{0x39B7, 0x00},
-	{0x39B8, 0x80},
-	{0x39B9, 0x00},
-	{0x39BA, 0xB2},
-	{0x39BB, 0x00},
-	{0x39BC, 0x80},
-	{0x39BD, 0x00},
-	{0x39BE, 0x70},
-	{0x39BF, 0x00},
-	{0x39C0, 0x80},
-	{0x39C1, 0x00},
-	{0x39C2, 0x40},
-	{0x39C3, 0x00},
-	{0x39C4, 0x40},
-	{0x39C5, 0x00},
-	{0x39C6, 0x40},
-	{0x39C7, 0x00},
-	{0x39C8, 0x40},
-	{0x39C9, 0x00},
-	{0x39CA, 0x80},
-	{0x39CB, 0x00},
-	{0x39CC, 0x80},
-	{0x39CD, 0x00},
-	{0x39CE, 0x80},
-	{0x39CF, 0x00},
-	{0x39D0, 0x80},
-	{0x39D1, 0x00},
-	{0x39D2, 0x80},
-	{0x39D3, 0x80},
-	{0x39D4, 0x80},
-	{0x39E0, 0x01},
-	{0x39E1, 0x00},
-	{0x39E4, 0x40},
-	{0x39E5, 0x01},
-	{0x39E6, 0x01},
-	{0x39E8, 0x00},
-	{0x39E9, 0x01},
-	{0x39EA, 0x00},
-	{0x39EB, 0x00},
-	{0x39EC, 0x01},
-	{0x39ED, 0x00},
-	{0x39EE, 0x01},
-	{0x39F0, 0x03},
-	{0x39F1, 0x04},
-	{0x39F2, 0x0E},
-	{0x39F4, 0x1C},
-	{0x39F5, 0x00},
-	{0x39F6, 0x13},
-	{0x39F7, 0x00},
-	{0x39F8, 0x0D},
-	{0x39F9, 0x00},
-	{0x39FA, 0x07},
-	{0x39FB, 0x00},
-	{0x39FC, 0x38},
-	{0x39FD, 0x00},
-	{0x39FE, 0x1C},
-	{0x39FF, 0x00},
-	{0x3A00, 0x11},
-	{0x3A01, 0x00},
-	{0x3A02, 0x08},
-	{0x3A03, 0x00},
-	{0x3A04, 0x4A},
-	{0x3A05, 0x00},
-	{0x3A06, 0x23},
-	{0x3A07, 0x00},
-	{0x3A08, 0x15},
-	{0x3A09, 0x00},
-	{0x3A0A, 0x09},
-	{0x3A0B, 0x00},
-	{0x3A0C, 0x65},
-	{0x3A0D, 0x00},
-	{0x3A0E, 0x2D},
-	{0x3A0F, 0x00},
-	{0x3A10, 0x1A},
-	{0x3A11, 0x00},
-	{0x3A12, 0x0B},
-	{0x3A13, 0x00},
-	{0x3A14, 0x8D},
-	{0x3A15, 0x00},
-	{0x3A16, 0x3D},
-	{0x3A17, 0x00},
-	{0x3A18, 0x23},
-	{0x3A19, 0x00},
-	{0x3A1A, 0x0E},
-	{0x3A1B, 0x00},
-	{0x3A1C, 0xC5},
-	{0x3A1D, 0x00},
-	{0x3A1E, 0x55},
-	{0x3A1F, 0x00},
-	{0x3A20, 0x30},
-	{0x3A21, 0x00},
-	{0x3A22, 0x13},
-	{0x3A23, 0x00},
-	{0x3A24, 0x16},
-	{0x3A25, 0x01},
-	{0x3A26, 0x76},
-	{0x3A27, 0x00},
-	{0x3A28, 0x42},
-	{0x3A29, 0x00},
-	{0x3A2A, 0x1A},
-	{0x3A2B, 0x00},
-	{0x3A2C, 0x88},
-	{0x3A2D, 0x01},
-	{0x3A2E, 0xA7},
-	{0x3A2F, 0x00},
-	{0x3A30, 0x5D},
-	{0x3A31, 0x00},
-	{0x3A32, 0x24},
-	{0x3A33, 0x00},
-	{0x3A34, 0x2A},
-	{0x3A35, 0x02},
-	{0x3A36, 0xEB},
-	{0x3A37, 0x00},
-	{0x3A38, 0x83},
-	{0x3A39, 0x00},
-	{0x3A3A, 0x32},
-	{0x3A3B, 0x00},
-	{0x3A3C, 0x00},
-	{0x3A3D, 0x01},
-	{0x3A3E, 0x00},
-	{0x3A3F, 0x01},
-	{0x3A40, 0x00},
-	{0x3A41, 0x01},
-	{0x3A42, 0x00},
-	{0x3A43, 0x01},
-	{0x3A44, 0x80},
-	{0x3A45, 0x00},
-	{0x3A46, 0x50},
-	{0x3A47, 0x00},
-	{0x3A48, 0x30},
-	{0x3A49, 0x00},
-	{0x3A4A, 0x20},
-	{0x3A4B, 0x00},
-	{0x3A4C, 0x99},
-	{0x3A4D, 0x00},
-	{0x3A4E, 0x80},
-	{0x3A4F, 0x00},
-	{0x3A50, 0x80},
-	{0x3A51, 0x00},
-	{0x3A52, 0x80},
-	{0x3A53, 0x00},
-	{0x3A54, 0x99},
-	{0x3A55, 0x00},
-	{0x3A56, 0x80},
-	{0x3A57, 0x00},
-	{0x3A58, 0x80},
-	{0x3A59, 0x00},
-	{0x3A5A, 0x80},
-	{0x3A5B, 0x00},
-	{0x3A5C, 0x99},
-	{0x3A5D, 0x00},
-	{0x3A5E, 0x80},
-	{0x3A5F, 0x00},
-	{0x3A60, 0x80},
-	{0x3A61, 0x00},
-	{0x3A62, 0x80},
-	{0x3A63, 0x00},
-	{0x3A64, 0x1C},
-	{0x3A65, 0x00},
-	{0x3A66, 0x13},
-	{0x3A67, 0x00},
-	{0x3A68, 0x0D},
-	{0x3A69, 0x00},
-	{0x3A6A, 0x07},
-	{0x3A6B, 0x00},
-	{0x3A6C, 0x0C},
-	{0x3A6D, 0x00},
-	{0x3A6E, 0x09},
-	{0x3A6F, 0x00},
-	{0x3A70, 0x06},
-	{0x3A71, 0x00},
-	{0x3A72, 0x03},
-	{0x3A73, 0x00},
-	{0x3A74, 0x1F},
-	{0x3A75, 0x00},
-	{0x3A76, 0x1B},
-	{0x3A77, 0x00},
-	{0x3A78, 0x0F},
-	{0x3A79, 0x00},
-	{0x3A7A, 0x08},
-	{0x3A7B, 0x00},
-	{0x3A7C, 0x80},
-	{0x3A7D, 0x00},
-	{0x3A7E, 0x80},
-	{0x3A7F, 0x00},
-	{0x3A80, 0x80},
-	{0x3A81, 0x00},
-	{0x3A82, 0x80},
-	{0x3A83, 0x00},
-	{0x3A84, 0x09},
-	{0x3A85, 0x00},
-	{0x3A86, 0x04},
-	{0x3A87, 0x00},
-	{0x3A88, 0x03},
-	{0x3A89, 0x00},
-	{0x3A8A, 0x01},
-	{0x3A8B, 0x00},
-	{0x3A8C, 0x19},
-	{0x3A8D, 0x01},
-	{0x3A8E, 0xD2},
-	{0x3A8F, 0x00},
-	{0x3A90, 0x8C},
-	{0x3A91, 0x00},
-	{0x3A92, 0x64},
-	{0x3A93, 0x00},
-	{0x3A94, 0xFF},
-	{0x3A95, 0x00},
-	{0x3A96, 0xD2},
-	{0x3A97, 0x00},
-	{0x3A98, 0x8C},
-	{0x3A99, 0x00},
-	{0x3A9A, 0x64},
-	{0x3A9B, 0x00},
-	{0x3A9C, 0x08},
-	{0x3A9D, 0x10},
-	{0x3A9E, 0x80},
-	{0x3A9F, 0x80},
-	{0x3AA0, 0x80},
-	{0x3AA1, 0x04},
-	{0x3AA2, 0x05},
-	{0x3AC0, 0x01},
-	{0x3AC4, 0x81},
-	{0x3AC5, 0x00},
-	{0x3AC6, 0x00},
-	{0x3AC7, 0x00},
-	{0x3AC8, 0x00},
-	{0x3AC9, 0x00},
-	{0x3ACA, 0x00},
-	{0x3ACB, 0x00},
-	{0x3ACC, 0x02},
-	{0x3ACD, 0x00},
-	{0x3ACE, 0x81},
-	{0x3ACF, 0x00},
-	{0x3AD0, 0x00},
-	{0x3AD1, 0x00},
-	{0x3AD2, 0xFD},
-	{0x3AD3, 0x03},
-	{0x3AD4, 0x02},
-	{0x3AD5, 0x00},
-	{0x3AD6, 0x00},
-	{0x3AD7, 0x00},
-	{0x3AD8, 0x81},
-	{0x3AD9, 0x00},
-	{0x3ADA, 0xFD},
-	{0x3ADB, 0x03},
-	{0x3ADC, 0xFF},
-	{0x3ADD, 0x03},
-	{0x3ADE, 0x01},
-	{0x3ADF, 0x00},
-	{0x3AE0, 0x01},
-	{0x3AE1, 0x00},
-	{0x3AE2, 0x7E},
-	{0x3AE3, 0x00},
-	{0x3AF4, 0x00},
-	{0x3AF6, 0x40},
-	{0x3AF7, 0x1E},
-	{0x3AF8, 0x01},
-	{0x3AFA, 0x63},
-	{0x3AFB, 0x09},
-	{0x3AFC, 0x11},
-	{0x3AFD, 0x09},
-	{0x3AFE, 0x00},
-	{0x3AFF, 0x00},
-	{0x3B00, 0x00},
-	{0x3B01, 0x00},
-	{0x3B02, 0x84},
-	{0x3B03, 0x06},
-	{0x3B04, 0x30},
-	{0x3B05, 0x06},
-	{0x3B06, 0x00},
-	{0x3B07, 0x00},
-	{0x3B08, 0x00},
-	{0x3B09, 0x00},
-	{0x3B0A, 0x00},
-	{0x3B0B, 0x00},
-	{0x3B0C, 0x00},
-	{0x3B0D, 0x00},
-	{0x3B0E, 0x00},
-	{0x3B0F, 0x00},
-	{0x3B10, 0x00},
-	{0x3B11, 0x00},
-	{0x3B12, 0x00},
-	{0x3B13, 0x00},
-	{0x3B14, 0x00},
-	{0x3B15, 0x00},
-	{0x3B16, 0x00},
-	{0x3B17, 0x00},
-	{0x3B18, 0x00},
-	{0x3B19, 0x00},
-	{0x3B1A, 0x00},
-	{0x3B1B, 0x00},
-	{0x3B1C, 0x00},
-	{0x3B1D, 0x00},
-	{0x3B1E, 0x00},
-	{0x3B1F, 0x00},
-	{0x3B20, 0x00},
-	{0x3B21, 0x00},
-	{0x3B22, 0x00},
-	{0x3B23, 0x00},
-	{0x3B24, 0x00},
-	{0x3B25, 0x00},
-	{0x3B26, 0x00},
-	{0x3B27, 0x00},
-	{0x3B28, 0x00},
-	{0x3B29, 0x00},
-	{0x3B2A, 0x00},
-	{0x3B2C, 0x00},
-	{0x3B2E, 0x00},
-	{0x3B30, 0x00},
-	{0x3B32, 0x0C},
-	{0x4000, 0xD1},
-	{0x4001, 0xC0},
-	{0x4002, 0xC0},
-	{0x4003, 0xB8},
-	{0x4004, 0xC0},
-	{0x4005, 0xB8},
-	{0x4006, 0xB9},
-	{0x4007, 0xB7},
-	{0x4008, 0xB0},
-	{0x4009, 0xAB},
-	{0x400A, 0xAC},
-	{0x400B, 0xAB},
-	{0x400C, 0xA8},
-	{0x400D, 0xA6},
-	{0x400E, 0xA6},
-	{0x400F, 0xA5},
-	{0x4010, 0xA2},
-	{0x4011, 0xA0},
-	{0x4012, 0xA0},
-	{0x4013, 0x9F},
-	{0x4014, 0xA4},
-	{0x4015, 0xA2},
-	{0x4016, 0xA2},
-	{0x4017, 0x9C},
-	{0x4018, 0xA8},
-	{0x4019, 0xA6},
-	{0x401A, 0xA8},
-	{0x401B, 0xAA},
-	{0x401C, 0xB0},
-	{0x401D, 0xAE},
-	{0x401E, 0xAE},
-	{0x401F, 0xAE},
-	{0x4020, 0xBA},
-	{0x4021, 0xAE},
-	{0x4022, 0xAF},
-	{0x4023, 0xAE},
-	{0x4024, 0xC6},
-	{0x4025, 0xBD},
-	{0x4026, 0xBD},
-	{0x4027, 0xBA},
-	{0x4028, 0xB0},
-	{0x4029, 0xA9},
-	{0x402A, 0xAA},
-	{0x402B, 0xA8},
-	{0x402C, 0x9F},
-	{0x402D, 0x9C},
-	{0x402E, 0x9C},
-	{0x402F, 0x9B},
-	{0x4030, 0x93},
-	{0x4031, 0x91},
-	{0x4032, 0x92},
-	{0x4033, 0x91},
-	{0x4034, 0x8D},
-	{0x4035, 0x8C},
-	{0x4036, 0x8C},
-	{0x4037, 0x8C},
-	{0x4038, 0x8F},
-	{0x4039, 0x8E},
-	{0x403A, 0x8E},
-	{0x403B, 0x8E},
-	{0x403C, 0x98},
-	{0x403D, 0x96},
-	{0x403E, 0x96},
-	{0x403F, 0x95},
-	{0x4040, 0xA4},
-	{0x4041, 0xA0},
-	{0x4042, 0xA0},
-	{0x4043, 0x9E},
-	{0x4044, 0xB3},
-	{0x4045, 0xAE},
-	{0x4046, 0xAF},
-	{0x4047, 0xAB},
-	{0x4048, 0xC2},
-	{0x4049, 0xB7},
-	{0x404A, 0xB8},
-	{0x404B, 0xB5},
-	{0x404C, 0xAB},
-	{0x404D, 0xA4},
-	{0x404E, 0xA5},
-	{0x404F, 0xA3},
-	{0x4050, 0x99},
-	{0x4051, 0x96},
-	{0x4052, 0x96},
-	{0x4053, 0x96},
-	{0x4054, 0x8B},
-	{0x4055, 0x8A},
-	{0x4056, 0x8A},
-	{0x4057, 0x8A},
-	{0x4058, 0x82},
-	{0x4059, 0x81},
-	{0x405A, 0x81},
-	{0x405B, 0x81},
-	{0x405C, 0x85},
-	{0x405D, 0x86},
-	{0x405E, 0x85},
-	{0x405F, 0x85},
-	{0x4060, 0x90},
-	{0x4061, 0x90},
-	{0x4062, 0x8F},
-	{0x4063, 0x8F},
-	{0x4064, 0x9D},
-	{0x4065, 0x9B},
-	{0x4066, 0x9B},
-	{0x4067, 0x9A},
-	{0x4068, 0xAF},
-	{0x4069, 0xAA},
-	{0x406A, 0xAC},
-	{0x406B, 0xAA},
-	{0x406C, 0xC2},
-	{0x406D, 0xB7},
-	{0x406E, 0xB8},
-	{0x406F, 0xB5},
-	{0x4070, 0xAB},
-	{0x4071, 0xA4},
-	{0x4072, 0xA4},
-	{0x4073, 0xA3},
-	{0x4074, 0x99},
-	{0x4075, 0x96},
-	{0x4076, 0x96},
-	{0x4077, 0x96},
-	{0x4078, 0x8B},
-	{0x4079, 0x8A},
-	{0x407A, 0x8A},
-	{0x407B, 0x8A},
-	{0x407C, 0x82},
-	{0x407D, 0x82},
-	{0x407E, 0x82},
-	{0x407F, 0x82},
-	{0x4080, 0x85},
-	{0x4081, 0x86},
-	{0x4082, 0x86},
-	{0x4083, 0x86},
-	{0x4084, 0x90},
-	{0x4085, 0x90},
-	{0x4086, 0x8F},
-	{0x4087, 0x8F},
-	{0x4088, 0x9D},
-	{0x4089, 0x9B},
-	{0x408A, 0x9B},
-	{0x408B, 0x99},
-	{0x408C, 0xAE},
-	{0x408D, 0xAA},
-	{0x408E, 0xAA},
-	{0x408F, 0xA7},
-	{0x4090, 0xC7},
-	{0x4091, 0xBA},
-	{0x4092, 0xBC},
-	{0x4093, 0xB9},
-	{0x4094, 0xB1},
-	{0x4095, 0xA8},
-	{0x4096, 0xA8},
-	{0x4097, 0xA7},
-	{0x4098, 0x9F},
-	{0x4099, 0x9B},
-	{0x409A, 0x9B},
-	{0x409B, 0x9B},
-	{0x409C, 0x93},
-	{0x409D, 0x91},
-	{0x409E, 0x91},
-	{0x409F, 0x91},
-	{0x40A0, 0x8D},
-	{0x40A1, 0x8C},
-	{0x40A2, 0x8C},
-	{0x40A3, 0x8C},
-	{0x40A4, 0x8E},
-	{0x40A5, 0x8E},
-	{0x40A6, 0x8D},
-	{0x40A7, 0x8D},
-	{0x40A8, 0x96},
-	{0x40A9, 0x95},
-	{0x40AA, 0x95},
-	{0x40AB, 0x94},
-	{0x40AC, 0xA2},
-	{0x40AD, 0x9F},
-	{0x40AE, 0x9F},
-	{0x40AF, 0x9D},
-	{0x40B0, 0xB1},
-	{0x40B1, 0xAC},
-	{0x40B2, 0xAB},
-	{0x40B3, 0xAA},
-	{0x40B4, 0xD3},
-	{0x40B5, 0xBC},
-	{0x40B6, 0xBD},
-	{0x40B7, 0xBC},
-	{0x40B8, 0xC1},
-	{0x40B9, 0xB7},
-	{0x40BA, 0xB7},
-	{0x40BB, 0xB5},
-	{0x40BC, 0xB0},
-	{0x40BD, 0xAA},
-	{0x40BE, 0xAA},
-	{0x40BF, 0xAA},
-	{0x40C0, 0xA8},
-	{0x40C1, 0xA4},
-	{0x40C2, 0xA4},
-	{0x40C3, 0xA4},
-	{0x40C4, 0xA2},
-	{0x40C5, 0x9F},
-	{0x40C6, 0x9F},
-	{0x40C7, 0x9F},
-	{0x40C8, 0xA3},
-	{0x40C9, 0xA0},
-	{0x40CA, 0xA0},
-	{0x40CB, 0xA0},
-	{0x40CC, 0xA6},
-	{0x40CD, 0xA3},
-	{0x40CE, 0xA3},
-	{0x40CF, 0xA2},
-	{0x40D0, 0xAF},
-	{0x40D1, 0xAB},
-	{0x40D2, 0xAA},
-	{0x40D3, 0xA8},
-	{0x40D4, 0xBA},
-	{0x40D5, 0xAE},
-	{0x40D6, 0xAE},
-	{0x40D7, 0xAB},
-	{0x4100, 0xBD},
-	{0x4101, 0xBA},
-	{0x4102, 0xBD},
-	{0x4103, 0xB7},
-	{0x4104, 0xB7},
-	{0x4105, 0xB7},
-	{0x4106, 0xB8},
-	{0x4107, 0xB5},
-	{0x4108, 0xAB},
-	{0x4109, 0xAA},
-	{0x410A, 0xAC},
-	{0x410B, 0xAB},
-	{0x410C, 0xA4},
-	{0x410D, 0xA5},
-	{0x410E, 0xA5},
-	{0x410F, 0xA4},
-	{0x4110, 0x9F},
-	{0x4111, 0xA0},
-	{0x4112, 0xA0},
-	{0x4113, 0x9F},
-	{0x4114, 0xA0},
-	{0x4115, 0xA0},
-	{0x4116, 0xA0},
-	{0x4117, 0x9F},
-	{0x4118, 0xA1},
-	{0x4119, 0xA1},
-	{0x411A, 0xA1},
-	{0x411B, 0xA0},
-	{0x411C, 0xA7},
-	{0x411D, 0xA6},
-	{0x411E, 0xA6},
-	{0x411F, 0xA6},
-	{0x4120, 0xA7},
-	{0x4121, 0xA6},
-	{0x4122, 0xA6},
-	{0x4123, 0xA3},
-	{0x4124, 0xB9},
-	{0x4125, 0xB9},
-	{0x4126, 0xBA},
-	{0x4127, 0xB8},
-	{0x4128, 0xA6},
-	{0x4129, 0xA7},
-	{0x412A, 0xA7},
-	{0x412B, 0xA6},
-	{0x412C, 0x9B},
-	{0x412D, 0x9B},
-	{0x412E, 0x9B},
-	{0x412F, 0x9B},
-	{0x4130, 0x91},
-	{0x4131, 0x92},
-	{0x4132, 0x92},
-	{0x4133, 0x91},
-	{0x4134, 0x8C},
-	{0x4135, 0x8C},
-	{0x4136, 0x8C},
-	{0x4137, 0x8C},
-	{0x4138, 0x8D},
-	{0x4139, 0x8D},
-	{0x413A, 0x8D},
-	{0x413B, 0x8D},
-	{0x413C, 0x93},
-	{0x413D, 0x93},
-	{0x413E, 0x93},
-	{0x413F, 0x92},
-	{0x4140, 0x9A},
-	{0x4141, 0x9A},
-	{0x4142, 0x9A},
-	{0x4143, 0x99},
-	{0x4144, 0xA7},
-	{0x4145, 0xA5},
-	{0x4146, 0xA6},
-	{0x4147, 0xA6},
-	{0x4148, 0xB8},
-	{0x4149, 0xB4},
-	{0x414A, 0xB4},
-	{0x414B, 0xB3},
-	{0x414C, 0xA3},
-	{0x414D, 0xA2},
-	{0x414E, 0xA3},
-	{0x414F, 0xA2},
-	{0x4150, 0x96},
-	{0x4151, 0x96},
-	{0x4152, 0x96},
-	{0x4153, 0x96},
-	{0x4154, 0x8A},
-	{0x4155, 0x8A},
-	{0x4156, 0x8A},
-	{0x4157, 0x8A},
-	{0x4158, 0x82},
-	{0x4159, 0x82},
-	{0x415A, 0x82},
-	{0x415B, 0x82},
-	{0x415C, 0x84},
-	{0x415D, 0x85},
-	{0x415E, 0x84},
-	{0x415F, 0x84},
-	{0x4160, 0x8D},
-	{0x4161, 0x8D},
-	{0x4162, 0x8D},
-	{0x4163, 0x8D},
-	{0x4164, 0x96},
-	{0x4165, 0x96},
-	{0x4166, 0x96},
-	{0x4167, 0x95},
-	{0x4168, 0xA5},
-	{0x4169, 0xA2},
-	{0x416A, 0xA3},
-	{0x416B, 0xA2},
-	{0x416C, 0xB7},
-	{0x416D, 0xB3},
-	{0x416E, 0xB5},
-	{0x416F, 0xB4},
-	{0x4170, 0xA4},
-	{0x4171, 0xA2},
-	{0x4172, 0xA3},
-	{0x4173, 0xA2},
-	{0x4174, 0x97},
-	{0x4175, 0x96},
-	{0x4176, 0x96},
-	{0x4177, 0x96},
-	{0x4178, 0x8B},
-	{0x4179, 0x8A},
-	{0x417A, 0x8A},
-	{0x417B, 0x8A},
-	{0x417C, 0x81},
-	{0x417D, 0x81},
-	{0x417E, 0x81},
-	{0x417F, 0x81},
-	{0x4180, 0x84},
-	{0x4181, 0x84},
-	{0x4182, 0x84},
-	{0x4183, 0x84},
-	{0x4184, 0x8C},
-	{0x4185, 0x8D},
-	{0x4186, 0x8D},
-	{0x4187, 0x8D},
-	{0x4188, 0x95},
-	{0x4189, 0x96},
-	{0x418A, 0x96},
-	{0x418B, 0x95},
-	{0x418C, 0xA1},
-	{0x418D, 0xA1},
-	{0x418E, 0xA1},
-	{0x418F, 0xA0},
-	{0x4190, 0xBC},
-	{0x4191, 0xB8},
-	{0x4192, 0xB8},
-	{0x4193, 0xB9},
-	{0x4194, 0xA8},
-	{0x4195, 0xA5},
-	{0x4196, 0xA6},
-	{0x4197, 0xA5},
-	{0x4198, 0x9C},
-	{0x4199, 0x9A},
-	{0x419A, 0x9A},
-	{0x419B, 0x9A},
-	{0x419C, 0x91},
-	{0x419D, 0x91},
-	{0x419E, 0x91},
-	{0x419F, 0x91},
-	{0x41A0, 0x8B},
-	{0x41A1, 0x8B},
-	{0x41A2, 0x8B},
-	{0x41A3, 0x8B},
-	{0x41A4, 0x8C},
-	{0x41A5, 0x8C},
-	{0x41A6, 0x8C},
-	{0x41A7, 0x8C},
-	{0x41A8, 0x91},
-	{0x41A9, 0x92},
-	{0x41AA, 0x91},
-	{0x41AB, 0x91},
-	{0x41AC, 0x98},
-	{0x41AD, 0x99},
-	{0x41AE, 0x99},
-	{0x41AF, 0x98},
-	{0x41B0, 0xA3},
-	{0x41B1, 0xA3},
-	{0x41B2, 0xA3},
-	{0x41B3, 0xA2},
-	{0x41B4, 0xC1},
-	{0x41B5, 0xB8},
-	{0x41B6, 0xB9},
-	{0x41B7, 0xBA},
-	{0x41B8, 0xB8},
-	{0x41B9, 0xB4},
-	{0x41BA, 0xB4},
-	{0x41BB, 0xB4},
-	{0x41BC, 0xAA},
-	{0x41BD, 0xA7},
-	{0x41BE, 0xA7},
-	{0x41BF, 0xA8},
-	{0x41C0, 0xA4},
-	{0x41C1, 0xA2},
-	{0x41C2, 0xA2},
-	{0x41C3, 0xA3},
-	{0x41C4, 0x9E},
-	{0x41C5, 0x9D},
-	{0x41C6, 0x9D},
-	{0x41C7, 0x9D},
-	{0x41C8, 0x9E},
-	{0x41C9, 0x9D},
-	{0x41CA, 0x9D},
-	{0x41CB, 0x9D},
-	{0x41CC, 0x9E},
-	{0x41CD, 0x9E},
-	{0x41CE, 0x9E},
-	{0x41CF, 0x9E},
-	{0x41D0, 0xA3},
-	{0x41D1, 0xA3},
-	{0x41D2, 0xA2},
-	{0x41D3, 0xA1},
-	{0x41D4, 0xA7},
-	{0x41D5, 0xA7},
-	{0x41D6, 0xA7},
-	{0x41D7, 0xA3},
-	{0x4200, 0xCE},
-	{0x4201, 0xC0},
-	{0x4202, 0xC1},
-	{0x4203, 0xB9},
-	{0x4204, 0xC3},
-	{0x4205, 0xB9},
-	{0x4206, 0xBC},
-	{0x4207, 0xBD},
-	{0x4208, 0xB3},
-	{0x4209, 0xAE},
-	{0x420A, 0xAF},
-	{0x420B, 0xAE},
-	{0x420C, 0xAA},
-	{0x420D, 0xA8},
-	{0x420E, 0xA8},
-	{0x420F, 0xA6},
-	{0x4210, 0xA4},
-	{0x4211, 0xA2},
-	{0x4212, 0xA2},
-	{0x4213, 0xA0},
-	{0x4214, 0xA4},
-	{0x4215, 0xA3},
-	{0x4216, 0xA2},
-	{0x4217, 0xA0},
-	{0x4218, 0xA7},
-	{0x4219, 0xA5},
-	{0x421A, 0xA3},
-	{0x421B, 0xA1},
-	{0x421C, 0xB0},
-	{0x421D, 0xA8},
-	{0x421E, 0xA8},
-	{0x421F, 0xA6},
-	{0x4220, 0xB4},
-	{0x4221, 0xAA},
-	{0x4222, 0xA5},
-	{0x4223, 0xA3},
-	{0x4224, 0xC7},
-	{0x4225, 0xBC},
-	{0x4226, 0xBE},
-	{0x4227, 0xBC},
-	{0x4228, 0xB0},
-	{0x4229, 0xA9},
-	{0x422A, 0xA9},
-	{0x422B, 0xA8},
-	{0x422C, 0xA0},
-	{0x422D, 0x9D},
-	{0x422E, 0x9D},
-	{0x422F, 0x9C},
-	{0x4230, 0x94},
-	{0x4231, 0x93},
-	{0x4232, 0x93},
-	{0x4233, 0x92},
-	{0x4234, 0x8E},
-	{0x4235, 0x8D},
-	{0x4236, 0x8D},
-	{0x4237, 0x8C},
-	{0x4238, 0x8F},
-	{0x4239, 0x8E},
-	{0x423A, 0x8E},
-	{0x423B, 0x8D},
-	{0x423C, 0x96},
-	{0x423D, 0x94},
-	{0x423E, 0x94},
-	{0x423F, 0x92},
-	{0x4240, 0xA1},
-	{0x4241, 0x9C},
-	{0x4242, 0x9C},
-	{0x4243, 0x99},
-	{0x4244, 0xB0},
-	{0x4245, 0xA8},
-	{0x4246, 0xAB},
-	{0x4247, 0xA7},
-	{0x4248, 0xC3},
-	{0x4249, 0xB7},
-	{0x424A, 0xB7},
-	{0x424B, 0xBC},
-	{0x424C, 0xAB},
-	{0x424D, 0xA4},
-	{0x424E, 0xA5},
-	{0x424F, 0xA5},
-	{0x4250, 0x9A},
-	{0x4251, 0x97},
-	{0x4252, 0x97},
-	{0x4253, 0x98},
-	{0x4254, 0x8C},
-	{0x4255, 0x8B},
-	{0x4256, 0x8B},
-	{0x4257, 0x8B},
-	{0x4258, 0x82},
-	{0x4259, 0x82},
-	{0x425A, 0x82},
-	{0x425B, 0x82},
-	{0x425C, 0x85},
-	{0x425D, 0x85},
-	{0x425E, 0x85},
-	{0x425F, 0x84},
-	{0x4260, 0x8F},
-	{0x4261, 0x8E},
-	{0x4262, 0x8E},
-	{0x4263, 0x8D},
-	{0x4264, 0x9B},
-	{0x4265, 0x98},
-	{0x4266, 0x98},
-	{0x4267, 0x95},
-	{0x4268, 0xAE},
-	{0x4269, 0xA5},
-	{0x426A, 0xA7},
-	{0x426B, 0xA2},
-	{0x426C, 0xC2},
-	{0x426D, 0xB7},
-	{0x426E, 0xB8},
-	{0x426F, 0xB9},
-	{0x4270, 0xAA},
-	{0x4271, 0xA4},
-	{0x4272, 0xA4},
-	{0x4273, 0xA5},
-	{0x4274, 0x99},
-	{0x4275, 0x96},
-	{0x4276, 0x97},
-	{0x4277, 0x98},
-	{0x4278, 0x8B},
-	{0x4279, 0x8A},
-	{0x427A, 0x8A},
-	{0x427B, 0x8B},
-	{0x427C, 0x81},
-	{0x427D, 0x81},
-	{0x427E, 0x81},
-	{0x427F, 0x82},
-	{0x4280, 0x84},
-	{0x4281, 0x84},
-	{0x4282, 0x84},
-	{0x4283, 0x84},
-	{0x4284, 0x8E},
-	{0x4285, 0x8E},
-	{0x4286, 0x8D},
-	{0x4287, 0x8C},
-	{0x4288, 0x9A},
-	{0x4289, 0x97},
-	{0x428A, 0x97},
-	{0x428B, 0x95},
-	{0x428C, 0xAA},
-	{0x428D, 0xA3},
-	{0x428E, 0xA3},
-	{0x428F, 0xA2},
-	{0x4290, 0xC7},
-	{0x4291, 0xBA},
-	{0x4292, 0xC0},
-	{0x4293, 0xC3},
-	{0x4294, 0xB0},
-	{0x4295, 0xA7},
-	{0x4296, 0xA7},
-	{0x4297, 0xA9},
-	{0x4298, 0x9F},
-	{0x4299, 0x9B},
-	{0x429A, 0x9B},
-	{0x429B, 0x9D},
-	{0x429C, 0x93},
-	{0x429D, 0x91},
-	{0x429E, 0x91},
-	{0x429F, 0x92},
-	{0x42A0, 0x8C},
-	{0x42A1, 0x8B},
-	{0x42A2, 0x8B},
-	{0x42A3, 0x8C},
-	{0x42A4, 0x8D},
-	{0x42A5, 0x8C},
-	{0x42A6, 0x8C},
-	{0x42A7, 0x8C},
-	{0x42A8, 0x94},
-	{0x42A9, 0x93},
-	{0x42AA, 0x92},
-	{0x42AB, 0x91},
-	{0x42AC, 0x9E},
-	{0x42AD, 0x9B},
-	{0x42AE, 0x9B},
-	{0x42AF, 0x98},
-	{0x42B0, 0xAC},
-	{0x42B1, 0xA6},
-	{0x42B2, 0xA6},
-	{0x42B3, 0xA2},
-	{0x42B4, 0xCE},
-	{0x42B5, 0xBA},
-	{0x42B6, 0xBC},
-	{0x42B7, 0xB7},
-	{0x42B8, 0xC5},
-	{0x42B9, 0xB5},
-	{0x42BA, 0xBA},
-	{0x42BB, 0xC0},
-	{0x42BC, 0xB1},
-	{0x42BD, 0xA8},
-	{0x42BE, 0xAE},
-	{0x42BF, 0xAF},
-	{0x42C0, 0xA7},
-	{0x42C1, 0xA3},
-	{0x42C2, 0xA3},
-	{0x42C3, 0xA5},
-	{0x42C4, 0xA0},
-	{0x42C5, 0x9D},
-	{0x42C6, 0x9D},
-	{0x42C7, 0x9F},
-	{0x42C8, 0xA0},
-	{0x42C9, 0x9E},
-	{0x42CA, 0x9E},
-	{0x42CB, 0x9F},
-	{0x42CC, 0xA2},
-	{0x42CD, 0xA0},
-	{0x42CE, 0xA0},
-	{0x42CF, 0xA0},
-	{0x42D0, 0xA8},
-	{0x42D1, 0xA5},
-	{0x42D2, 0xA5},
-	{0x42D3, 0xA2},
-	{0x42D4, 0xB3},
-	{0x42D5, 0xAA},
-	{0x42D6, 0xAB},
-	{0x42D7, 0xA3},
-	{0x42D8, 0x00},
-	{0x42D9, 0x00},
-	{0x4300, 0xA2},
-	{0x4301, 0xAE},
-	{0x4302, 0xAD},
-	{0x4303, 0xB5},
-	{0x4304, 0x95},
-	{0x4305, 0x9A},
-	{0x4306, 0x98},
-	{0x4307, 0x9B},
-	{0x4308, 0x8D},
-	{0x4309, 0x90},
-	{0x430A, 0x8F},
-	{0x430B, 0x91},
-	{0x430C, 0x86},
-	{0x430D, 0x88},
-	{0x430E, 0x87},
-	{0x430F, 0x89},
-	{0x4310, 0x86},
-	{0x4311, 0x87},
-	{0x4312, 0x86},
-	{0x4313, 0x88},
-	{0x4314, 0x89},
-	{0x4315, 0x88},
-	{0x4316, 0x88},
-	{0x4317, 0x8E},
-	{0x4318, 0x90},
-	{0x4319, 0x8F},
-	{0x431A, 0x8C},
-	{0x431B, 0x8C},
-	{0x431C, 0x9C},
-	{0x431D, 0x99},
-	{0x431E, 0x98},
-	{0x431F, 0x99},
-	{0x4320, 0xAB},
-	{0x4321, 0xB0},
-	{0x4322, 0xAD},
-	{0x4323, 0xAF},
-	{0x4324, 0x9B},
-	{0x4325, 0x9F},
-	{0x4326, 0x9E},
-	{0x4327, 0xA1},
-	{0x4328, 0x8E},
-	{0x4329, 0x91},
-	{0x432A, 0x90},
-	{0x432B, 0x93},
-	{0x432C, 0x86},
-	{0x432D, 0x88},
-	{0x432E, 0x87},
-	{0x432F, 0x89},
-	{0x4330, 0x82},
-	{0x4331, 0x84},
-	{0x4332, 0x83},
-	{0x4333, 0x84},
-	{0x4334, 0x82},
-	{0x4335, 0x82},
-	{0x4336, 0x82},
-	{0x4337, 0x83},
-	{0x4338, 0x85},
-	{0x4339, 0x84},
-	{0x433A, 0x84},
-	{0x433B, 0x85},
-	{0x433C, 0x8A},
-	{0x433D, 0x89},
-	{0x433E, 0x88},
-	{0x433F, 0x89},
-	{0x4340, 0x93},
-	{0x4341, 0x91},
-	{0x4342, 0x91},
-	{0x4343, 0x93},
-	{0x4344, 0xA0},
-	{0x4345, 0x9E},
-	{0x4346, 0x9D},
-	{0x4347, 0xA1},
-	{0x4348, 0x95},
-	{0x4349, 0x9B},
-	{0x434A, 0x9A},
-	{0x434B, 0x9C},
-	{0x434C, 0x8A},
-	{0x434D, 0x8D},
-	{0x434E, 0x8C},
-	{0x434F, 0x8D},
-	{0x4350, 0x83},
-	{0x4351, 0x85},
-	{0x4352, 0x84},
-	{0x4353, 0x85},
-	{0x4354, 0x80},
-	{0x4355, 0x81},
-	{0x4356, 0x81},
-	{0x4357, 0x81},
-	{0x4358, 0x80},
-	{0x4359, 0x80},
-	{0x435A, 0x80},
-	{0x435B, 0x80},
-	{0x435C, 0x82},
-	{0x435D, 0x81},
-	{0x435E, 0x81},
-	{0x435F, 0x81},
-	{0x4360, 0x85},
-	{0x4361, 0x84},
-	{0x4362, 0x84},
-	{0x4363, 0x85},
-	{0x4364, 0x8D},
-	{0x4365, 0x8B},
-	{0x4366, 0x8B},
-	{0x4367, 0x8D},
-	{0x4368, 0x98},
-	{0x4369, 0x98},
-	{0x436A, 0x95},
-	{0x436B, 0x98},
-	{0x436C, 0x95},
-	{0x436D, 0x9A},
-	{0x436E, 0x99},
-	{0x436F, 0x9A},
-	{0x4370, 0x8A},
-	{0x4371, 0x8D},
-	{0x4372, 0x8C},
-	{0x4373, 0x8C},
-	{0x4374, 0x83},
-	{0x4375, 0x85},
-	{0x4376, 0x84},
-	{0x4377, 0x84},
-	{0x4378, 0x80},
-	{0x4379, 0x80},
-	{0x437A, 0x80},
-	{0x437B, 0x80},
-	{0x437C, 0x7F},
-	{0x437D, 0x7F},
-	{0x437E, 0x7F},
-	{0x437F, 0x7F},
-	{0x4380, 0x81},
-	{0x4381, 0x80},
-	{0x4382, 0x80},
-	{0x4383, 0x81},
-	{0x4384, 0x84},
-	{0x4385, 0x83},
-	{0x4386, 0x83},
-	{0x4387, 0x84},
-	{0x4388, 0x8B},
-	{0x4389, 0x8A},
-	{0x438A, 0x8A},
-	{0x438B, 0x8C},
-	{0x438C, 0x97},
-	{0x438D, 0x96},
-	{0x438E, 0x96},
-	{0x438F, 0x99},
-	{0x4390, 0x99},
-	{0x4391, 0x9F},
-	{0x4392, 0x9E},
-	{0x4393, 0x9D},
-	{0x4394, 0x8D},
-	{0x4395, 0x90},
-	{0x4396, 0x90},
-	{0x4397, 0x8F},
-	{0x4398, 0x85},
-	{0x4399, 0x87},
-	{0x439A, 0x87},
-	{0x439B, 0x86},
-	{0x439C, 0x81},
-	{0x439D, 0x83},
-	{0x439E, 0x82},
-	{0x439F, 0x82},
-	{0x43A0, 0x80},
-	{0x43A1, 0x81},
-	{0x43A2, 0x81},
-	{0x43A3, 0x81},
-	{0x43A4, 0x82},
-	{0x43A5, 0x82},
-	{0x43A6, 0x82},
-	{0x43A7, 0x82},
-	{0x43A8, 0x86},
-	{0x43A9, 0x85},
-	{0x43AA, 0x85},
-	{0x43AB, 0x87},
-	{0x43AC, 0x8D},
-	{0x43AD, 0x8D},
-	{0x43AE, 0x8D},
-	{0x43AF, 0x90},
-	{0x43B0, 0x9A},
-	{0x43B1, 0x9A},
-	{0x43B2, 0x9B},
-	{0x43B3, 0x9D},
-	{0x43B4, 0xA0},
-	{0x43B5, 0xAD},
-	{0x43B6, 0xAC},
-	{0x43B7, 0xAA},
-	{0x43B8, 0x93},
-	{0x43B9, 0x97},
-	{0x43BA, 0x97},
-	{0x43BB, 0x96},
-	{0x43BC, 0x8B},
-	{0x43BD, 0x8E},
-	{0x43BE, 0x8E},
-	{0x43BF, 0x8C},
-	{0x43C0, 0x83},
-	{0x43C1, 0x85},
-	{0x43C2, 0x85},
-	{0x43C3, 0x84},
-	{0x43C4, 0x82},
-	{0x43C5, 0x84},
-	{0x43C6, 0x83},
-	{0x43C7, 0x83},
-	{0x43C8, 0x83},
-	{0x43C9, 0x84},
-	{0x43CA, 0x84},
-	{0x43CB, 0x85},
-	{0x43CC, 0x8A},
-	{0x43CD, 0x8A},
-	{0x43CE, 0x8A},
-	{0x43CF, 0x8C},
-	{0x43D0, 0x92},
-	{0x43D1, 0x93},
-	{0x43D2, 0x93},
-	{0x43D3, 0x96},
-	{0x43D4, 0x9F},
-	{0x43D5, 0xA6},
-	{0x43D6, 0xA5},
-	{0x43D7, 0xAA},
-	{0x4400, 0xA1},
-	{0x4401, 0xAB},
-	{0x4402, 0xA7},
-	{0x4403, 0xB0},
-	{0x4404, 0x91},
-	{0x4405, 0x96},
-	{0x4406, 0x94},
-	{0x4407, 0x99},
-	{0x4408, 0x8A},
-	{0x4409, 0x8E},
-	{0x440A, 0x8C},
-	{0x440B, 0x8F},
-	{0x440C, 0x85},
-	{0x440D, 0x86},
-	{0x440E, 0x86},
-	{0x440F, 0x88},
-	{0x4410, 0x85},
-	{0x4411, 0x86},
-	{0x4412, 0x85},
-	{0x4413, 0x87},
-	{0x4414, 0x88},
-	{0x4415, 0x87},
-	{0x4416, 0x87},
-	{0x4417, 0x89},
-	{0x4418, 0x91},
-	{0x4419, 0x8F},
-	{0x441A, 0x8F},
-	{0x441B, 0x90},
-	{0x441C, 0x9C},
-	{0x441D, 0x9B},
-	{0x441E, 0x9A},
-	{0x441F, 0x9A},
-	{0x4420, 0xB3},
-	{0x4421, 0xB1},
-	{0x4422, 0xB0},
-	{0x4423, 0xB2},
-	{0x4424, 0x96},
-	{0x4425, 0x9C},
-	{0x4426, 0x9A},
-	{0x4427, 0x9E},
-	{0x4428, 0x8B},
-	{0x4429, 0x8F},
-	{0x442A, 0x8E},
-	{0x442B, 0x91},
-	{0x442C, 0x84},
-	{0x442D, 0x87},
-	{0x442E, 0x86},
-	{0x442F, 0x88},
-	{0x4430, 0x82},
-	{0x4431, 0x83},
-	{0x4432, 0x82},
-	{0x4433, 0x84},
-	{0x4434, 0x82},
-	{0x4435, 0x82},
-	{0x4436, 0x82},
-	{0x4437, 0x83},
-	{0x4438, 0x84},
-	{0x4439, 0x84},
-	{0x443A, 0x84},
-	{0x443B, 0x84},
-	{0x443C, 0x8B},
-	{0x443D, 0x89},
-	{0x443E, 0x89},
-	{0x443F, 0x89},
-	{0x4440, 0x95},
-	{0x4441, 0x93},
-	{0x4442, 0x93},
-	{0x4443, 0x93},
-	{0x4444, 0xA2},
-	{0x4445, 0xA2},
-	{0x4446, 0xA1},
-	{0x4447, 0xA0},
-	{0x4448, 0x8F},
-	{0x4449, 0x97},
-	{0x444A, 0x97},
-	{0x444B, 0x98},
-	{0x444C, 0x87},
-	{0x444D, 0x8B},
-	{0x444E, 0x8A},
-	{0x444F, 0x8B},
-	{0x4450, 0x81},
-	{0x4451, 0x83},
-	{0x4452, 0x83},
-	{0x4453, 0x84},
-	{0x4454, 0x7F},
-	{0x4455, 0x80},
-	{0x4456, 0x80},
-	{0x4457, 0x81},
-	{0x4458, 0x80},
-	{0x4459, 0x80},
-	{0x445A, 0x80},
-	{0x445B, 0x80},
-	{0x445C, 0x82},
-	{0x445D, 0x81},
-	{0x445E, 0x81},
-	{0x445F, 0x81},
-	{0x4460, 0x87},
-	{0x4461, 0x85},
-	{0x4462, 0x85},
-	{0x4463, 0x86},
-	{0x4464, 0x90},
-	{0x4465, 0x8E},
-	{0x4466, 0x8E},
-	{0x4467, 0x8E},
-	{0x4468, 0x9B},
-	{0x4469, 0x9C},
-	{0x446A, 0x9A},
-	{0x446B, 0x9A},
-	{0x446C, 0x91},
-	{0x446D, 0x97},
-	{0x446E, 0x95},
-	{0x446F, 0x95},
-	{0x4470, 0x87},
-	{0x4471, 0x8A},
-	{0x4472, 0x8A},
-	{0x4473, 0x89},
-	{0x4474, 0x81},
-	{0x4475, 0x83},
-	{0x4476, 0x83},
-	{0x4477, 0x83},
-	{0x4478, 0x7F},
-	{0x4479, 0x80},
-	{0x447A, 0x80},
-	{0x447B, 0x80},
-	{0x447C, 0x80},
-	{0x447D, 0x80},
-	{0x447E, 0x80},
-	{0x447F, 0x7F},
-	{0x4480, 0x81},
-	{0x4481, 0x81},
-	{0x4482, 0x81},
-	{0x4483, 0x81},
-	{0x4484, 0x85},
-	{0x4485, 0x85},
-	{0x4486, 0x85},
-	{0x4487, 0x85},
-	{0x4488, 0x8E},
-	{0x4489, 0x8D},
-	{0x448A, 0x8D},
-	{0x448B, 0x8E},
-	{0x448C, 0x9D},
-	{0x448D, 0x9C},
-	{0x448E, 0x9C},
-	{0x448F, 0x9C},
-	{0x4490, 0x94},
-	{0x4491, 0x9B},
-	{0x4492, 0x9A},
-	{0x4493, 0x97},
-	{0x4494, 0x8A},
-	{0x4495, 0x8E},
-	{0x4496, 0x8E},
-	{0x4497, 0x8C},
-	{0x4498, 0x84},
-	{0x4499, 0x86},
-	{0x449A, 0x86},
-	{0x449B, 0x84},
-	{0x449C, 0x81},
-	{0x449D, 0x83},
-	{0x449E, 0x83},
-	{0x449F, 0x81},
-	{0x44A0, 0x81},
-	{0x44A1, 0x82},
-	{0x44A2, 0x82},
-	{0x44A3, 0x81},
-	{0x44A4, 0x83},
-	{0x44A5, 0x83},
-	{0x44A6, 0x83},
-	{0x44A7, 0x83},
-	{0x44A8, 0x88},
-	{0x44A9, 0x88},
-	{0x44AA, 0x88},
-	{0x44AB, 0x88},
-	{0x44AC, 0x91},
-	{0x44AD, 0x91},
-	{0x44AE, 0x91},
-	{0x44AF, 0x92},
-	{0x44B0, 0xA0},
-	{0x44B1, 0xA0},
-	{0x44B2, 0xA0},
-	{0x44B3, 0xA0},
-	{0x44B4, 0x9E},
-	{0x44B5, 0xA9},
-	{0x44B6, 0xA8},
-	{0x44B7, 0xA3},
-	{0x44B8, 0x90},
-	{0x44B9, 0x95},
-	{0x44BA, 0x95},
-	{0x44BB, 0x92},
-	{0x44BC, 0x8A},
-	{0x44BD, 0x8E},
-	{0x44BE, 0x8E},
-	{0x44BF, 0x8B},
-	{0x44C0, 0x84},
-	{0x44C1, 0x86},
-	{0x44C2, 0x86},
-	{0x44C3, 0x84},
-	{0x44C4, 0x84},
-	{0x44C5, 0x85},
-	{0x44C6, 0x85},
-	{0x44C7, 0x84},
-	{0x44C8, 0x86},
-	{0x44C9, 0x87},
-	{0x44CA, 0x87},
-	{0x44CB, 0x86},
-	{0x44CC, 0x8D},
-	{0x44CD, 0x8E},
-	{0x44CE, 0x8E},
-	{0x44CF, 0x8D},
-	{0x44D0, 0x98},
-	{0x44D1, 0x98},
-	{0x44D2, 0x99},
-	{0x44D3, 0x9A},
-	{0x44D4, 0xA9},
-	{0x44D5, 0xAA},
-	{0x44D6, 0xAA},
-	{0x44D7, 0xAD},
-	{0x4500, 0x9F},
-	{0x4501, 0xA8},
-	{0x4502, 0xA5},
-	{0x4503, 0xAF},
-	{0x4504, 0x8F},
-	{0x4505, 0x96},
-	{0x4506, 0x92},
-	{0x4507, 0x94},
-	{0x4508, 0x89},
-	{0x4509, 0x8D},
-	{0x450A, 0x8A},
-	{0x450B, 0x8E},
-	{0x450C, 0x84},
-	{0x450D, 0x85},
-	{0x450E, 0x84},
-	{0x450F, 0x87},
-	{0x4510, 0x84},
-	{0x4511, 0x85},
-	{0x4512, 0x84},
-	{0x4513, 0x86},
-	{0x4514, 0x87},
-	{0x4515, 0x86},
-	{0x4516, 0x86},
-	{0x4517, 0x88},
-	{0x4518, 0x8F},
-	{0x4519, 0x8D},
-	{0x451A, 0x8D},
-	{0x451B, 0x8F},
-	{0x451C, 0x9A},
-	{0x451D, 0x9A},
-	{0x451E, 0x98},
-	{0x451F, 0x9A},
-	{0x4520, 0xAF},
-	{0x4521, 0xAF},
-	{0x4522, 0xB2},
-	{0x4523, 0xB1},
-	{0x4524, 0x95},
-	{0x4525, 0x9B},
-	{0x4526, 0x97},
-	{0x4527, 0x9C},
-	{0x4528, 0x8A},
-	{0x4529, 0x8E},
-	{0x452A, 0x8D},
-	{0x452B, 0x90},
-	{0x452C, 0x84},
-	{0x452D, 0x86},
-	{0x452E, 0x85},
-	{0x452F, 0x87},
-	{0x4530, 0x81},
-	{0x4531, 0x82},
-	{0x4532, 0x82},
-	{0x4533, 0x83},
-	{0x4534, 0x81},
-	{0x4535, 0x81},
-	{0x4536, 0x81},
-	{0x4537, 0x82},
-	{0x4538, 0x84},
-	{0x4539, 0x83},
-	{0x453A, 0x83},
-	{0x453B, 0x84},
-	{0x453C, 0x8A},
-	{0x453D, 0x88},
-	{0x453E, 0x88},
-	{0x453F, 0x89},
-	{0x4540, 0x94},
-	{0x4541, 0x92},
-	{0x4542, 0x91},
-	{0x4543, 0x92},
-	{0x4544, 0xA1},
-	{0x4545, 0xA0},
-	{0x4546, 0x9C},
-	{0x4547, 0x9D},
-	{0x4548, 0x8F},
-	{0x4549, 0x96},
-	{0x454A, 0x95},
-	{0x454B, 0x92},
-	{0x454C, 0x87},
-	{0x454D, 0x8A},
-	{0x454E, 0x89},
-	{0x454F, 0x8A},
-	{0x4550, 0x81},
-	{0x4551, 0x83},
-	{0x4552, 0x82},
-	{0x4553, 0x83},
-	{0x4554, 0x7F},
-	{0x4555, 0x80},
-	{0x4556, 0x80},
-	{0x4557, 0x81},
-	{0x4558, 0x7F},
-	{0x4559, 0x80},
-	{0x455A, 0x7F},
-	{0x455B, 0x80},
-	{0x455C, 0x81},
-	{0x455D, 0x81},
-	{0x455E, 0x81},
-	{0x455F, 0x81},
-	{0x4560, 0x86},
-	{0x4561, 0x85},
-	{0x4562, 0x85},
-	{0x4563, 0x85},
-	{0x4564, 0x8F},
-	{0x4565, 0x8D},
-	{0x4566, 0x8D},
-	{0x4567, 0x8D},
-	{0x4568, 0x99},
-	{0x4569, 0x9A},
-	{0x456A, 0x97},
-	{0x456B, 0x99},
-	{0x456C, 0x90},
-	{0x456D, 0x95},
-	{0x456E, 0x93},
-	{0x456F, 0x92},
-	{0x4570, 0x87},
-	{0x4571, 0x8A},
-	{0x4572, 0x88},
-	{0x4573, 0x87},
-	{0x4574, 0x81},
-	{0x4575, 0x83},
-	{0x4576, 0x82},
-	{0x4577, 0x82},
-	{0x4578, 0x7F},
-	{0x4579, 0x80},
-	{0x457A, 0x80},
-	{0x457B, 0x80},
-	{0x457C, 0x80},
-	{0x457D, 0x80},
-	{0x457E, 0x80},
-	{0x457F, 0x80},
-	{0x4580, 0x81},
-	{0x4581, 0x81},
-	{0x4582, 0x81},
-	{0x4583, 0x81},
-	{0x4584, 0x85},
-	{0x4585, 0x85},
-	{0x4586, 0x84},
-	{0x4587, 0x85},
-	{0x4588, 0x8E},
-	{0x4589, 0x8D},
-	{0x458A, 0x8C},
-	{0x458B, 0x8D},
-	{0x458C, 0x9B},
-	{0x458D, 0x9B},
-	{0x458E, 0x9A},
-	{0x458F, 0x98},
-	{0x4590, 0x94},
-	{0x4591, 0x9A},
-	{0x4592, 0x94},
-	{0x4593, 0x90},
-	{0x4594, 0x8A},
-	{0x4595, 0x8D},
-	{0x4596, 0x8C},
-	{0x4597, 0x89},
-	{0x4598, 0x84},
-	{0x4599, 0x86},
-	{0x459A, 0x85},
-	{0x459B, 0x83},
-	{0x459C, 0x82},
-	{0x459D, 0x83},
-	{0x459E, 0x82},
-	{0x459F, 0x80},
-	{0x45A0, 0x81},
-	{0x45A1, 0x82},
-	{0x45A2, 0x81},
-	{0x45A3, 0x80},
-	{0x45A4, 0x83},
-	{0x45A5, 0x83},
-	{0x45A6, 0x83},
-	{0x45A7, 0x83},
-	{0x45A8, 0x88},
-	{0x45A9, 0x87},
-	{0x45AA, 0x87},
-	{0x45AB, 0x88},
-	{0x45AC, 0x91},
-	{0x45AD, 0x90},
-	{0x45AE, 0x90},
-	{0x45AF, 0x91},
-	{0x45B0, 0x9F},
-	{0x45B1, 0x9F},
-	{0x45B2, 0x9E},
-	{0x45B3, 0x9F},
-	{0x45B4, 0x9F},
-	{0x45B5, 0xA8},
-	{0x45B6, 0xA6},
-	{0x45B7, 0xA7},
-	{0x45B8, 0x8D},
-	{0x45B9, 0x95},
-	{0x45BA, 0x90},
-	{0x45BB, 0x8A},
-	{0x45BC, 0x89},
-	{0x45BD, 0x8D},
-	{0x45BE, 0x88},
-	{0x45BF, 0x86},
-	{0x45C0, 0x84},
-	{0x45C1, 0x86},
-	{0x45C2, 0x85},
-	{0x45C3, 0x82},
-	{0x45C4, 0x84},
-	{0x45C5, 0x85},
-	{0x45C6, 0x85},
-	{0x45C7, 0x83},
-	{0x45C8, 0x86},
-	{0x45C9, 0x86},
-	{0x45CA, 0x86},
-	{0x45CB, 0x85},
-	{0x45CC, 0x8E},
-	{0x45CD, 0x8D},
-	{0x45CE, 0x8D},
-	{0x45CF, 0x8C},
-	{0x45D0, 0x99},
-	{0x45D1, 0x98},
-	{0x45D2, 0x98},
-	{0x45D3, 0x98},
-	{0x45D4, 0xA6},
-	{0x45D5, 0xA9},
-	{0x45D6, 0xA7},
-	{0x45D7, 0xAC},
-};
-
-#endif
diff --git a/drivers/media/i2c/imx390.c b/drivers/media/i2c/imx390.c
deleted file mode 100644
index e2b9a3ea94e4..000000000000
--- a/drivers/media/i2c/imx390.c
+++ /dev/null
@@ -1,2090 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0
-// Copyright (c) 2021-2024 Intel Corporation.
-
-#include <asm/unaligned.h>
-#include <linux/acpi.h>
-#include <linux/delay.h>
-#include <linux/i2c.h>
-#include <linux/module.h>
-#include <linux/pm_runtime.h>
-#include <linux/gpio.h>
-#include <linux/interrupt.h>
-#include <media/v4l2-ctrls.h>
-#include <media/v4l2-device.h>
-#include <media/v4l2-fwnode.h>
-#include <linux/version.h>
-#include <media/imx390.h>
-#include <media/mipi-csi2.h>
-
-#define IMX390_LINK_FREQ_360MHZ		360000000ULL
-#define IMX390_LINK_FREQ_300MHZ		300000000ULL
-#define IMX390_LINK_FREQ_288MHZ		288000000ULL
-#define IMX390_LINK_FREQ_240MHZ		240000000ULL
-
-#define FIXED_POINT_SCALING_FACTOR (1ULL << 22)
-
-#define IMX390_REG_VALUE_08BIT		1
-#define IMX390_REG_VALUE_16BIT		2
-
-#define IMX390_REG_CHIP_ID		0x0330
-#define IMX390_CHIP_ID			0x0
-
-/* vertical-timings from sensor */
-#define IMX390_REG_VTS			0x300A
-#define IMX390_VTS_MAX			0xffff
-
-#define IMX390_CLK_FREQ			(1485000)
-
-/* Exposure controls from sensor */
-#define IMX390_REG_EXPOSURE		0x3012
-#define	IMX390_EXPOSURE_MIN		(30 * FIXED_POINT_SCALING_FACTOR / 1000000)
-#define	IMX390_EXPOSURE_MAX		(33333 * FIXED_POINT_SCALING_FACTOR / 1000000)
-#define	IMX390_EXPOSURE_DEF		(11000 * FIXED_POINT_SCALING_FACTOR / 1000000)
-#define	IMX390_EXPOSURE_STEP		(1 * FIXED_POINT_SCALING_FACTOR / 1000000)
-
-/* Analog gain controls from sensor */
-#define	IMX390_ANAL_GAIN_MIN		0
-#define	IMX390_ANAL_GAIN_MAX		0x64
-#define	IMX390_ANAL_GAIN_STEP		1
-#define	IMX390_ANAL_GAIN_DEFAULT	0x1c
-
-/* Digital gain controls from sensor */
-#define IMX390_DGTL_GAIN_MIN		0
-#define IMX390_DGTL_GAIN_MAX		0x7ff
-#define IMX390_DGTL_GAIN_STEP		1
-#define IMX390_DGTL_GAIN_DEFAULT	0x80
-
-#define IMX390_GAIN_MIN			0
-#define IMX390_GAIN_DEFAULT		0x80
-
-#define IMX390_RED_BALANCE_MIN		0
-#define IMX390_RED_BALANCE_MAX		0xfff
-#define IMX390_RED_BALANCE_STEP		1
-#define IMX390_RED_BALANCE_DEF		0x100
-
-#define IMX390_BLUE_BALANCE_MIN		0
-#define IMX390_BLUE_BALANCE_MAX		0xfff
-#define IMX390_BLUE_BALANCE_STEP	1
-#define IMX390_BLUE_BALANCE_DEF		0x100
-
-#define MAX(a, b)		(((a) > (b)) ? (a) : (b))
-
-#define IMX390_CID_CSI_PORT         (V4L2_CID_USER_BASE | 0x1001)
-#define IMX390_CID_I2C_BUS         (V4L2_CID_USER_BASE | 0x1002)
-#define IMX390_CID_I2C_ID         (V4L2_CID_USER_BASE | 0x1003)
-#define IMX390_CID_I2C_SLAVE_ADDRESS         (V4L2_CID_USER_BASE | 0x1004)
-#define IMX390_CID_FPS         (V4L2_CID_USER_BASE | 0x1005)
-#define IMX390_CID_FRAME_INTERVAL	(V4L2_CID_USER_BASE | 0x1006)
-
-/*
- * dummy CID
- */
-#define V4L2_CID_IMX390_BASE		(V4L2_CID_USER_BASE + 0x2050)
-
-#define V4L2_CID_FRAME_LENGTH_LINES (V4L2_CID_IMX390_BASE + 1)
-#define V4L2_CID_LINE_LENGTH_PIXELS (V4L2_CID_IMX390_BASE + 2)
-#define IMX390_CID_SENSOR_THERMAL_DATA (V4L2_CID_IMX390_BASE + 3)
-
-/*
- * Select sensor mode directly, driver programs media pad
- * formats as in configuration file
- */
-#define IMX390_CID_SENSOR_MODE (V4L2_CID_IMX390_BASE + 4)
-
-/* IMX230 HDR specific controls */
-#define IMX390_CID_IMX230_HDR_MODE		(V4L2_CID_IMX390_BASE + 5)
-#define IMX390_CID_IMX230_HDR_ET_RATIO	(V4L2_CID_IMX390_BASE + 6)
-
-/* Set multi-exposure frame in HDR with different exposure value */
-#define IMX390_CID_EXPOSURE_SHS1		(V4L2_CID_IMX390_BASE + 8)
-#define IMX390_CID_EXPOSURE_SHS2		(V4L2_CID_IMX390_BASE + 9)
-#define IMX390_CID_EXPOSURE_SHS3		(V4L2_CID_IMX390_BASE + 10)
-#define IMX390_CID_EXPOSURE_RHS1		(V4L2_CID_IMX390_BASE + 11)
-#define IMX390_CID_EXPOSURE_RHS2		(V4L2_CID_IMX390_BASE + 12)
-
-/* Switch to enable/disable PDAF settings */
-#define IMX390_CID_SENSOR_PDAF		(V4L2_CID_IMX390_BASE + 13)
-
-/* Set multi-digital gain */
-#define IMX390_CID_DIGITAL_GAIN_L		(V4L2_CID_IMX390_BASE + 14)
-#define IMX390_CID_DIGITAL_GAIN_S		(V4L2_CID_IMX390_BASE + 15)
-#define IMX390_CID_DIGITAL_GAIN_VS		(V4L2_CID_IMX390_BASE + 16)
-
-/* Get sensor bit linear */
-#define IMX390_CID_SENSOR_BIT_LINEAR	(V4L2_CID_IMX390_BASE + 17)
-
-/* set sensor msb align*/
-#define IMX390_CID_MSB_ALIGN		(V4L2_CID_IMX390_BASE + 18)
-
-/* enable/disable auto exposure */
-#define IMX390_CID_AUTO_EXPOSURE_DEBUG	(V4L2_CID_IMX390_BASE + 19)
-
-/* set analog gain for HDR frames */
-#define IMX390_CID_ANALOG_GAIN_L		(V4L2_CID_IMX390_BASE + 20)
-#define IMX390_CID_ANALOG_GAIN_S		(V4L2_CID_IMX390_BASE + 21)
-#define IMX390_CID_ANALOG_GAIN_VS		(V4L2_CID_IMX390_BASE + 22)
-
-/* Set exposure mode: Linear mode or 2-/3-/4-HDR mode */
-#define IMX390_CID_EXPOSURE_MODE		(V4L2_CID_IMX390_BASE + 23)
-
-/* Set HDR mode exposure ratio */
-#define IMX390_CID_EXPOSURE_HDR_RATIO	(V4L2_CID_IMX390_BASE + 24)
-
-/* choose hcg/lcg for linear analog */
-#define IMX390_CID_ANALOG_LINEAR_CG	(V4L2_CID_IMX390_BASE + 25)
-
-/* Digital gain controls from sensor */
-#define IMX390_DUMMY_MIN		0
-#define IMX390_DUMMY_MAX		0x7ff
-#define IMX390_DUMMY_STEP		1
-#define IMX390_DUMMY_DEF		0x1
-
-/*
- * end of dummy CID
- */
-
-#define to_imx390(_sd)			container_of(_sd, struct imx390, sd)
-
-/**
- * Register addresses (see data sheet/register map)
- */
-enum {
-	IMX390_REG_STANDBY = 0x0000,
-	IMX390_REG_REG_HOLD = 0x0008,
-	IMX390_REG_SHS1 = 0x000c,
-	IMX390_REG_SHS2 = 0x0010,
-	IMX390_REG_AGAIN_SP1H = 0x0018,
-	IMX390_REG_AGAIN_SP1L = 0x001a,
-
-	/* default bayer order RGGB */
-	IMX390_REG_WBGAIN_R = 0x0030,
-	IMX390_REG_WBGAIN_GR = 0x0032,
-	IMX390_REG_WBGAIN_GB = 0x0034,
-	IMX390_REG_WBGAIN_B = 0x0036,
-
-	IMX390_REG_OBB_CLAMP_CTRL_SEL = 0x0083,
-	IMX390_REG_REAR_EMBDATA_LINE = 0x2E18,
-	IMX390_REG_REV1 = 0x3060,
-	IMX390_REG_REV2 = 0x3064,
-	IMX390_REG_REV3 = 0x3067,
-	IMX390_REG_WBGAIN_FORCE_X1 = 0x36A8,
-};
-
-enum {
-	IMX390_LINK_FREQ_360MBPS,
-	IMX390_LINK_FREQ_300MBPS,
-	IMX390_LINK_FREQ_288MBPS,
-	IMX390_LINK_FREQ_240MBPS,
-};
-
-struct imx390_reg {
-	u16 address;
-	u16 val;
-};
-
-struct imx390_reg_list {
-	u32 num_of_regs;
-	const struct imx390_reg *regs;
-};
-
-struct imx390_link_freq_config {
-	const struct imx390_reg_list reg_list;
-};
-
-struct imx390_mode {
-	/* Frame width in pixels */
-	u32 width;
-
-	/* Frame height in pixels */
-	u32 height;
-
-	bool hdr_en;
-
-	/* Horizontal timining size */
-	u32 hts;
-
-	/* Default vertical timining size */
-	u32 vts_def;
-
-	/* Min vertical timining size */
-	u32 vts_min;
-
-	/* Link frequency needed for this resolution */
-	u32 link_freq_index;
-
-	/* MEDIA_BUS_FMT */
-	u32 code;
-
-	/* MIPI_LANES */
-	s32 lanes;
-
-	/* MODE_FPS*/
-	u32 fps;
-
-	/* bit per pixel */
-	u32 bpp;
-
-	/* Sensor register settings for this resolution */
-	const struct imx390_reg_list reg_list;
-};
-
-struct imx390 {
-	struct v4l2_subdev sd;
-	struct media_pad pad;
-	struct v4l2_ctrl_handler ctrl_handler;
-
-	/* V4L2 Controls */
-	struct v4l2_ctrl *link_freq;
-	struct v4l2_ctrl *mipi_lanes;
-	struct v4l2_ctrl *vblank;
-	struct v4l2_ctrl *exposure;
-	struct v4l2_ctrl *analogue_gain;
-	struct v4l2_ctrl *digital_gain;
-	struct v4l2_ctrl *gain;
-	struct v4l2_ctrl *strobe_source;
-	struct v4l2_ctrl *strobe;
-	struct v4l2_ctrl *strobe_stop;
-	struct v4l2_ctrl *timeout;
-	struct v4l2_ctrl *csi_port;
-	struct v4l2_ctrl *i2c_bus;
-	struct v4l2_ctrl *i2c_id;
-	struct v4l2_ctrl *i2c_slave_address;
-	struct v4l2_ctrl *fps;
-	struct v4l2_ctrl *frame_interval;
-	struct v4l2_ctrl *pixel_rate;
-	struct v4l2_ctrl *hblank;
-	struct v4l2_ctrl *red_balance;
-	struct v4l2_ctrl *blue_balance;
-	struct v4l2_ctrl *dummy_exp_shs1;
-	struct v4l2_ctrl *dummy_exp_shs2;
-	struct v4l2_ctrl *dummy_exp_shs3;
-	struct v4l2_ctrl *dummy_exp_rhs1;
-	struct v4l2_ctrl *dummy_exp_rhs2;
-	struct v4l2_ctrl *dummy_dg_l;
-	struct v4l2_ctrl *dummy_dg_s;
-	struct v4l2_ctrl *dummy_dg_vs;
-	struct v4l2_ctrl *dummy_ag_l;
-	struct v4l2_ctrl *dummy_ag_s;
-	struct v4l2_ctrl *dummy_ag_vs;
-	struct v4l2_ctrl *lsc_pattern;
-
-	/* Current mode */
-	const struct imx390_mode *cur_mode;
-	/* Previous mode */
-	const struct imx390_mode *pre_mode;
-
-	/* To serialize asynchronus callbacks */
-	struct mutex mutex;
-
-	/* Streaming on/off */
-	bool streaming;
-
-	struct imx390_platform_data *platform_data;
-};
-
-#include "imx390-mode-1280x960-CROP.h"
-#include "imx390_mode_1920x1200HDR3_CUST_PWL12.h"
-
-static int imx390_group_hold_enable(struct imx390 *imx390, s32 val);
-
-enum {
-	LSC_PATTERN_DISABLED = 0,
-	LSC_PATTERN_UNITY,
-	LSC_PATTERN_TABLE,
-};
-
-static const char * const lsc_qmenu[] = {
-	"Disabled",
-	"all 0x80",
-	"table",
-};
-
-static const struct imx390_reg imx390_lsc_pattern_unity[] = {
-	{0x4000, 0x80},
-	{0x4001, 0x80},
-	{0x4002, 0x80},
-	{0x4003, 0x80},
-	{0x4004, 0x80},
-	{0x4005, 0x80},
-	{0x4006, 0x80},
-	{0x4007, 0x80},
-	{0x4008, 0x80},
-	{0x4009, 0x80},
-	{0x400A, 0x80},
-	{0x400B, 0x80},
-	{0x400C, 0x80},
-	{0x400D, 0x80},
-	{0x400E, 0x80},
-	{0x400F, 0x80},
-	{0x4010, 0x80},
-	{0x4011, 0x80},
-	{0x4012, 0x80},
-	{0x4013, 0x80},
-	{0x4014, 0x80},
-	{0x4015, 0x80},
-	{0x4016, 0x80},
-	{0x4017, 0x80},
-	{0x4018, 0x80},
-	{0x4019, 0x80},
-	{0x401A, 0x80},
-	{0x401B, 0x80},
-	{0x401C, 0x80},
-	{0x401D, 0x80},
-	{0x401E, 0x80},
-	{0x401F, 0x80},
-	{0x4020, 0x80},
-	{0x4021, 0x80},
-	{0x4022, 0x80},
-	{0x4023, 0x80},
-	{0x4024, 0x80},
-	{0x4025, 0x80},
-	{0x4026, 0x80},
-	{0x4027, 0x80},
-	{0x4028, 0x80},
-	{0x4029, 0x80},
-	{0x402A, 0x80},
-	{0x402B, 0x80},
-	{0x402C, 0x80},
-	{0x402D, 0x80},
-	{0x402E, 0x80},
-	{0x402F, 0x80},
-	{0x4030, 0x80},
-	{0x4031, 0x80},
-	{0x4032, 0x80},
-	{0x4033, 0x80},
-	{0x4034, 0x80},
-	{0x4035, 0x80},
-	{0x4036, 0x80},
-	{0x4037, 0x80},
-	{0x4038, 0x80},
-	{0x4039, 0x80},
-	{0x403A, 0x80},
-	{0x403B, 0x80},
-	{0x403C, 0x80},
-	{0x403D, 0x80},
-	{0x403E, 0x80},
-	{0x403F, 0x80},
-	{0x4040, 0x80},
-	{0x4041, 0x80},
-	{0x4042, 0x80},
-	{0x4043, 0x80},
-	{0x4044, 0x80},
-	{0x4045, 0x80},
-	{0x4046, 0x80},
-	{0x4047, 0x80},
-	{0x4048, 0x80},
-	{0x4049, 0x80},
-	{0x404A, 0x80},
-	{0x404B, 0x80},
-	{0x404C, 0x80},
-	{0x404D, 0x80},
-	{0x404E, 0x80},
-	{0x404F, 0x80},
-	{0x4050, 0x80},
-	{0x4051, 0x80},
-	{0x4052, 0x80},
-	{0x4053, 0x80},
-	{0x4054, 0x80},
-	{0x4055, 0x80},
-	{0x4056, 0x80},
-	{0x4057, 0x80},
-	{0x4058, 0x80},
-	{0x4059, 0x80},
-	{0x405A, 0x80},
-	{0x405B, 0x80},
-	{0x405C, 0x80},
-	{0x405D, 0x80},
-	{0x405E, 0x80},
-	{0x405F, 0x80},
-	{0x4060, 0x80},
-	{0x4061, 0x80},
-	{0x4062, 0x80},
-	{0x4063, 0x80},
-	{0x4064, 0x80},
-	{0x4065, 0x80},
-	{0x4066, 0x80},
-	{0x4067, 0x80},
-	{0x4068, 0x80},
-	{0x4069, 0x80},
-	{0x406A, 0x80},
-	{0x406B, 0x80},
-	{0x406C, 0x80},
-	{0x406D, 0x80},
-	{0x406E, 0x80},
-	{0x406F, 0x80},
-	{0x4070, 0x80},
-	{0x4071, 0x80},
-	{0x4072, 0x80},
-	{0x4073, 0x80},
-	{0x4074, 0x80},
-	{0x4075, 0x80},
-	{0x4076, 0x80},
-	{0x4077, 0x80},
-	{0x4078, 0x80},
-	{0x4079, 0x80},
-	{0x407A, 0x80},
-	{0x407B, 0x80},
-	{0x407C, 0x80},
-	{0x407D, 0x80},
-	{0x407E, 0x80},
-	{0x407F, 0x80},
-	{0x4080, 0x80},
-	{0x4081, 0x80},
-	{0x4082, 0x80},
-	{0x4083, 0x80},
-	{0x4084, 0x80},
-	{0x4085, 0x80},
-	{0x4086, 0x80},
-	{0x4087, 0x80},
-	{0x4088, 0x80},
-	{0x4089, 0x80},
-	{0x408A, 0x80},
-	{0x408B, 0x80},
-	{0x408C, 0x80},
-	{0x408D, 0x80},
-	{0x408E, 0x80},
-	{0x408F, 0x80},
-	{0x4090, 0x80},
-	{0x4091, 0x80},
-	{0x4092, 0x80},
-	{0x4093, 0x80},
-	{0x4094, 0x80},
-	{0x4095, 0x80},
-	{0x4096, 0x80},
-	{0x4097, 0x80},
-	{0x4098, 0x80},
-	{0x4099, 0x80},
-	{0x409A, 0x80},
-	{0x409B, 0x80},
-	{0x409C, 0x80},
-	{0x409D, 0x80},
-	{0x409E, 0x80},
-	{0x409F, 0x80},
-	{0x40A0, 0x80},
-	{0x40A1, 0x80},
-	{0x40A2, 0x80},
-	{0x40A3, 0x80},
-	{0x40A4, 0x80},
-	{0x40A5, 0x80},
-	{0x40A6, 0x80},
-	{0x40A7, 0x80},
-	{0x40A8, 0x80},
-	{0x40A9, 0x80},
-	{0x40AA, 0x80},
-	{0x40AB, 0x80},
-	{0x40AC, 0x80},
-	{0x40AD, 0x80},
-	{0x40AE, 0x80},
-	{0x40AF, 0x80},
-	{0x40B0, 0x80},
-	{0x40B1, 0x80},
-	{0x40B2, 0x80},
-	{0x40B3, 0x80},
-	{0x40B4, 0x80},
-	{0x40B5, 0x80},
-	{0x40B6, 0x80},
-	{0x40B7, 0x80},
-	{0x40B8, 0x80},
-	{0x40B9, 0x80},
-	{0x40BA, 0x80},
-	{0x40BB, 0x80},
-	{0x40BC, 0x80},
-	{0x40BD, 0x80},
-	{0x40BE, 0x80},
-	{0x40BF, 0x80},
-	{0x40C0, 0x80},
-	{0x40C1, 0x80},
-	{0x40C2, 0x80},
-	{0x40C3, 0x80},
-	{0x40C4, 0x80},
-	{0x40C5, 0x80},
-	{0x40C6, 0x80},
-	{0x40C7, 0x80},
-	{0x40C8, 0x80},
-	{0x40C9, 0x80},
-	{0x40CA, 0x80},
-	{0x40CB, 0x80},
-	{0x40CC, 0x80},
-	{0x40CD, 0x80},
-	{0x40CE, 0x80},
-	{0x40CF, 0x80},
-	{0x40D0, 0x80},
-	{0x40D1, 0x80},
-	{0x40D2, 0x80},
-	{0x40D3, 0x80},
-	{0x40D4, 0x80},
-	{0x40D5, 0x80},
-	{0x40D6, 0x80},
-	{0x40D7, 0x80},
-};
-
-static const struct imx390_reg_list lsc_unity_list = {
-	.num_of_regs = ARRAY_SIZE(imx390_lsc_pattern_unity),
-	.regs = imx390_lsc_pattern_unity,
-};
-
-static const struct imx390_reg imx390_lsc_pattern_vendor_def[] = {
-	{0x01D0, 0x01}, /* SHD_ON                    */
-	{0x3AF6, 0x00}, /* SHD_DIFF_ACCURACY         */
-	{0x4000, 0x64}, /* SHD_KNOT_1_R0             */
-	{0x4001, 0x5D}, /* SHD_KNOT_1_GR0            */
-	{0x4002, 0x5D}, /* SHD_KNOT_1_GB0            */
-	{0x4003, 0x5B}, /* SHD_KNOT_1_B0             */
-	{0x4004, 0x6D}, /* SHD_KNOT_1_R1             */
-	{0x4005, 0x69}, /* SHD_KNOT_1_GR1            */
-	{0x4006, 0x69}, /* SHD_KNOT_1_GB1            */
-	{0x4007, 0x67}, /* SHD_KNOT_1_B1             */
-	{0x4008, 0x74}, /* SHD_KNOT_1_R2             */
-	{0x4009, 0x71}, /* SHD_KNOT_1_GR2            */
-	{0x400A, 0x71}, /* SHD_KNOT_1_GB2            */
-	{0x400B, 0x70}, /* SHD_KNOT_1_B2             */
-	{0x400C, 0x77}, /* SHD_KNOT_1_R3             */
-	{0x400D, 0x76}, /* SHD_KNOT_1_GR3            */
-	{0x400E, 0x76}, /* SHD_KNOT_1_GB3            */
-	{0x400F, 0x75}, /* SHD_KNOT_1_B3             */
-	{0x4010, 0x78}, /* SHD_KNOT_1_R4             */
-	{0x4011, 0x77}, /* SHD_KNOT_1_GR4            */
-	{0x4012, 0x77}, /* SHD_KNOT_1_GB4            */
-	{0x4013, 0x76}, /* SHD_KNOT_1_B4             */
-	{0x4014, 0x77}, /* SHD_KNOT_1_R5             */
-	{0x4015, 0x75}, /* SHD_KNOT_1_GR5            */
-	{0x4016, 0x75}, /* SHD_KNOT_1_GB5            */
-	{0x4017, 0x74}, /* SHD_KNOT_1_B5             */
-	{0x4018, 0x72}, /* SHD_KNOT_1_R6             */
-	{0x4019, 0x70}, /* SHD_KNOT_1_GR6            */
-	{0x401A, 0x70}, /* SHD_KNOT_1_GB6            */
-	{0x401B, 0x6F}, /* SHD_KNOT_1_B6             */
-	{0x401C, 0x6B}, /* SHD_KNOT_1_R7             */
-	{0x401D, 0x67}, /* SHD_KNOT_1_GR7            */
-	{0x401E, 0x67}, /* SHD_KNOT_1_GB7            */
-	{0x401F, 0x66}, /* SHD_KNOT_1_B7             */
-	{0x4020, 0x61}, /* SHD_KNOT_1_R8             */
-	{0x4021, 0x5B}, /* SHD_KNOT_1_GR8            */
-	{0x4022, 0x5B}, /* SHD_KNOT_1_GB8            */
-	{0x4023, 0x59}, /* SHD_KNOT_1_B8             */
-	{0x4024, 0x69}, /* SHD_KNOT_1_R9             */
-	{0x4025, 0x63}, /* SHD_KNOT_1_GR9            */
-	{0x4026, 0x63}, /* SHD_KNOT_1_GB9            */
-	{0x4027, 0x62}, /* SHD_KNOT_1_B9             */
-	{0x4028, 0x71}, /* SHD_KNOT_1_R10            */
-	{0x4029, 0x6E}, /* SHD_KNOT_1_GR10           */
-	{0x402A, 0x6E}, /* SHD_KNOT_1_GB10           */
-	{0x402B, 0x6D}, /* SHD_KNOT_1_B10            */
-	{0x402C, 0x78}, /* SHD_KNOT_1_R11            */
-	{0x402D, 0x76}, /* SHD_KNOT_1_GR11           */
-	{0x402E, 0x76}, /* SHD_KNOT_1_GB11           */
-	{0x402F, 0x76}, /* SHD_KNOT_1_B11            */
-	{0x4030, 0x7C}, /* SHD_KNOT_1_R12            */
-	{0x4031, 0x7B}, /* SHD_KNOT_1_GR12           */
-	{0x4032, 0x7B}, /* SHD_KNOT_1_GB12           */
-	{0x4033, 0x7B}, /* SHD_KNOT_1_B12            */
-	{0x4034, 0x7D}, /* SHD_KNOT_1_R13            */
-	{0x4035, 0x7D}, /* SHD_KNOT_1_GR13           */
-	{0x4036, 0x7D}, /* SHD_KNOT_1_GB13           */
-	{0x4037, 0x7C}, /* SHD_KNOT_1_B13            */
-	{0x4038, 0x7B}, /* SHD_KNOT_1_R14            */
-	{0x4039, 0x7B}, /* SHD_KNOT_1_GR14           */
-	{0x403A, 0x7B}, /* SHD_KNOT_1_GB14           */
-	{0x403B, 0x7A}, /* SHD_KNOT_1_B14            */
-	{0x403C, 0x77}, /* SHD_KNOT_1_R15            */
-	{0x403D, 0x75}, /* SHD_KNOT_1_GR15           */
-	{0x403E, 0x76}, /* SHD_KNOT_1_GB15           */
-	{0x403F, 0x75}, /* SHD_KNOT_1_B15            */
-	{0x4040, 0x70}, /* SHD_KNOT_1_R16            */
-	{0x4041, 0x6D}, /* SHD_KNOT_1_GR16           */
-	{0x4042, 0x6D}, /* SHD_KNOT_1_GB16           */
-	{0x4043, 0x6C}, /* SHD_KNOT_1_B16            */
-	{0x4044, 0x67}, /* SHD_KNOT_1_R17            */
-	{0x4045, 0x61}, /* SHD_KNOT_1_GR17           */
-	{0x4046, 0x61}, /* SHD_KNOT_1_GB17           */
-	{0x4047, 0x60}, /* SHD_KNOT_1_B17            */
-	{0x4048, 0x6B}, /* SHD_KNOT_1_R18            */
-	{0x4049, 0x66}, /* SHD_KNOT_1_GR18           */
-	{0x404A, 0x66}, /* SHD_KNOT_1_GB18           */
-	{0x404B, 0x65}, /* SHD_KNOT_1_B18            */
-	{0x404C, 0x74}, /* SHD_KNOT_1_R19            */
-	{0x404D, 0x71}, /* SHD_KNOT_1_GR19           */
-	{0x404E, 0x71}, /* SHD_KNOT_1_GB19           */
-	{0x404F, 0x70}, /* SHD_KNOT_1_B19            */
-	{0x4050, 0x7B}, /* SHD_KNOT_1_R20            */
-	{0x4051, 0x7A}, /* SHD_KNOT_1_GR20           */
-	{0x4052, 0x7A}, /* SHD_KNOT_1_GB20           */
-	{0x4053, 0x79}, /* SHD_KNOT_1_B20            */
-	{0x4054, 0x7F}, /* SHD_KNOT_1_R21            */
-	{0x4055, 0x7E}, /* SHD_KNOT_1_GR21           */
-	{0x4056, 0x7E}, /* SHD_KNOT_1_GB21           */
-	{0x4057, 0x7E}, /* SHD_KNOT_1_B21            */
-	{0x4058, 0x80}, /* SHD_KNOT_1_R22            */
-	{0x4059, 0x80}, /* SHD_KNOT_1_GR22           */
-	{0x405A, 0x80}, /* SHD_KNOT_1_GB22           */
-	{0x405B, 0x80}, /* SHD_KNOT_1_B22            */
-	{0x405C, 0x7E}, /* SHD_KNOT_1_R23            */
-	{0x405D, 0x7E}, /* SHD_KNOT_1_GR23           */
-	{0x405E, 0x7E}, /* SHD_KNOT_1_GB23           */
-	{0x405F, 0x7D}, /* SHD_KNOT_1_B23            */
-	{0x4060, 0x7A}, /* SHD_KNOT_1_R24            */
-	{0x4061, 0x79}, /* SHD_KNOT_1_GR24           */
-	{0x4062, 0x79}, /* SHD_KNOT_1_GB24           */
-	{0x4063, 0x78}, /* SHD_KNOT_1_B24            */
-	{0x4064, 0x73}, /* SHD_KNOT_1_R25            */
-	{0x4065, 0x70}, /* SHD_KNOT_1_GR25           */
-	{0x4066, 0x70}, /* SHD_KNOT_1_GB25           */
-	{0x4067, 0x6F}, /* SHD_KNOT_1_B25            */
-	{0x4068, 0x69}, /* SHD_KNOT_1_R26            */
-	{0x4069, 0x64}, /* SHD_KNOT_1_GR26           */
-	{0x406A, 0x64}, /* SHD_KNOT_1_GB26           */
-	{0x406B, 0x63}, /* SHD_KNOT_1_B26            */
-	{0x406C, 0x6B}, /* SHD_KNOT_1_R27            */
-	{0x406D, 0x66}, /* SHD_KNOT_1_GR27           */
-	{0x406E, 0x66}, /* SHD_KNOT_1_GB27           */
-	{0x406F, 0x65}, /* SHD_KNOT_1_B27            */
-	{0x4070, 0x74}, /* SHD_KNOT_1_R28            */
-	{0x4071, 0x71}, /* SHD_KNOT_1_GR28           */
-	{0x4072, 0x71}, /* SHD_KNOT_1_GB28           */
-	{0x4073, 0x70}, /* SHD_KNOT_1_B28            */
-	{0x4074, 0x7B}, /* SHD_KNOT_1_R29            */
-	{0x4075, 0x79}, /* SHD_KNOT_1_GR29           */
-	{0x4076, 0x79}, /* SHD_KNOT_1_GB29           */
-	{0x4077, 0x79}, /* SHD_KNOT_1_B29            */
-	{0x4078, 0x7E}, /* SHD_KNOT_1_R30            */
-	{0x4079, 0x7D}, /* SHD_KNOT_1_GR30           */
-	{0x407A, 0x7D}, /* SHD_KNOT_1_GB30           */
-	{0x407B, 0x7D}, /* SHD_KNOT_1_B30            */
-	{0x407C, 0x7F}, /* SHD_KNOT_1_R31            */
-	{0x407D, 0x7F}, /* SHD_KNOT_1_GR31           */
-	{0x407E, 0x7F}, /* SHD_KNOT_1_GB31           */
-	{0x407F, 0x7F}, /* SHD_KNOT_1_B31            */
-	{0x4080, 0x7E}, /* SHD_KNOT_1_R32            */
-	{0x4081, 0x7D}, /* SHD_KNOT_1_GR32           */
-	{0x4082, 0x7D}, /* SHD_KNOT_1_GB32           */
-	{0x4083, 0x7D}, /* SHD_KNOT_1_B32            */
-	{0x4084, 0x7A}, /* SHD_KNOT_1_R33            */
-	{0x4085, 0x78}, /* SHD_KNOT_1_GR33           */
-	{0x4086, 0x78}, /* SHD_KNOT_1_GB33           */
-	{0x4087, 0x78}, /* SHD_KNOT_1_B33            */
-	{0x4088, 0x73}, /* SHD_KNOT_1_R34            */
-	{0x4089, 0x70}, /* SHD_KNOT_1_GR34           */
-	{0x408A, 0x70}, /* SHD_KNOT_1_GB34           */
-	{0x408B, 0x6F}, /* SHD_KNOT_1_B34            */
-	{0x408C, 0x69}, /* SHD_KNOT_1_R35            */
-	{0x408D, 0x64}, /* SHD_KNOT_1_GR35           */
-	{0x408E, 0x64}, /* SHD_KNOT_1_GB35           */
-	{0x408F, 0x63}, /* SHD_KNOT_1_B35            */
-	{0x4090, 0x68}, /* SHD_KNOT_1_R36            */
-	{0x4091, 0x62}, /* SHD_KNOT_1_GR36           */
-	{0x4092, 0x62}, /* SHD_KNOT_1_GB36           */
-	{0x4093, 0x61}, /* SHD_KNOT_1_B36            */
-	{0x4094, 0x71}, /* SHD_KNOT_1_R37            */
-	{0x4095, 0x6D}, /* SHD_KNOT_1_GR37           */
-	{0x4096, 0x6D}, /* SHD_KNOT_1_GB37           */
-	{0x4097, 0x6D}, /* SHD_KNOT_1_B37            */
-	{0x4098, 0x77}, /* SHD_KNOT_1_R38            */
-	{0x4099, 0x75}, /* SHD_KNOT_1_GR38           */
-	{0x409A, 0x75}, /* SHD_KNOT_1_GB38           */
-	{0x409B, 0x75}, /* SHD_KNOT_1_B38            */
-	{0x409C, 0x7B}, /* SHD_KNOT_1_R39            */
-	{0x409D, 0x7A}, /* SHD_KNOT_1_GR39           */
-	{0x409E, 0x7A}, /* SHD_KNOT_1_GB39           */
-	{0x409F, 0x7A}, /* SHD_KNOT_1_B39            */
-	{0x40A0, 0x7C}, /* SHD_KNOT_1_R40            */
-	{0x40A1, 0x7B}, /* SHD_KNOT_1_GR40           */
-	{0x40A2, 0x7B}, /* SHD_KNOT_1_GB40           */
-	{0x40A3, 0x7B}, /* SHD_KNOT_1_B40            */
-	{0x40A4, 0x7B}, /* SHD_KNOT_1_R41            */
-	{0x40A5, 0x79}, /* SHD_KNOT_1_GR41           */
-	{0x40A6, 0x79}, /* SHD_KNOT_1_GB41           */
-	{0x40A7, 0x79}, /* SHD_KNOT_1_B41            */
-	{0x40A8, 0x77}, /* SHD_KNOT_1_R42            */
-	{0x40A9, 0x74}, /* SHD_KNOT_1_GR42           */
-	{0x40AA, 0x74}, /* SHD_KNOT_1_GB42           */
-	{0x40AB, 0x74}, /* SHD_KNOT_1_B42            */
-	{0x40AC, 0x70}, /* SHD_KNOT_1_R43            */
-	{0x40AD, 0x6C}, /* SHD_KNOT_1_GR43           */
-	{0x40AE, 0x6C}, /* SHD_KNOT_1_GB43           */
-	{0x40AF, 0x6C}, /* SHD_KNOT_1_B43            */
-	{0x40B0, 0x66}, /* SHD_KNOT_1_R44            */
-	{0x40B1, 0x60}, /* SHD_KNOT_1_GR44           */
-	{0x40B2, 0x60}, /* SHD_KNOT_1_GB44           */
-	{0x40B3, 0x5F}, /* SHD_KNOT_1_B44            */
-	{0x40B4, 0x62}, /* SHD_KNOT_1_R45            */
-	{0x40B5, 0x5B}, /* SHD_KNOT_1_GR45           */
-	{0x40B6, 0x5B}, /* SHD_KNOT_1_GB45           */
-	{0x40B7, 0x5A}, /* SHD_KNOT_1_B45            */
-	{0x40B8, 0x6B}, /* SHD_KNOT_1_R46            */
-	{0x40B9, 0x66}, /* SHD_KNOT_1_GR46           */
-	{0x40BA, 0x66}, /* SHD_KNOT_1_GB46           */
-	{0x40BB, 0x65}, /* SHD_KNOT_1_B46            */
-	{0x40BC, 0x71}, /* SHD_KNOT_1_R47            */
-	{0x40BD, 0x6E}, /* SHD_KNOT_1_GR47           */
-	{0x40BE, 0x6E}, /* SHD_KNOT_1_GB47           */
-	{0x40BF, 0x6D}, /* SHD_KNOT_1_B47            */
-	{0x40C0, 0x75}, /* SHD_KNOT_1_R48            */
-	{0x40C1, 0x72}, /* SHD_KNOT_1_GR48           */
-	{0x40C2, 0x72}, /* SHD_KNOT_1_GB48           */
-	{0x40C3, 0x72}, /* SHD_KNOT_1_B48            */
-	{0x40C4, 0x76}, /* SHD_KNOT_1_R49            */
-	{0x40C5, 0x74}, /* SHD_KNOT_1_GR49           */
-	{0x40C6, 0x74}, /* SHD_KNOT_1_GB49           */
-	{0x40C7, 0x74}, /* SHD_KNOT_1_B49            */
-	{0x40C8, 0x75}, /* SHD_KNOT_1_R50            */
-	{0x40C9, 0x72}, /* SHD_KNOT_1_GR50           */
-	{0x40CA, 0x72}, /* SHD_KNOT_1_GB50           */
-	{0x40CB, 0x72}, /* SHD_KNOT_1_B50            */
-	{0x40CC, 0x71}, /* SHD_KNOT_1_R51            */
-	{0x40CD, 0x6D}, /* SHD_KNOT_1_GR51           */
-	{0x40CE, 0x6D}, /* SHD_KNOT_1_GB51           */
-	{0x40CF, 0x6D}, /* SHD_KNOT_1_B51            */
-	{0x40D0, 0x6A}, /* SHD_KNOT_1_R52            */
-	{0x40D1, 0x64}, /* SHD_KNOT_1_GR52           */
-	{0x40D2, 0x64}, /* SHD_KNOT_1_GB52           */
-	{0x40D3, 0x64}, /* SHD_KNOT_1_B52            */
-	{0x40D4, 0x61}, /* SHD_KNOT_1_R53            */
-	{0x40D5, 0x59}, /* SHD_KNOT_1_GR53           */
-	{0x40D6, 0x59}, /* SHD_KNOT_1_GB53           */
-	{0x40D7, 0x58}, /* SHD_KNOT_1_B53            */
-	{0x4300, 0x8E}, /* SHD_KNOT_DIFF_1_R0        */
-	{0x4301, 0x8B}, /* SHD_KNOT_DIFF_1_GR0       */
-	{0x4302, 0x8B}, /* SHD_KNOT_DIFF_1_GB0       */
-	{0x4303, 0x8C}, /* SHD_KNOT_DIFF_1_B0        */
-	{0x4304, 0x88}, /* SHD_KNOT_DIFF_1_R1        */
-	{0x4305, 0x88}, /* SHD_KNOT_DIFF_1_GR1       */
-	{0x4306, 0x88}, /* SHD_KNOT_DIFF_1_GB1       */
-	{0x4307, 0x88}, /* SHD_KNOT_DIFF_1_B1        */
-	{0x4308, 0x88}, /* SHD_KNOT_DIFF_1_R2        */
-	{0x4309, 0x84}, /* SHD_KNOT_DIFF_1_GR2       */
-	{0x430A, 0x84}, /* SHD_KNOT_DIFF_1_GB2       */
-	{0x430B, 0x85}, /* SHD_KNOT_DIFF_1_B2        */
-	{0x430C, 0x83}, /* SHD_KNOT_DIFF_1_R3        */
-	{0x430D, 0x82}, /* SHD_KNOT_DIFF_1_GR3       */
-	{0x430E, 0x82}, /* SHD_KNOT_DIFF_1_GB3       */
-	{0x430F, 0x82}, /* SHD_KNOT_DIFF_1_B3        */
-	{0x4310, 0x84}, /* SHD_KNOT_DIFF_1_R4        */
-	{0x4311, 0x83}, /* SHD_KNOT_DIFF_1_GR4       */
-	{0x4312, 0x83}, /* SHD_KNOT_DIFF_1_GB4       */
-	{0x4313, 0x83}, /* SHD_KNOT_DIFF_1_B4        */
-	{0x4314, 0x84}, /* SHD_KNOT_DIFF_1_R5        */
-	{0x4315, 0x85}, /* SHD_KNOT_DIFF_1_GR5       */
-	{0x4316, 0x85}, /* SHD_KNOT_DIFF_1_GB5       */
-	{0x4317, 0x84}, /* SHD_KNOT_DIFF_1_B5        */
-	{0x4318, 0x86}, /* SHD_KNOT_DIFF_1_R6        */
-	{0x4319, 0x87}, /* SHD_KNOT_DIFF_1_GR6       */
-	{0x431A, 0x87}, /* SHD_KNOT_DIFF_1_GB6       */
-	{0x431B, 0x87}, /* SHD_KNOT_DIFF_1_B6        */
-	{0x431C, 0x8D}, /* SHD_KNOT_DIFF_1_R7        */
-	{0x431D, 0x8B}, /* SHD_KNOT_DIFF_1_GR7       */
-	{0x431E, 0x8B}, /* SHD_KNOT_DIFF_1_GB7       */
-	{0x431F, 0x8C}, /* SHD_KNOT_DIFF_1_B7        */
-	{0x4320, 0x93}, /* SHD_KNOT_DIFF_1_R8        */
-	{0x4321, 0x91}, /* SHD_KNOT_DIFF_1_GR8       */
-	{0x4322, 0x90}, /* SHD_KNOT_DIFF_1_GB8       */
-	{0x4323, 0x91}, /* SHD_KNOT_DIFF_1_B8        */
-	{0x4324, 0x8A}, /* SHD_KNOT_DIFF_1_R9        */
-	{0x4325, 0x89}, /* SHD_KNOT_DIFF_1_GR9       */
-	{0x4326, 0x89}, /* SHD_KNOT_DIFF_1_GB9       */
-	{0x4327, 0x8A}, /* SHD_KNOT_DIFF_1_B9        */
-	{0x4328, 0x87}, /* SHD_KNOT_DIFF_1_R10       */
-	{0x4329, 0x85}, /* SHD_KNOT_DIFF_1_GR10      */
-	{0x432A, 0x85}, /* SHD_KNOT_DIFF_1_GB10      */
-	{0x432B, 0x86}, /* SHD_KNOT_DIFF_1_B10       */
-	{0x432C, 0x84}, /* SHD_KNOT_DIFF_1_R11       */
-	{0x432D, 0x82}, /* SHD_KNOT_DIFF_1_GR11      */
-	{0x432E, 0x82}, /* SHD_KNOT_DIFF_1_GB11      */
-	{0x432F, 0x83}, /* SHD_KNOT_DIFF_1_B11       */
-	{0x4330, 0x82}, /* SHD_KNOT_DIFF_1_R12       */
-	{0x4331, 0x81}, /* SHD_KNOT_DIFF_1_GR12      */
-	{0x4332, 0x81}, /* SHD_KNOT_DIFF_1_GB12      */
-	{0x4333, 0x81}, /* SHD_KNOT_DIFF_1_B12       */
-	{0x4334, 0x81}, /* SHD_KNOT_DIFF_1_R13       */
-	{0x4335, 0x81}, /* SHD_KNOT_DIFF_1_GR13      */
-	{0x4336, 0x81}, /* SHD_KNOT_DIFF_1_GB13      */
-	{0x4337, 0x81}, /* SHD_KNOT_DIFF_1_B13       */
-	{0x4338, 0x82}, /* SHD_KNOT_DIFF_1_R14       */
-	{0x4339, 0x82}, /* SHD_KNOT_DIFF_1_GR14      */
-	{0x433A, 0x82}, /* SHD_KNOT_DIFF_1_GB14      */
-	{0x433B, 0x82}, /* SHD_KNOT_DIFF_1_B14       */
-	{0x433C, 0x85}, /* SHD_KNOT_DIFF_1_R15       */
-	{0x433D, 0x85}, /* SHD_KNOT_DIFF_1_GR15      */
-	{0x433E, 0x85}, /* SHD_KNOT_DIFF_1_GB15      */
-	{0x433F, 0x85}, /* SHD_KNOT_DIFF_1_B15       */
-	{0x4340, 0x8A}, /* SHD_KNOT_DIFF_1_R16       */
-	{0x4341, 0x89}, /* SHD_KNOT_DIFF_1_GR16      */
-	{0x4342, 0x89}, /* SHD_KNOT_DIFF_1_GB16      */
-	{0x4343, 0x89}, /* SHD_KNOT_DIFF_1_B16       */
-	{0x4344, 0x91}, /* SHD_KNOT_DIFF_1_R17       */
-	{0x4345, 0x8E}, /* SHD_KNOT_DIFF_1_GR17      */
-	{0x4346, 0x8E}, /* SHD_KNOT_DIFF_1_GB17      */
-	{0x4347, 0x8F}, /* SHD_KNOT_DIFF_1_B17       */
-	{0x4348, 0x8A}, /* SHD_KNOT_DIFF_1_R18       */
-	{0x4349, 0x87}, /* SHD_KNOT_DIFF_1_GR18      */
-	{0x434A, 0x87}, /* SHD_KNOT_DIFF_1_GB18      */
-	{0x434B, 0x89}, /* SHD_KNOT_DIFF_1_B18       */
-	{0x434C, 0x85}, /* SHD_KNOT_DIFF_1_R19       */
-	{0x434D, 0x84}, /* SHD_KNOT_DIFF_1_GR19      */
-	{0x434E, 0x84}, /* SHD_KNOT_DIFF_1_GB19      */
-	{0x434F, 0x85}, /* SHD_KNOT_DIFF_1_B19       */
-	{0x4350, 0x82}, /* SHD_KNOT_DIFF_1_R20       */
-	{0x4351, 0x82}, /* SHD_KNOT_DIFF_1_GR20      */
-	{0x4352, 0x82}, /* SHD_KNOT_DIFF_1_GB20      */
-	{0x4353, 0x82}, /* SHD_KNOT_DIFF_1_B20       */
-	{0x4354, 0x81}, /* SHD_KNOT_DIFF_1_R21       */
-	{0x4355, 0x81}, /* SHD_KNOT_DIFF_1_GR21      */
-	{0x4356, 0x81}, /* SHD_KNOT_DIFF_1_GB21      */
-	{0x4357, 0x81}, /* SHD_KNOT_DIFF_1_B21       */
-	{0x4358, 0x80}, /* SHD_KNOT_DIFF_1_R22       */
-	{0x4359, 0x80}, /* SHD_KNOT_DIFF_1_GR22      */
-	{0x435A, 0x80}, /* SHD_KNOT_DIFF_1_GB22      */
-	{0x435B, 0x80}, /* SHD_KNOT_DIFF_1_B22       */
-	{0x435C, 0x81}, /* SHD_KNOT_DIFF_1_R23       */
-	{0x435D, 0x81}, /* SHD_KNOT_DIFF_1_GR23      */
-	{0x435E, 0x81}, /* SHD_KNOT_DIFF_1_GB23      */
-	{0x435F, 0x81}, /* SHD_KNOT_DIFF_1_B23       */
-	{0x4360, 0x84}, /* SHD_KNOT_DIFF_1_R24       */
-	{0x4361, 0x84}, /* SHD_KNOT_DIFF_1_GR24      */
-	{0x4362, 0x84}, /* SHD_KNOT_DIFF_1_GB24      */
-	{0x4363, 0x83}, /* SHD_KNOT_DIFF_1_B24       */
-	{0x4364, 0x88}, /* SHD_KNOT_DIFF_1_R25       */
-	{0x4365, 0x88}, /* SHD_KNOT_DIFF_1_GR25      */
-	{0x4366, 0x88}, /* SHD_KNOT_DIFF_1_GB25      */
-	{0x4367, 0x87}, /* SHD_KNOT_DIFF_1_B25       */
-	{0x4368, 0x8E}, /* SHD_KNOT_DIFF_1_R26       */
-	{0x4369, 0x8D}, /* SHD_KNOT_DIFF_1_GR26      */
-	{0x436A, 0x8D}, /* SHD_KNOT_DIFF_1_GB26      */
-	{0x436B, 0x8C}, /* SHD_KNOT_DIFF_1_B26       */
-	{0x436C, 0x87}, /* SHD_KNOT_DIFF_1_R27       */
-	{0x436D, 0x86}, /* SHD_KNOT_DIFF_1_GR27      */
-	{0x436E, 0x86}, /* SHD_KNOT_DIFF_1_GB27      */
-	{0x436F, 0x88}, /* SHD_KNOT_DIFF_1_B27       */
-	{0x4370, 0x85}, /* SHD_KNOT_DIFF_1_R28       */
-	{0x4371, 0x84}, /* SHD_KNOT_DIFF_1_GR28      */
-	{0x4372, 0x84}, /* SHD_KNOT_DIFF_1_GB28      */
-	{0x4373, 0x85}, /* SHD_KNOT_DIFF_1_B28       */
-	{0x4374, 0x83}, /* SHD_KNOT_DIFF_1_R29       */
-	{0x4375, 0x82}, /* SHD_KNOT_DIFF_1_GR29      */
-	{0x4376, 0x82}, /* SHD_KNOT_DIFF_1_GB29      */
-	{0x4377, 0x82}, /* SHD_KNOT_DIFF_1_B29       */
-	{0x4378, 0x81}, /* SHD_KNOT_DIFF_1_R30       */
-	{0x4379, 0x80}, /* SHD_KNOT_DIFF_1_GR30      */
-	{0x437A, 0x80}, /* SHD_KNOT_DIFF_1_GB30      */
-	{0x437B, 0x80}, /* SHD_KNOT_DIFF_1_B30       */
-	{0x437C, 0x80}, /* SHD_KNOT_DIFF_1_R31       */
-	{0x437D, 0x80}, /* SHD_KNOT_DIFF_1_GR31      */
-	{0x437E, 0x80}, /* SHD_KNOT_DIFF_1_GB31      */
-	{0x437F, 0x80}, /* SHD_KNOT_DIFF_1_B31       */
-	{0x4380, 0x81}, /* SHD_KNOT_DIFF_1_R32       */
-	{0x4381, 0x81}, /* SHD_KNOT_DIFF_1_GR32      */
-	{0x4382, 0x81}, /* SHD_KNOT_DIFF_1_GB32      */
-	{0x4383, 0x80}, /* SHD_KNOT_DIFF_1_B32       */
-	{0x4384, 0x84}, /* SHD_KNOT_DIFF_1_R33       */
-	{0x4385, 0x84}, /* SHD_KNOT_DIFF_1_GR33      */
-	{0x4386, 0x84}, /* SHD_KNOT_DIFF_1_GB33      */
-	{0x4387, 0x83}, /* SHD_KNOT_DIFF_1_B33       */
-	{0x4388, 0x88}, /* SHD_KNOT_DIFF_1_R34       */
-	{0x4389, 0x88}, /* SHD_KNOT_DIFF_1_GR34      */
-	{0x438A, 0x88}, /* SHD_KNOT_DIFF_1_GB34      */
-	{0x438B, 0x87}, /* SHD_KNOT_DIFF_1_B34       */
-	{0x438C, 0x8E}, /* SHD_KNOT_DIFF_1_R35       */
-	{0x438D, 0x8E}, /* SHD_KNOT_DIFF_1_GR35      */
-	{0x438E, 0x8E}, /* SHD_KNOT_DIFF_1_GB35      */
-	{0x438F, 0x8C}, /* SHD_KNOT_DIFF_1_B35       */
-	{0x4390, 0x89}, /* SHD_KNOT_DIFF_1_R36       */
-	{0x4391, 0x88}, /* SHD_KNOT_DIFF_1_GR36      */
-	{0x4392, 0x88}, /* SHD_KNOT_DIFF_1_GB36      */
-	{0x4393, 0x8A}, /* SHD_KNOT_DIFF_1_B36       */
-	{0x4394, 0x86}, /* SHD_KNOT_DIFF_1_R37       */
-	{0x4395, 0x85}, /* SHD_KNOT_DIFF_1_GR37      */
-	{0x4396, 0x85}, /* SHD_KNOT_DIFF_1_GB37      */
-	{0x4397, 0x86}, /* SHD_KNOT_DIFF_1_B37       */
-	{0x4398, 0x83}, /* SHD_KNOT_DIFF_1_R38       */
-	{0x4399, 0x83}, /* SHD_KNOT_DIFF_1_GR38      */
-	{0x439A, 0x83}, /* SHD_KNOT_DIFF_1_GB38      */
-	{0x439B, 0x83}, /* SHD_KNOT_DIFF_1_B38       */
-	{0x439C, 0x81}, /* SHD_KNOT_DIFF_1_R39       */
-	{0x439D, 0x81}, /* SHD_KNOT_DIFF_1_GR39      */
-	{0x439E, 0x81}, /* SHD_KNOT_DIFF_1_GB39      */
-	{0x439F, 0x81}, /* SHD_KNOT_DIFF_1_B39       */
-	{0x43A0, 0x81}, /* SHD_KNOT_DIFF_1_R40       */
-	{0x43A1, 0x81}, /* SHD_KNOT_DIFF_1_GR40      */
-	{0x43A2, 0x81}, /* SHD_KNOT_DIFF_1_GB40      */
-	{0x43A3, 0x81}, /* SHD_KNOT_DIFF_1_B40       */
-	{0x43A4, 0x82}, /* SHD_KNOT_DIFF_1_R41       */
-	{0x43A5, 0x82}, /* SHD_KNOT_DIFF_1_GR41      */
-	{0x43A6, 0x82}, /* SHD_KNOT_DIFF_1_GB41      */
-	{0x43A7, 0x81}, /* SHD_KNOT_DIFF_1_B41       */
-	{0x43A8, 0x84}, /* SHD_KNOT_DIFF_1_R42       */
-	{0x43A9, 0x85}, /* SHD_KNOT_DIFF_1_GR42      */
-	{0x43AA, 0x85}, /* SHD_KNOT_DIFF_1_GB42      */
-	{0x43AB, 0x83}, /* SHD_KNOT_DIFF_1_B42       */
-	{0x43AC, 0x8A}, /* SHD_KNOT_DIFF_1_R43       */
-	{0x43AD, 0x8A}, /* SHD_KNOT_DIFF_1_GR43      */
-	{0x43AE, 0x8A}, /* SHD_KNOT_DIFF_1_GB43      */
-	{0x43AF, 0x88}, /* SHD_KNOT_DIFF_1_B43       */
-	{0x43B0, 0x93}, /* SHD_KNOT_DIFF_1_R44       */
-	{0x43B1, 0x91}, /* SHD_KNOT_DIFF_1_GR44      */
-	{0x43B2, 0x91}, /* SHD_KNOT_DIFF_1_GB44      */
-	{0x43B3, 0x8F}, /* SHD_KNOT_DIFF_1_B44       */
-	{0x43B4, 0x8B}, /* SHD_KNOT_DIFF_1_R45       */
-	{0x43B5, 0x8A}, /* SHD_KNOT_DIFF_1_GR45      */
-	{0x43B6, 0x8A}, /* SHD_KNOT_DIFF_1_GB45      */
-	{0x43B7, 0x8C}, /* SHD_KNOT_DIFF_1_B45       */
-	{0x43B8, 0x89}, /* SHD_KNOT_DIFF_1_R46       */
-	{0x43B9, 0x87}, /* SHD_KNOT_DIFF_1_GR46      */
-	{0x43BA, 0x87}, /* SHD_KNOT_DIFF_1_GB46      */
-	{0x43BB, 0x89}, /* SHD_KNOT_DIFF_1_B46       */
-	{0x43BC, 0x84}, /* SHD_KNOT_DIFF_1_R47       */
-	{0x43BD, 0x84}, /* SHD_KNOT_DIFF_1_GR47      */
-	{0x43BE, 0x84}, /* SHD_KNOT_DIFF_1_GB47      */
-	{0x43BF, 0x84}, /* SHD_KNOT_DIFF_1_B47       */
-	{0x43C0, 0x83}, /* SHD_KNOT_DIFF_1_R48       */
-	{0x43C1, 0x83}, /* SHD_KNOT_DIFF_1_GR48      */
-	{0x43C2, 0x83}, /* SHD_KNOT_DIFF_1_GB48      */
-	{0x43C3, 0x83}, /* SHD_KNOT_DIFF_1_B48       */
-	{0x43C4, 0x82}, /* SHD_KNOT_DIFF_1_R49       */
-	{0x43C5, 0x83}, /* SHD_KNOT_DIFF_1_GR49      */
-	{0x43C6, 0x83}, /* SHD_KNOT_DIFF_1_GB49      */
-	{0x43C7, 0x82}, /* SHD_KNOT_DIFF_1_B49       */
-	{0x43C8, 0x83}, /* SHD_KNOT_DIFF_1_R50       */
-	{0x43C9, 0x84}, /* SHD_KNOT_DIFF_1_GR50      */
-	{0x43CA, 0x84}, /* SHD_KNOT_DIFF_1_GB50      */
-	{0x43CB, 0x83}, /* SHD_KNOT_DIFF_1_B50       */
-	{0x43CC, 0x86}, /* SHD_KNOT_DIFF_1_R51       */
-	{0x43CD, 0x86}, /* SHD_KNOT_DIFF_1_GR51      */
-	{0x43CE, 0x86}, /* SHD_KNOT_DIFF_1_GB51      */
-	{0x43CF, 0x85}, /* SHD_KNOT_DIFF_1_B51       */
-	{0x43D0, 0x8E}, /* SHD_KNOT_DIFF_1_R52       */
-	{0x43D1, 0x8D}, /* SHD_KNOT_DIFF_1_GR52      */
-	{0x43D2, 0x8D}, /* SHD_KNOT_DIFF_1_GB52      */
-	{0x43D3, 0x8B}, /* SHD_KNOT_DIFF_1_B52       */
-	{0x43D4, 0x94}, /* SHD_KNOT_DIFF_1_R53       */
-	{0x43D5, 0x93}, /* SHD_KNOT_DIFF_1_GR53      */
-	{0x43D6, 0x93}, /* SHD_KNOT_DIFF_1_GB53      */
-	{0x43D7, 0x91}, /* SHD_KNOT_DIFF_1_B53       */
-	{0x34C0, 0xDD}, /* AE_SENSRATIO_SP1H_SP1L_R  */
-	{0x34C1, 0x00}, /* AE_SENSRATIO_SP1H_SP1L_R  */
-	{0x34C2, 0xF1}, /* AE_SENSRATIO_SP1H_SP1L_GR */
-	{0x34C3, 0x00}, /* AE_SENSRATIO_SP1H_SP1L_GR */
-	{0x34C4, 0xEC}, /* AE_SENSRATIO_SP1H_SP1L_GB */
-	{0x34C5, 0x00}, /* AE_SENSRATIO_SP1H_SP1L_GB */
-	{0x34C6, 0xE5}, /* AE_SENSRATIO_SP1H_SP1L_B  */
-	{0x34C7, 0x00}, /* AE_SENSRATIO_SP1H_SP1L_B  */
-	{0x34C8, 0xE7}, /* AE_SENSRATIO_SP1H_SP2_R   */
-	{0x34C9, 0x1B}, /* AE_SENSRATIO_SP1H_SP2_R   */
-	{0x34CA, 0x02}, /* AE_SENSRATIO_SP1H_SP2_GR  */
-	{0x34CB, 0x1D}, /* AE_SENSRATIO_SP1H_SP2_GR  */
-	{0x34CC, 0x5E}, /* AE_SENSRATIO_SP1H_SP2_GB  */
-	{0x34CD, 0x1C}, /* AE_SENSRATIO_SP1H_SP2_GB  */
-	{0x34CE, 0x4B}, /* AE_SENSRATIO_SP1H_SP2_B   */
-	{0x34CF, 0x1B}, /* AE_SENSRATIO_SP1H_SP2_B   */
-	{0x3053, 0x00}, /* "OTP_SENSRATIOEN		"    */
-	{0x3630, 0x40}, /* WDC_SGAIN_ADJ_SP1_R       */
-	{0x3631, 0x00}, /* WDC_SGAIN_ADJ_SP1_R       */
-	{0x3632, 0x40}, /* WDC_SGAIN_ADJ_SP1_GR      */
-	{0x3633, 0x00}, /* WDC_SGAIN_ADJ_SP1_GR      */
-	{0x3634, 0x40}, /* WDC_SGAIN_ADJ_SP1_GB      */
-	{0x3635, 0x00}, /* WDC_SGAIN_ADJ_SP1_GB      */
-	{0x3636, 0x40}, /* WDC_SGAIN_ADJ_SP1_B       */
-	{0x3637, 0x00}, /* WDC_SGAIN_ADJ_SP1_B       */
-	{0x3638, 0x40}, /* WDC_SGAIN_ADJ_SP2_R       */
-	{0x3639, 0x00}, /* WDC_SGAIN_ADJ_SP2_R       */
-	{0x363A, 0x40}, /* WDC_SGAIN_ADJ_SP2_GR      */
-	{0x363B, 0x00}, /* WDC_SGAIN_ADJ_SP2_GR      */
-	{0x363C, 0x40}, /* WDC_SGAIN_ADJ_SP2_GB      */
-	{0x363D, 0x00}, /* WDC_SGAIN_ADJ_SP2_GB      */
-	{0x363E, 0x40}, /* WDC_SGAIN_ADJ_SP2_B       */
-	{0x363F, 0x00}, /* WDC_SGAIN_ADJ_SP2_B       */
-	{0x3838, 0xB3}, /* OBB_CLAMP_OFFSET_R_SP1H   */
-	{0x3839, 0xFF}, /* OBB_CLAMP_OFFSET_R_SP1H   */
-	{0x383A, 0xB5}, /* OBB_CLAMP_OFFSET_GR_SP1H  */
-	{0x383B, 0xFF}, /* OBB_CLAMP_OFFSET_GR_SP1H  */
-	{0x383C, 0xB4}, /* OBB_CLAMP_OFFSET_GB_SP1H  */
-	{0x383D, 0xFF}, /* OBB_CLAMP_OFFSET_GB_SP1H  */
-	{0x383E, 0xB7}, /* OBB_CLAMP_OFFSET_B_SP1H   */
-	{0x383F, 0xFF}, /* OBB_CLAMP_OFFSET_B_SP1H   */
-	{0x3840, 0xE3}, /* OBB_CLAMP_OFFSET_R_SP1L   */
-	{0x3841, 0xFF}, /* OBB_CLAMP_OFFSET_R_SP1L   */
-	{0x3842, 0xE6}, /* OBB_CLAMP_OFFSET_GR_SP1L  */
-	{0x3843, 0xFF}, /* OBB_CLAMP_OFFSET_GR_SP1L  */
-	{0x3844, 0xF9}, /* OBB_CLAMP_OFFSET_GB_SP1L  */
-	{0x3845, 0xFF}, /* OBB_CLAMP_OFFSET_GB_SP1L  */
-	{0x3846, 0xFE}, /* OBB_CLAMP_OFFSET_B_SP1L   */
-	{0x3847, 0xFF}, /* OBB_CLAMP_OFFSET_B_SP1L   */
-	{0x3848, 0xC9}, /* OBB_CLAMP_OFFSET_R_SP2    */
-	{0x3849, 0xFF}, /* OBB_CLAMP_OFFSET_R_SP2    */
-	{0x384A, 0xCA}, /* OBB_CLAMP_OFFSET_GR_SP2   */
-	{0x384B, 0xFF}, /* OBB_CLAMP_OFFSET_GR_SP2   */
-	{0x384C, 0xE5}, /* OBB_CLAMP_OFFSET_GB_SP2   */
-	{0x384D, 0xFF}, /* OBB_CLAMP_OFFSET_GB_SP2   */
-	{0x384E, 0xF0}, /* OBB_CLAMP_OFFSET_B_SP2    */
-	{0x384F, 0xFF}, /* OBB_CLAMP_OFFSET_B_SP2    */
-};
-
-static const struct imx390_reg_list lsc_vendor_def_list = {
-	.num_of_regs = ARRAY_SIZE(imx390_lsc_pattern_vendor_def),
-	.regs = imx390_lsc_pattern_vendor_def,
-};
-
-static const s64 link_freq_menu_items[] = {
-	IMX390_LINK_FREQ_360MHZ,
-	IMX390_LINK_FREQ_300MHZ,
-	IMX390_LINK_FREQ_288MHZ,
-	IMX390_LINK_FREQ_240MHZ,
-};
-
-static const struct imx390_mode supported_modes[] = {
-	{
-		.width = 1280,
-		.height = 960,
-		.hdr_en = false,
-		.hts = 2464,
-		.vts_def = 2435,
-		.vts_min = 2435,
-		.code = MEDIA_BUS_FMT_SGRBG12_1X12,
-		.lanes = 4,
-		.fps = 30,
-		.bpp = 12,
-		.reg_list = {
-			.num_of_regs = ARRAY_SIZE(imx390_mode_1280x960CROP),
-			.regs = imx390_mode_1280x960CROP,
-		},
-		.link_freq_index = -1,
-	},
-	{
-		.width = 1920,
-		.height = 1200,
-		.hdr_en = true,
-		.hts = 2464,
-		.vts_def = 2435,
-		.vts_min = 2435,
-		.code = MEDIA_BUS_FMT_SGRBG12_1X12,
-		.lanes = 4,
-		.fps = 30,
-		.bpp = 12,
-		.reg_list = {
-			.num_of_regs = ARRAY_SIZE(imx390_mode_1920x1200HDR3_CUST_PWL12),
-			.regs = imx390_mode_1920x1200HDR3_CUST_PWL12,
-		},
-		.link_freq_index = -1,
-	},
-};
-
-static u32 supported_formats[] = {
-	MEDIA_BUS_FMT_SGRBG12_1X12,
-};
-
-static int imx390_read_reg(struct imx390 *imx390, u16 reg, u16 len, u32 *val)
-{
-	struct i2c_client *client = v4l2_get_subdevdata(&imx390->sd);
-	struct i2c_msg msgs[2];
-	u8 addr_buf[2];
-	u8 data_buf[4] = {0};
-	int ret;
-
-	if (len > 4) {
-		dev_err(&client->dev, "%s: invalid length %d. i2c read register failed\n",
-			__func__, len);
-		return -EINVAL;
-	}
-
-	put_unaligned_be16(reg, addr_buf);
-	msgs[0].addr = client->addr;
-	msgs[0].flags = 0;
-	msgs[0].len = sizeof(addr_buf);
-	msgs[0].buf = addr_buf;
-	msgs[1].addr = client->addr;
-	msgs[1].flags = I2C_M_RD;
-	msgs[1].len = len;
-	msgs[1].buf = &data_buf[4 - len];
-
-	ret = i2c_transfer(client->adapter, msgs, ARRAY_SIZE(msgs));
-	if (ret != ARRAY_SIZE(msgs)) {
-		dev_err(&client->dev, "%s: i2c read register 0x%x from 0x%x failed\n",
-			__func__, reg, client->addr);
-		return -EIO;
-	}
-
-	*val = get_unaligned_be32(data_buf);
-
-	return 0;
-}
-
-static int imx390_write_reg(struct imx390 *imx390, u16 reg, u16 len, u32 val)
-{
-	struct i2c_client *client = v4l2_get_subdevdata(&imx390->sd);
-	u8 buf[6];
-
-	if (len > 4) {
-		dev_err(&client->dev, "%s: invalid length %d. i2c write register failed\n",
-			__func__, len);
-		return -EINVAL;
-	}
-
-	dev_dbg(&client->dev, "%s, reg %x len %x, val %x\n", __func__, reg, len, val);
-	put_unaligned_be16(reg, buf);
-	put_unaligned_be32(val << 8 * (4 - len), buf + 2);
-	if (i2c_master_send(client, buf, len + 2) != len + 2) {
-		dev_err(&client->dev, "%s: i2c write register 0x%x from 0x%x failed\n",
-			__func__, reg, client->addr);
-		return -EIO;
-	}
-
-	return 0;
-}
-
-static int imx390_write_reg_list(struct imx390 *imx390,
-				 const struct imx390_reg_list *r_list)
-{
-	struct i2c_client *client = v4l2_get_subdevdata(&imx390->sd);
-	unsigned int i;
-	int ret;
-
-	for (i = 0; i < r_list->num_of_regs; i++) {
-		ret = imx390_write_reg(imx390, r_list->regs[i].address,
-				IMX390_REG_VALUE_08BIT,
-				       r_list->regs[i].val);
-		if (ret) {
-			dev_err_ratelimited(&client->dev,
-				    "failed to write reg 0x%4.4x. error = %d",
-				    r_list->regs[i].address, ret);
-			return ret;
-		}
-	}
-
-	return 0;
-}
-
-static int imx390_is_hdr(struct imx390 *imx390)
-{
-	// int mode_ix = self->s_data->sensor_mode_id;
-	// return imx390_modes_formats[mode_ix].hdr_en;
-
-	if (imx390->cur_mode->hdr_en)
-		return 1;
-
-	return 0;
-}
-
-static int imx390_group_hold_enable(struct imx390 *imx390, s32 val)
-{
-	int ret = 0;
-	struct i2c_client *client = v4l2_get_subdevdata(&imx390->sd);
-
-	dev_dbg(&client->dev, "group hold: %d", val);
-
-	ret = imx390_write_reg(imx390, IMX390_REG_REG_HOLD, IMX390_REG_VALUE_08BIT, val ? 1:0);
-
-	if (ret)
-		dev_err(&client->dev, "failed to set group hold");
-
-	return ret;
-}
-
-/**
- * imx390 gain is 0 to 30 in .3db steps.
- *
- * @param self driver instance
- * @param val gain
- *
- * @return 0 on success
- */
-static int imx390_gain_set(struct imx390 *imx390, s64 val)
-{
-	u16 gain = 0;
-	u32 prevgain = 0;
-
-	gain = (u16)val; // * 10 / 3 / FIXED_POINT_SCALING_FACTOR;
-
-	if (gain > 100)
-		gain = 100;
-
-	if (gain < 0)
-		gain = 0;
-
-	imx390_read_reg(imx390, IMX390_REG_AGAIN_SP1H, IMX390_REG_VALUE_08BIT, &prevgain);
-
-	imx390_group_hold_enable(imx390, 1);
-
-	imx390_write_reg(imx390, IMX390_REG_AGAIN_SP1H, IMX390_REG_VALUE_08BIT,  gain & 0xff);
-	imx390_write_reg(imx390, IMX390_REG_AGAIN_SP1H + 1, IMX390_REG_VALUE_08BIT, (gain >> 8) & 0xff);
-
-	imx390_group_hold_enable(imx390, 0);
-
-	imx390_read_reg(imx390, IMX390_REG_AGAIN_SP1H, IMX390_REG_VALUE_08BIT, &prevgain);
-
-	return 0;
-}
-
-static u64 get_pixel_rate(struct imx390 *imx390)
-{
-	u64 pixel_rate = 72000000;
-
-	return pixel_rate;
-}
-
-/*
- * from table 1, AND9820-D.pdf.
- * for context A, hblank = LLP(0x300C) - active data time.
- */
-static u64 get_hblank(struct imx390 *imx390)
-{
-	u64 hblank = 0;
-
-	return hblank;
-}
-
-static int imx390_exposure_raw_set(struct imx390 *self, u32 exp)
-{
-	/* This should never be called in HDR mode but we'll put check
-	 * in to be safe.
-	 */
-	if (imx390_is_hdr(self))
-		return 0;
-
-	imx390_group_hold_enable(self, 1);
-
-	struct imx390_reg exposure_array[] = {
-		/* 20 bit value 0xc, 0xd, 0xe */
-		{IMX390_REG_SHS1, exp & 0xff},
-		{IMX390_REG_SHS1 + 1, (exp & 0xff00) >> 8},
-		{IMX390_REG_SHS1 + 2, (exp & 0xf0000) >> 16},
-
-		/* 20 bit value  0x10, 0x11, 0x12 */
-		{IMX390_REG_SHS2, exp & 0xff},
-		{IMX390_REG_SHS2 + 1, (exp & 0xff00) >> 8},
-		{IMX390_REG_SHS2 + 2, (exp & 0xf0000) >> 16},
-	};
-
-	const struct imx390_reg_list exp_list = {
-		.num_of_regs = ARRAY_SIZE(exposure_array),
-		.regs = exposure_array,
-	};
-
-	/* True means to print the register values. This is a small
-	 * table so it's OK.
-	 */
-	imx390_write_reg_list(self, &exp_list);
-	imx390_group_hold_enable(self, 0);
-	return 0;
-}
-
-static int imx390_exposure_set(struct imx390 *self, s64 val)
-{
-	u32 coarse_time;
-	u32 reg;
-	u32 pixclk = 72000000;
-	u32 linelen = self->cur_mode->width;
-
-	/* This is figuring out how many lines are output for the
-	 * desired exposure time.
-	 */
-	/* pixel clock * TIME / line_length */
-	coarse_time = pixclk * val / linelen / FIXED_POINT_SCALING_FACTOR;
-
-	/* The 390 is configured such that the SHS registers are the
-	 * difference between VMAX and the exposure time expressed as
-	 * lines.
-	 */
-	/* FRAME_LENGTH is VMAX */
-	/* VMAX=1125 */
-	reg =  1125 - coarse_time;
-	/* The data sheet says values of 0 and 1 are prohibited...and
-	 * also says that the default value is 1...
-	 */
-	if (reg < 2)
-		reg = 2;
-	else if (reg >= 0x100000)
-		reg = 0x100000 - 1;
-
-	return imx390_exposure_raw_set(self, reg);
-}
-
-static int imx390_white_balance_set(struct imx390 *self)
-{
-	u16 cf00, cf01, cf10, cf11;
-	u16 red, blue;
-	u16 max_chroma, r, g, b;
-	struct i2c_client *client = v4l2_get_subdevdata(&self->sd);
-
-	dev_dbg(&client->dev, "%s\n", __func__);
-	red = *self->red_balance->p_new.p_s32;
-	blue = *self->blue_balance->p_new.p_s32;
-
-	max_chroma = MAX(MAX(red, 0x100), blue);
-	r = (max_chroma * 0x100) / red;
-	g = max_chroma;
-	b = (max_chroma * 0x100) / blue;
-
-	cf00 = IMX390_REG_WBGAIN_R;
-	cf01 = IMX390_REG_WBGAIN_GR;
-	cf10 = IMX390_REG_WBGAIN_GB;
-	cf11 = IMX390_REG_WBGAIN_B;
-
-	imx390_group_hold_enable(self, 1);
-	dev_dbg(&client->dev, "self->cur_mode->code[%x] MEDIA_BUS_FMT_SGRBG12_1X12[%x]\n", self->cur_mode->code, MEDIA_BUS_FMT_SGRBG12_1X12);
-	if (self->cur_mode->code == MEDIA_BUS_FMT_SGRBG12_1X12) {
-		imx390_write_reg(self, IMX390_REG_WBGAIN_FORCE_X1, IMX390_REG_VALUE_08BIT, 0);
-
-		imx390_write_reg(self, cf00, IMX390_REG_VALUE_08BIT, r & 0xff);
-		imx390_write_reg(self, cf00 + 1, IMX390_REG_VALUE_08BIT, (r & 0xff00) >> 8);
-		imx390_write_reg(self, cf01, IMX390_REG_VALUE_08BIT, g & 0xff);
-		imx390_write_reg(self, cf01 + 1, IMX390_REG_VALUE_08BIT, (g & 0xff00) >> 8);
-		imx390_write_reg(self, cf10, IMX390_REG_VALUE_08BIT, g & 0xff);
-		imx390_write_reg(self, cf10 + 1, IMX390_REG_VALUE_08BIT, (g & 0xff00) >> 8);
-		imx390_write_reg(self, cf11, IMX390_REG_VALUE_08BIT, b & 0xff);
-		imx390_write_reg(self, cf11 + 1, IMX390_REG_VALUE_08BIT, (b & 0xff00) >> 8);
-	}
-	imx390_group_hold_enable(self, 0);
-
-	return 0;
-}
-
-/*
- * imx390_set_lsc_pattern
- * len shading correction pattern
- */
-static int imx390_set_lsc_pattern(struct imx390 *self, int val)
-{
-	struct i2c_client *client = v4l2_get_subdevdata(&self->sd);
-	int ret = 0;
-
-	if (val == LSC_PATTERN_UNITY)
-		ret = imx390_write_reg_list(self, &lsc_unity_list);
-
-	if (val == LSC_PATTERN_TABLE)
-		ret = imx390_write_reg_list(self, &lsc_vendor_def_list);
-
-	if (!ret)
-		dev_dbg(&client->dev,
-			"%s : LSC PATTERN control success\n", __func__);
-	else
-		dev_err(&client->dev, "%s ret = %d\n", __func__, ret);
-
-	return ret;
-}
-
-static int imx390_set_ctrl(struct v4l2_ctrl *ctrl)
-{
-	struct imx390 *imx390 = container_of(ctrl->handler,
-					     struct imx390, ctrl_handler);
-	struct i2c_client *client = v4l2_get_subdevdata(&imx390->sd);
-	int ret = 0;
-
-	switch (ctrl->id) {
-	case IMX390_CID_EXPOSURE_SHS1:
-	case IMX390_CID_EXPOSURE_SHS2:
-	case IMX390_CID_EXPOSURE_SHS3:
-	case IMX390_CID_EXPOSURE_RHS1:
-	case IMX390_CID_EXPOSURE_RHS2:
-	case IMX390_CID_DIGITAL_GAIN_L:
-	case IMX390_CID_DIGITAL_GAIN_S:
-	case IMX390_CID_DIGITAL_GAIN_VS:
-	case IMX390_CID_ANALOG_GAIN_L:
-	case IMX390_CID_ANALOG_GAIN_S:
-	case IMX390_CID_ANALOG_GAIN_VS:
-	case V4L2_CID_DIGITAL_GAIN:
-	case V4L2_CID_GAIN:
-		ret = 0;
-		break;
-	case V4L2_CID_ANALOGUE_GAIN:
-		ret = imx390_gain_set(imx390, *ctrl->p_new.p_s64);
-		break;
-	case V4L2_CID_EXPOSURE:
-		ret = imx390_exposure_set(imx390, *ctrl->p_new.p_s64);
-		break;
-	case V4L2_CID_VBLANK:
-		ret = imx390_write_reg(imx390, IMX390_REG_VTS,
-				IMX390_REG_VALUE_16BIT,
-				imx390->cur_mode->height + ctrl->val);
-		break;
-	case V4L2_CID_RED_BALANCE:
-	case V4L2_CID_BLUE_BALANCE:
-		ret = imx390_white_balance_set(imx390);
-		break;
-	case V4L2_CID_TEST_PATTERN:
-		ret = imx390_set_lsc_pattern(imx390, ctrl->val);
-		break;
-	default:
-		ret = -EINVAL;
-		break;
-	}
-
-	pm_runtime_put(&client->dev);
-
-	return ret;
-}
-
-static const struct v4l2_ctrl_ops imx390_ctrl_ops = {
-	.s_ctrl = imx390_set_ctrl,
-};
-
-static int imx390_init_controls(struct imx390 *imx390)
-{
-	struct v4l2_ctrl_handler *ctrl_hdlr;
-	s64 hblank;
-	int ret;
-	struct v4l2_ctrl_config cfg = { 0 };
-
-	ctrl_hdlr = &imx390->ctrl_handler;
-	ret = v4l2_ctrl_handler_init(ctrl_hdlr, 8);
-	if (ret)
-		return ret;
-
-	ctrl_hdlr->lock = &imx390->mutex;
-	imx390->link_freq = v4l2_ctrl_new_int_menu(ctrl_hdlr, &imx390_ctrl_ops,
-					   V4L2_CID_LINK_FREQ,
-					   ARRAY_SIZE(link_freq_menu_items) - 1,
-					   0, link_freq_menu_items);
-	if (imx390->link_freq)
-		imx390->link_freq->flags |= V4L2_CTRL_FLAG_READ_ONLY;
-
-	imx390->vblank = v4l2_ctrl_new_std(ctrl_hdlr, &imx390_ctrl_ops,
-			  V4L2_CID_VBLANK,
-			  0,
-			  IMX390_VTS_MAX - imx390->cur_mode->height, 1,
-			  imx390->cur_mode->vts_def - imx390->cur_mode->height);
-
-	imx390->gain = v4l2_ctrl_new_std(
-			ctrl_hdlr,
-			&imx390_ctrl_ops,
-			V4L2_CID_GAIN, IMX390_GAIN_MIN,
-			IMX390_DGTL_GAIN_MAX * IMX390_ANAL_GAIN_MAX, 1,
-			IMX390_GAIN_DEFAULT);
-
-	imx390->analogue_gain = v4l2_ctrl_new_std(ctrl_hdlr, &imx390_ctrl_ops, V4L2_CID_ANALOGUE_GAIN,
-			  IMX390_ANAL_GAIN_MIN, IMX390_ANAL_GAIN_MAX,
-			  IMX390_ANAL_GAIN_STEP, IMX390_ANAL_GAIN_DEFAULT);
-
-	imx390->digital_gain = v4l2_ctrl_new_std(ctrl_hdlr, &imx390_ctrl_ops, V4L2_CID_DIGITAL_GAIN,
-			IMX390_DGTL_GAIN_MIN, IMX390_DGTL_GAIN_MAX,
-			IMX390_DGTL_GAIN_STEP, IMX390_DGTL_GAIN_DEFAULT);
-
-	imx390->exposure = v4l2_ctrl_new_std(ctrl_hdlr, &imx390_ctrl_ops,
-					     V4L2_CID_EXPOSURE,
-					     IMX390_EXPOSURE_MIN,
-					     IMX390_EXPOSURE_MAX,
-					     IMX390_EXPOSURE_STEP,
-					     IMX390_EXPOSURE_DEF);
-
-	imx390->pixel_rate = v4l2_ctrl_new_std(ctrl_hdlr, &imx390_ctrl_ops,
-			V4L2_CID_PIXEL_RATE, get_pixel_rate(imx390), get_pixel_rate(imx390),
-			1, get_pixel_rate(imx390));
-
-	if (imx390->pixel_rate)
-		imx390->pixel_rate->flags |= V4L2_CTRL_FLAG_READ_ONLY;
-
-	hblank = get_hblank(imx390);
-	imx390->hblank = v4l2_ctrl_new_std(ctrl_hdlr, &imx390_ctrl_ops, V4L2_CID_HBLANK,
-					hblank, hblank, 1, hblank);
-	if (imx390->hblank)
-		imx390->hblank->flags |= V4L2_CTRL_FLAG_READ_ONLY;
-
-	imx390->red_balance = v4l2_ctrl_new_std(ctrl_hdlr, &imx390_ctrl_ops,
-					     V4L2_CID_RED_BALANCE,
-					     IMX390_RED_BALANCE_MIN,
-					     IMX390_RED_BALANCE_MAX,
-					     IMX390_RED_BALANCE_STEP,
-					     IMX390_RED_BALANCE_DEF);
-
-	imx390->blue_balance = v4l2_ctrl_new_std(ctrl_hdlr, &imx390_ctrl_ops,
-					     V4L2_CID_BLUE_BALANCE,
-					     IMX390_BLUE_BALANCE_MIN,
-					     IMX390_BLUE_BALANCE_MAX,
-					     IMX390_BLUE_BALANCE_STEP,
-					     IMX390_BLUE_BALANCE_DEF);
-
-	cfg.ops = &imx390_ctrl_ops;
-	cfg.id = IMX390_CID_EXPOSURE_SHS1;
-	cfg.name = "IMX390_CID_EXPOSURE_SHS1";
-	cfg.type = V4L2_CTRL_TYPE_INTEGER;
-	cfg.max = IMX390_DUMMY_MAX;
-	cfg.min = IMX390_DUMMY_MIN;
-	cfg.step = IMX390_DUMMY_STEP;
-	cfg.def = IMX390_DUMMY_DEF;
-	cfg.qmenu = 0; cfg.elem_size = 0;
-	imx390->dummy_exp_shs1 = v4l2_ctrl_new_custom(ctrl_hdlr, &cfg, NULL);
-
-	cfg.id = IMX390_CID_EXPOSURE_SHS2;
-	cfg.name = "IMX390_CID_EXPOSURE_SHS2";
-	imx390->dummy_exp_shs2 = v4l2_ctrl_new_custom(ctrl_hdlr, &cfg, NULL);
-
-	cfg.id = IMX390_CID_EXPOSURE_SHS3;
-	cfg.name = "IMX390_CID_EXPOSURE_SHS3";
-	imx390->dummy_exp_shs3 = v4l2_ctrl_new_custom(ctrl_hdlr, &cfg, NULL);
-
-	cfg.id = IMX390_CID_EXPOSURE_RHS1;
-	cfg.name = "IMX390_CID_EXPOSURE_RHS1";
-	imx390->dummy_exp_rhs1 = v4l2_ctrl_new_custom(ctrl_hdlr, &cfg, NULL);
-
-	cfg.id = IMX390_CID_EXPOSURE_RHS2;
-	cfg.name = "IMX390_CID_EXPOSURE_RHS2";
-	imx390->dummy_exp_rhs2 = v4l2_ctrl_new_custom(ctrl_hdlr, &cfg, NULL);
-
-	cfg.id = IMX390_CID_DIGITAL_GAIN_L;
-	cfg.name = "IMX390_CID_DIGITAL_GAIN_L";
-	imx390->dummy_dg_l = v4l2_ctrl_new_custom(ctrl_hdlr, &cfg, NULL);
-
-	cfg.id = IMX390_CID_DIGITAL_GAIN_S;
-	cfg.name = "IMX390_CID_DIGITAL_GAIN_S";
-	imx390->dummy_dg_s = v4l2_ctrl_new_custom(ctrl_hdlr, &cfg, NULL);
-
-	cfg.id = IMX390_CID_DIGITAL_GAIN_VS;
-	cfg.name = "IMX390_CID_DIGITAL_GAIN_VS";
-	imx390->dummy_dg_vs = v4l2_ctrl_new_custom(ctrl_hdlr, &cfg, NULL);
-
-	cfg.id = IMX390_CID_ANALOG_GAIN_L;
-	cfg.name = "IMX390_CID_ANALOG_GAIN_L";
-	imx390->dummy_ag_l = v4l2_ctrl_new_custom(ctrl_hdlr, &cfg, NULL);
-
-	cfg.id = IMX390_CID_ANALOG_GAIN_S;
-	cfg.name = "IMX390_CID_ANALOG_GAIN_S";
-	imx390->dummy_ag_s = v4l2_ctrl_new_custom(ctrl_hdlr, &cfg, NULL);
-
-	cfg.id = IMX390_CID_ANALOG_GAIN_VS;
-	cfg.name = "IMX390_CID_ANALOG_GAIN_VS";
-	imx390->dummy_ag_vs = v4l2_ctrl_new_custom(ctrl_hdlr, &cfg, NULL);
-
-	imx390->lsc_pattern = v4l2_ctrl_new_std_menu_items(
-		ctrl_hdlr, &imx390_ctrl_ops,
-		V4L2_CID_TEST_PATTERN,
-		ARRAY_SIZE(lsc_qmenu) - 1, 0, 0, lsc_qmenu);
-
-	if (ctrl_hdlr->error)
-		return ctrl_hdlr->error;
-
-	imx390->sd.ctrl_handler = ctrl_hdlr;
-
-	return 0;
-}
-
-static void imx390_update_pad_format(const struct imx390_mode *mode,
-				     struct v4l2_mbus_framefmt *fmt)
-{
-	fmt->width = mode->width;
-	fmt->height = mode->height;
-	fmt->code = mode->code;
-	fmt->field = V4L2_FIELD_NONE;
-}
-
-static int imx390_start_streaming(struct imx390 *imx390)
-{
-	int retries, ret;
-	struct i2c_client *client = v4l2_get_subdevdata(&imx390->sd);
-	const struct imx390_reg_list *reg_list;
-
-	if (imx390->cur_mode != imx390->pre_mode) {
-		reg_list = &imx390->cur_mode->reg_list;
-		ret = imx390_write_reg_list(imx390, reg_list);
-		if (ret) {
-			dev_err(&client->dev, "failed to set stream mode");
-			return ret;
-		}
-		imx390->pre_mode = imx390->cur_mode;
-	} else
-		dev_dbg(&client->dev, "same mode, skip write reg list");
-
-	/*
-	 * WA: i2c write to IMX390_REG_STANDBY no response randomly,
-	 * pipeline fails to start.
-	 * retries 1000 times, wait for i2c recover, pipeline started
-	 * with extra delay, instead of fails.
-	 */
-	retries = 1000;
-	do {
-		ret = imx390_write_reg(imx390, IMX390_REG_STANDBY,
-			IMX390_REG_VALUE_08BIT, 0);
-		if (ret)
-			dev_err(&client->dev, "retry to write STANDBY");
-	} while (ret && retries--);
-
-	if (ret) {
-		dev_err(&client->dev, "failed to set stream");
-		return ret;
-	}
-
-	return 0;
-}
-
-static void imx390_stop_streaming(struct imx390 *imx390)
-{
-	struct i2c_client *client = v4l2_get_subdevdata(&imx390->sd);
-
-	if (imx390_write_reg(imx390, IMX390_REG_STANDBY,
-			       IMX390_REG_VALUE_08BIT, 1))
-		dev_err(&client->dev, "failed to set stream");
-}
-
-static int imx390_set_stream(struct v4l2_subdev *sd, int enable)
-{
-	struct imx390 *imx390 = to_imx390(sd);
-	struct i2c_client *client = v4l2_get_subdevdata(sd);
-	int ret = 0;
-
-	if (imx390->streaming == enable)
-		return 0;
-
-	mutex_lock(&imx390->mutex);
-	if (enable) {
-		ret = pm_runtime_get_sync(&client->dev);
-		if (ret < 0) {
-			pm_runtime_put_noidle(&client->dev);
-			mutex_unlock(&imx390->mutex);
-			return ret;
-		}
-
-		ret = imx390_start_streaming(imx390);
-		if (ret) {
-			enable = 0;
-			imx390_stop_streaming(imx390);
-			pm_runtime_put(&client->dev);
-		}
-	} else {
-		imx390_stop_streaming(imx390);
-		pm_runtime_put(&client->dev);
-	}
-
-	imx390->streaming = enable;
-
-	mutex_unlock(&imx390->mutex);
-
-	return ret;
-}
-
-static int imx390_g_frame_interval(struct v4l2_subdev *sd,
-		struct v4l2_subdev_frame_interval *fival)
-{
-	struct imx390 *imx390 = to_imx390(sd);
-
-	fival->pad = 0;
-	fival->interval.numerator = 1;
-	fival->interval.denominator = imx390->cur_mode->fps;
-
-	return 0;
-}
-
-static int __maybe_unused imx390_suspend(struct device *dev)
-{
-	struct i2c_client *client = to_i2c_client(dev);
-	struct v4l2_subdev *sd = i2c_get_clientdata(client);
-	struct imx390 *imx390 = to_imx390(sd);
-
-	mutex_lock(&imx390->mutex);
-	if (imx390->streaming)
-		imx390_stop_streaming(imx390);
-
-	mutex_unlock(&imx390->mutex);
-
-	return 0;
-}
-
-static int __maybe_unused imx390_resume(struct device *dev)
-{
-	struct i2c_client *client = to_i2c_client(dev);
-	struct v4l2_subdev *sd = i2c_get_clientdata(client);
-	struct imx390 *imx390 = to_imx390(sd);
-	const struct imx390_reg_list *reg_list;
-	int ret;
-
-	reg_list = &imx390->cur_mode->reg_list;
-	ret = imx390_write_reg_list(imx390, reg_list);
-	if (ret) {
-		dev_err(&client->dev, "resume: failed to apply cur mode");
-		return ret;
-	}
-
-	mutex_lock(&imx390->mutex);
-	if (imx390->streaming) {
-		ret = imx390_start_streaming(imx390);
-		if (ret) {
-			imx390->streaming = false;
-			imx390_stop_streaming(imx390);
-			mutex_unlock(&imx390->mutex);
-			return ret;
-		}
-	}
-
-	mutex_unlock(&imx390->mutex);
-
-	return 0;
-}
-
-static int imx390_set_format(struct v4l2_subdev *sd,
-			     struct v4l2_subdev_state *sd_state,
-			     struct v4l2_subdev_format *fmt)
-{
-	struct imx390 *imx390 = to_imx390(sd);
-	const struct imx390_mode *mode;
-	s32 vblank_def;
-	s64 hblank;
-	int i;
-
-	for (i = 0; i < ARRAY_SIZE(supported_modes); i++)
-		if (supported_modes[i].code == fmt->format.code) {
-			if (supported_modes[i].width == fmt->format.width
-					&& supported_modes[i].height == fmt->format.height) {
-				mode = &supported_modes[i];
-				break;
-
-			}
-		}
-
-	if (i >= ARRAY_SIZE(supported_modes))
-		mode = &supported_modes[0];
-
-	mutex_lock(&imx390->mutex);
-
-	fmt->format.code = supported_formats[0];
-
-	imx390_update_pad_format(mode, &fmt->format);
-	if (fmt->which == V4L2_SUBDEV_FORMAT_TRY) {
-		*v4l2_subdev_state_get_format(sd_state, fmt->pad) = fmt->format;
-	} else {
-		imx390->cur_mode = mode;
-		__v4l2_ctrl_s_ctrl(imx390->link_freq, mode->link_freq_index);
-		__v4l2_ctrl_modify_range(imx390->pixel_rate,
-					get_pixel_rate(imx390),
-					get_pixel_rate(imx390),
-					1,
-					get_pixel_rate(imx390));
-
-		hblank = get_hblank(imx390);
-		__v4l2_ctrl_modify_range(imx390->hblank,
-					hblank,
-					hblank,
-					1,
-					hblank);
-
-		/* Update limits and set FPS to default */
-		vblank_def = mode->vts_def - mode->height;
-		__v4l2_ctrl_modify_range(imx390->vblank,
-					 0,
-					 IMX390_VTS_MAX - mode->height, 1,
-					 vblank_def);
-		//__v4l2_ctrl_s_ctrl(imx390->vblank, vblank_def);
-	}
-
-	mutex_unlock(&imx390->mutex);
-
-	return 0;
-}
-
-static int imx390_get_format(struct v4l2_subdev *sd,
-			     struct v4l2_subdev_state *sd_state,
-			     struct v4l2_subdev_format *fmt)
-{
-	struct imx390 *imx390 = to_imx390(sd);
-
-	mutex_lock(&imx390->mutex);
-	if (fmt->which == V4L2_SUBDEV_FORMAT_TRY)
-		fmt->format = *v4l2_subdev_state_get_format(sd_state,
-							  fmt->pad);
-	else
-		imx390_update_pad_format(imx390->cur_mode, &fmt->format);
-
-	mutex_unlock(&imx390->mutex);
-
-	return 0;
-}
-
-static unsigned int imx390_ipu6_isys_mbus_code_to_mipi(u32 code)
-{
-	switch (code) {
-	case MEDIA_BUS_FMT_RGB565_1X16:
-		return MIPI_CSI2_DT_RGB565;
-	case MEDIA_BUS_FMT_RGB888_1X24:
-		return MIPI_CSI2_DT_RGB888;
-	case MEDIA_BUS_FMT_UYVY8_1X16:
-	case MEDIA_BUS_FMT_YUYV8_1X16:
-		return MIPI_CSI2_DT_YUV422_8B;
-	case MEDIA_BUS_FMT_SBGGR16_1X16:
-	case MEDIA_BUS_FMT_SGBRG16_1X16:
-	case MEDIA_BUS_FMT_SGRBG16_1X16:
-	case MEDIA_BUS_FMT_SRGGB16_1X16:
-		return MIPI_CSI2_DT_RAW16;
-	case MEDIA_BUS_FMT_SBGGR12_1X12:
-	case MEDIA_BUS_FMT_SGBRG12_1X12:
-	case MEDIA_BUS_FMT_SGRBG12_1X12:
-	case MEDIA_BUS_FMT_SRGGB12_1X12:
-		return MIPI_CSI2_DT_RAW12;
-	case MEDIA_BUS_FMT_SBGGR10_1X10:
-	case MEDIA_BUS_FMT_SGBRG10_1X10:
-	case MEDIA_BUS_FMT_SGRBG10_1X10:
-	case MEDIA_BUS_FMT_SRGGB10_1X10:
-		return MIPI_CSI2_DT_RAW10;
-	case MEDIA_BUS_FMT_SBGGR8_1X8:
-	case MEDIA_BUS_FMT_SGBRG8_1X8:
-	case MEDIA_BUS_FMT_SGRBG8_1X8:
-	case MEDIA_BUS_FMT_SRGGB8_1X8:
-		return MIPI_CSI2_DT_RAW8;
-	default:
-		/* return unavailable MIPI data type - 0x3f */
-		WARN_ON(1);
-		return 0x3f;
-	}
-}
-
-static int imx390_get_frame_desc(struct v4l2_subdev *sd,
-	unsigned int pad, struct v4l2_mbus_frame_desc *desc)
-{
-	struct imx390 *imx390 = to_imx390(sd);
-	unsigned int i;
-
-	desc->type = V4L2_MBUS_FRAME_DESC_TYPE_CSI2;
-	desc->num_entries = V4L2_FRAME_DESC_ENTRY_MAX;
-
-	for (i = 0; i < desc->num_entries; i++) {
-		desc->entry[i].stream = i;
-		desc->entry[i].flags = 0;
-		desc->entry[i].pixelcode = MEDIA_BUS_FMT_FIXED;
-		desc->entry[i].length = 0;
-		desc->entry[i].bus.csi2.vc = i;
-		desc->entry[i].bus.csi2.dt = imx390_ipu6_isys_mbus_code_to_mipi(imx390->cur_mode->code);
-	}
-
-	return 0;
-}
-
-static int imx390_enum_mbus_code(struct v4l2_subdev *sd,
-				 struct v4l2_subdev_state *sd_state,
-				 struct v4l2_subdev_mbus_code_enum *code)
-{
-	if (code->index >= ARRAY_SIZE(supported_formats))
-		return -EINVAL;
-
-	code->code = supported_formats[code->index];
-
-	return 0;
-}
-
-static int imx390_enum_frame_size(struct v4l2_subdev *sd,
-				  struct v4l2_subdev_state *sd_state,
-				  struct v4l2_subdev_frame_size_enum *fse)
-{
-	if (fse->index >= ARRAY_SIZE(supported_modes))
-		return -EINVAL;
-
-	fse->min_width = supported_modes[fse->index].width;
-	fse->max_width = fse->min_width;
-	fse->min_height = supported_modes[fse->index].height;
-	fse->max_height = fse->min_height;
-
-	return 0;
-}
-
-static int imx390_frame_rate[] = { 40, 20 };
-
-static int imx390_enum_frame_interval(struct v4l2_subdev *subdev,
-		struct v4l2_subdev_state *sd_state,
-		struct v4l2_subdev_frame_interval_enum *fie)
-{
-	int mode_size = ARRAY_SIZE(supported_modes);
-	int i;
-
-	if (fie->index >= ARRAY_SIZE(imx390_frame_rate))
-		return -EINVAL;
-
-	for (i = 0; i < mode_size; i++)
-		if (fie->code == supported_modes[i].code
-			&& fie->width == supported_modes[i].width
-			&& fie->height == supported_modes[i].height)
-			break;
-
-	if (i == mode_size)
-		return -EINVAL;
-
-	fie->interval.numerator = 1;
-	fie->interval.denominator = imx390_frame_rate[fie->index];
-
-	return 0;
-}
-
-static int imx390_open(struct v4l2_subdev *sd, struct v4l2_subdev_fh *fh)
-{
-
-	struct imx390 *imx390 = to_imx390(sd);
-
-	mutex_lock(&imx390->mutex);
-	imx390_update_pad_format(&supported_modes[0],
-				 v4l2_subdev_state_get_format(fh->state, 0));
-	mutex_unlock(&imx390->mutex);
-
-	return 0;
-}
-
-static const struct v4l2_subdev_video_ops imx390_video_ops = {
-	.s_stream = imx390_set_stream,
-	// .g_frame_interval = imx390_g_frame_interval,
-};
-
-static const struct v4l2_subdev_pad_ops imx390_pad_ops = {
-	.set_fmt = imx390_set_format,
-	.get_fmt = imx390_get_format,
-	.get_frame_desc = imx390_get_frame_desc,
-	.enum_mbus_code = imx390_enum_mbus_code,
-	.enum_frame_size = imx390_enum_frame_size,
-	.enum_frame_interval = imx390_enum_frame_interval,
-};
-
-static const struct v4l2_subdev_ops imx390_subdev_ops = {
-	.video = &imx390_video_ops,
-	.pad = &imx390_pad_ops,
-};
-
-static const struct media_entity_operations imx390_subdev_entity_ops = {
-	.link_validate = v4l2_subdev_link_validate,
-};
-
-static const struct v4l2_subdev_internal_ops imx390_internal_ops = {
-	.open = imx390_open,
-};
-
-static int imx390_identify_module(struct imx390 *imx390)
-{
-	struct i2c_client *client = v4l2_get_subdevdata(&imx390->sd);
-	int ret;
-	u32 val;
-
-	ret = imx390_read_reg(imx390, IMX390_REG_CHIP_ID,
-			      IMX390_REG_VALUE_08BIT, &val);
-	if (ret)
-		return ret;
-
-	return 0;
-
-	/* chip id not known yet */
-	if (val != IMX390_CHIP_ID) {
-		dev_err(&client->dev, "chip id mismatch: %x!=%x",
-			IMX390_CHIP_ID, val);
-		return -ENXIO;
-	}
-
-	return 0;
-}
-
-static void imx390_remove(struct i2c_client *client)
-{
-	struct v4l2_subdev *sd = i2c_get_clientdata(client);
-	struct imx390 *imx390 = to_imx390(sd);
-
-	v4l2_async_unregister_subdev(sd);
-	media_entity_cleanup(&sd->entity);
-	v4l2_ctrl_handler_free(sd->ctrl_handler);
-	pm_runtime_disable(&client->dev);
-	mutex_destroy(&imx390->mutex);
-
-}
-static int imx390_probe(struct i2c_client *client)
-{
-	struct v4l2_subdev *sd;
-	struct imx390 *imx390;
-	const struct imx390_reg_list *reg_list;
-	int ret;
-
-	imx390 = devm_kzalloc(&client->dev, sizeof(*imx390), GFP_KERNEL);
-	if (!imx390)
-		return -ENOMEM;
-
-	imx390->platform_data = client->dev.platform_data;
-	if (imx390->platform_data == NULL) {
-		dev_err(&client->dev, "no platform data provided\n");
-		return -EINVAL;
-	}
-
-	/* initialize subdevice */
-	sd = &imx390->sd;
-	v4l2_i2c_subdev_init(sd, client, &imx390_subdev_ops);
-	sd->flags |= V4L2_SUBDEV_FL_HAS_DEVNODE | V4L2_SUBDEV_FL_HAS_EVENTS;
-	sd->internal_ops = &imx390_internal_ops;
-	sd->entity.ops = &imx390_subdev_entity_ops;
-
-	/* initialize subdev media pad */
-	imx390->pad.flags = MEDIA_PAD_FL_SOURCE;
-	sd->entity.function = MEDIA_ENT_F_CAM_SENSOR;
-	ret = media_entity_pads_init(&sd->entity, 1, &imx390->pad);
-	if (ret < 0) {
-		dev_err(&client->dev,
-			"%s : media entity init Failed %d\n", __func__, ret);
-		return ret;
-	}
-
-	ret = imx390_identify_module(imx390);
-	if (ret) {
-		dev_err(&client->dev, "failed to find sensor: %d", ret);
-		return ret;
-	}
-
-	if (imx390->platform_data->suffix)
-		snprintf(imx390->sd.name,
-				sizeof(imx390->sd.name), "imx390 %c",
-				imx390->platform_data->suffix);
-
-	mutex_init(&imx390->mutex);
-
-	/* 1920x1200 default */
-	imx390->cur_mode = &supported_modes[1];
-	imx390->pre_mode = imx390->cur_mode;
-
-	reg_list = &imx390->cur_mode->reg_list;
-	ret = imx390_write_reg_list(imx390, reg_list);
-	if (ret) {
-		dev_err(&client->dev, "failed to apply preset mode");
-		return ret;
-	}
-
-	ret = imx390_init_controls(imx390);
-	if (ret) {
-		dev_err(&client->dev, "failed to init controls: %d", ret);
-		goto probe_error_v4l2_ctrl_handler_free;
-	}
-
-	ret = v4l2_async_register_subdev_sensor(&imx390->sd);
-	if (ret < 0) {
-		dev_err(&client->dev, "failed to register V4L2 subdev: %d",
-			ret);
-		goto probe_error_media_entity_cleanup;
-	}
-
-	/*
-	 * Device is already turned on by i2c-core with ACPI domain PM.
-	 * Enable runtime PM and turn off the device.
-	 */
-	pm_runtime_set_active(&client->dev);
-	pm_runtime_enable(&client->dev);
-	pm_runtime_idle(&client->dev);
-	dev_err(&client->dev, "Probe Succeeded");
-
-	return 0;
-
-probe_error_media_entity_cleanup:
-	media_entity_cleanup(&imx390->sd.entity);
-
-probe_error_v4l2_ctrl_handler_free:
-	v4l2_ctrl_handler_free(imx390->sd.ctrl_handler);
-	mutex_destroy(&imx390->mutex);
-	dev_err(&client->dev, "Probe Failed");
-
-	return ret;
-}
-
-static const struct dev_pm_ops imx390_pm_ops = {
-	SET_SYSTEM_SLEEP_PM_OPS(imx390_suspend, imx390_resume)
-};
-
-static const struct i2c_device_id imx390_id_table[] = {
-	{ "imx390", 0 },
-	{ /* sentinel */ },
-};
-MODULE_DEVICE_TABLE(i2c, imx390_id_table);
-
-static struct i2c_driver imx390_i2c_driver = {
-	.driver = {
-		.name = "imx390",
-		.pm = &imx390_pm_ops,
-	},
-	.probe = imx390_probe,
-	.remove = imx390_remove,
-	.id_table = imx390_id_table,
-};
-
-module_i2c_driver(imx390_i2c_driver);
-
-MODULE_AUTHOR("Chang, Ying <ying.chang@intel.com>");
-MODULE_DESCRIPTION("imx390 sensor driver");
-MODULE_LICENSE("GPL v2");
diff --git a/drivers/media/i2c/imx390_mode_1920x1200HDR3_CUST_PWL12.h b/drivers/media/i2c/imx390_mode_1920x1200HDR3_CUST_PWL12.h
deleted file mode 100644
index b2b373b6eeaf..000000000000
--- a/drivers/media/i2c/imx390_mode_1920x1200HDR3_CUST_PWL12.h
+++ /dev/null
@@ -1,3891 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0 */
-/**
- * @author George Vigelette <gvigelette@d3engineering.com>
- *
- * imx390 v4l2 driver for tgl
- **/
-
-#ifndef __GRBG_1920x1200_HDR3_CUST_PWL12_M4_30_27M_H
-#define __GRBG_1920x1200_HDR3_CUST_PWL12_M4_30_27M_H
-
-static const struct imx390_reg imx390_mode_1920x1200HDR3_CUST_PWL12[] = {
-{0x2E18, 0x00},		/* disable rear embedded data line */
-{0x000C, 0x45},
-{0x000D, 0x03},
-{0x000E, 0x00},
-{0x0010, 0x45},
-{0x0011, 0x03},
-{0x0012, 0x00},
-{0x0018, 0x1C},
-{0x0019, 0x00},
-{0x001A, 0x0C},
-{0x001B, 0x00},
-{0x0038, 0x00},
-{0x003C, 0x00},
-{0x003D, 0x00},
-{0x003E, 0x00},
-{0x0040, 0x00},
-{0x0041, 0x00},
-{0x0042, 0x00},
-{0x0044, 0x00},
-{0x0045, 0x00},
-{0x0046, 0x00},
-{0x0048, 0x00},
-{0x0049, 0x00},
-{0x004A, 0x00},
-{0x004C, 0x00},
-{0x004D, 0x00},
-{0x004E, 0x00},
-{0x0050, 0x00},
-{0x0051, 0x00},
-{0x0052, 0x00},
-{0x0054, 0x00},
-{0x0055, 0x00},
-{0x0056, 0x00},
-{0x0058, 0x00},
-{0x0059, 0x00},
-{0x005A, 0x00},
-{0x005C, 0x00},
-{0x005D, 0x00},
-{0x005E, 0x00},
-{0x0060, 0x00},
-{0x0061, 0x00},
-{0x0062, 0x00},
-{0x0064, 0x00},
-{0x0065, 0x00},
-{0x0066, 0x00},
-{0x0068, 0x00},
-{0x0069, 0x00},
-{0x006A, 0x00},
-{0x0078, 0x01},
-{0x007C, 0x08},
-{0x007D, 0x00},
-{0x0080, 0x08},
-{0x0081, 0x00},
-{0x0090, 0x00},
-{0x00F4, 0x1C},
-{0x00F5, 0xF8},
-{0x00F6, 0x01},
-{0x00F8, 0x03},
-{0x00F9, 0x01},
-{0x00FA, 0x00},
-{0x00FB, 0x02},
-{0x0114, 0x00},
-{0x0115, 0x01},
-{0x0118, 0x20},
-{0x0119, 0x03},
-{0x011A, 0x00},
-{0x011B, 0x41},
-{0x011C, 0x80},
-{0x011D, 0x00},
-{0x0120, 0x20},
-{0x0121, 0x00},
-{0x0122, 0x00},
-{0x0123, 0x44},
-{0x0124, 0x00},
-{0x0125, 0x01},
-{0x0128, 0x17},
-{0x0129, 0x06},
-{0x012A, 0x00},
-{0x012B, 0xA4},
-{0x012C, 0x00},
-{0x012D, 0x01},
-{0x0130, 0xD0},
-{0x0131, 0x07},
-{0x0132, 0x00},
-{0x0133, 0xDA},
-{0x0134, 0x00},
-{0x0136, 0xF0},
-{0x0137, 0x00},
-{0x013A, 0x00},
-{0x013B, 0x00},
-{0x013C, 0x00},
-{0x013D, 0x00},
-{0x013E, 0x00},
-{0x0140, 0x00},
-{0x0141, 0x00},
-{0x0142, 0x00},
-{0x0144, 0xDF},
-{0x0145, 0x01},
-{0x0146, 0x00},
-{0x0148, 0xDF},
-{0x0149, 0x01},
-{0x014A, 0x00},
-{0x014C, 0x9E},
-{0x014D, 0x05},
-{0x014E, 0x00},
-{0x0150, 0x45},
-{0x0151, 0x03},
-{0x0152, 0x00},
-{0x0154, 0xDB},
-{0x0155, 0x10},
-{0x0156, 0x00},
-{0x0158, 0xD6},
-{0x0159, 0x04},
-{0x015A, 0x00},
-{0x015C, 0x91},
-{0x015D, 0x32},
-{0x015E, 0x00},
-{0x0160, 0x98},
-{0x0161, 0x06},
-{0x0162, 0x00},
-{0x0164, 0xB4},
-{0x0165, 0x97},
-{0x0166, 0x00},
-{0x0168, 0x8F},
-{0x0169, 0x08},
-{0x016A, 0x00},
-{0x016C, 0x1C},
-{0x016D, 0xC7},
-{0x016E, 0x01},
-{0x0170, 0xC3},
-{0x0171, 0x0A},
-{0x0172, 0x00},
-{0x0174, 0x55},
-{0x0175, 0x55},
-{0x0176, 0x05},
-{0x0178, 0x3B},
-{0x0179, 0x0D},
-{0x017A, 0x00},
-{0x017C, 0xFF},
-{0x017D, 0xFF},
-{0x017E, 0x0F},
-{0x0180, 0xFF},
-{0x0181, 0x0F},
-{0x0182, 0x00},
-{0x0184, 0xFF},
-{0x0185, 0xFF},
-{0x0186, 0x0F},
-{0x0188, 0xFF},
-{0x0189, 0x0F},
-{0x018A, 0x00},
-{0x018C, 0xFF},
-{0x018D, 0xFF},
-{0x018E, 0xFF},
-{0x0190, 0xFF},
-{0x0191, 0x0F},
-{0x0192, 0x00},
-{0x0194, 0xFF},
-{0x0195, 0x0F},
-{0x0196, 0x00},
-{0x0198, 0x00},
-{0x0199, 0x00},
-{0x019A, 0x00},
-{0x019B, 0x01},
-{0x019C, 0xE8},
-{0x019D, 0x98},
-{0x019E, 0x5F},
-{0x019F, 0x00},
-{0x01A0, 0xD7},
-{0x01A1, 0xB2},
-{0x01A2, 0x23},
-{0x01A3, 0x00},
-{0x01A4, 0xB0},
-{0x01A5, 0x54},
-{0x01A6, 0x0D},
-{0x01A7, 0x00},
-{0x01A8, 0x63},
-{0x01A9, 0xFA},
-{0x01AA, 0x04},
-{0x01AB, 0x00},
-{0x01AC, 0xE4},
-{0x01AD, 0xDB},
-{0x01AE, 0x01},
-{0x01AF, 0x00},
-{0x01B0, 0xB5},
-{0x01B1, 0xB1},
-{0x01B2, 0x00},
-{0x01B3, 0x00},
-{0x01B4, 0x5C},
-{0x01B5, 0x42},
-{0x01B6, 0x00},
-{0x01B7, 0x00},
-{0x01B8, 0xC8},
-{0x01B9, 0x18},
-{0x01BA, 0x00},
-{0x01BB, 0x00},
-{0x01BC, 0x00},
-{0x01BD, 0x00},
-{0x01BE, 0x00},
-{0x01BF, 0x00},
-{0x01C0, 0x00},
-{0x01C1, 0x00},
-{0x01C2, 0x00},
-{0x01C3, 0x00},
-{0x01C4, 0x00},
-{0x01C5, 0x00},
-{0x01CC, 0x01},
-{0x01D0, 0x09},
-{0x01D4, 0x01},
-{0x0332, 0x9B},
-{0x0333, 0x03},
-{0x0390, 0x00},
-{0x0391, 0x00},
-{0x0392, 0x00},
-{0x03C0, 0x01},
-{0x2000, 0x55},
-{0x2001, 0x55},
-{0x2002, 0x55},
-{0x2003, 0x05},
-{0x2004, 0x02},
-{0x2008, 0xE2},
-{0x2009, 0x04},
-{0x200A, 0x00},
-{0x200C, 0xE4},
-{0x200D, 0x0C},
-{0x2010, 0x04},
-{0x2014, 0x01},
-{0x2018, 0xA0},
-{0x2019, 0x04},
-{0x201A, 0x00},
-{0x201C, 0x01},
-{0x201D, 0x13},
-{0x201E, 0x00},
-{0x201F, 0x00},
-{0x2020, 0xBC},
-{0x2021, 0x00},
-{0x2022, 0x7F},
-{0x2023, 0x00},
-{0x2024, 0xBA},
-{0x2025, 0x00},
-{0x2026, 0x81},
-{0x2027, 0x00},
-{0x2028, 0x7D},
-{0x2029, 0x90},
-{0x202A, 0x05},
-{0x202C, 0xFC},
-{0x202D, 0x02},
-{0x202E, 0x25},
-{0x202F, 0x03},
-{0x2030, 0x05},
-{0x2031, 0x02},
-{0x2032, 0xCA},
-{0x2033, 0x02},
-{0x2034, 0xFC},
-{0x2035, 0x02},
-{0x2036, 0x25},
-{0x2037, 0x03},
-{0x2038, 0xF8},
-{0x2039, 0xE4},
-{0x203A, 0xE3},
-{0x203B, 0x01},
-{0x203C, 0xF5},
-{0x203D, 0x8E},
-{0x203E, 0x0C},
-{0x203F, 0x2D},
-{0x2040, 0x69},
-{0x2041, 0x01},
-{0x2042, 0x8E},
-{0x2043, 0x01},
-{0x2044, 0x0C},
-{0x2045, 0x02},
-{0x2046, 0x31},
-{0x2047, 0x02},
-{0x2048, 0x6A},
-{0x2049, 0x01},
-{0x204A, 0x8E},
-{0x204B, 0x01},
-{0x204C, 0x0D},
-{0x204D, 0x02},
-{0x204E, 0x31},
-{0x204F, 0x02},
-{0x2050, 0x7B},
-{0x2051, 0x00},
-{0x2052, 0x7D},
-{0x2053, 0x00},
-{0x2054, 0x95},
-{0x2055, 0x00},
-{0x2056, 0x97},
-{0x2057, 0x00},
-{0x2058, 0xAD},
-{0x2059, 0x00},
-{0x205A, 0xAF},
-{0x205B, 0x00},
-{0x205C, 0x92},
-{0x205D, 0x00},
-{0x205E, 0x94},
-{0x205F, 0x00},
-{0x2060, 0x8E},
-{0x2061, 0x00},
-{0x2062, 0x90},
-{0x2063, 0x00},
-{0x2064, 0xB1},
-{0x2065, 0x00},
-{0x2066, 0xB3},
-{0x2067, 0x00},
-{0x2068, 0x08},
-{0x2069, 0x00},
-{0x206A, 0x04},
-{0x206B, 0x00},
-{0x206C, 0x84},
-{0x206D, 0x00},
-{0x206E, 0x80},
-{0x206F, 0x00},
-{0x2070, 0x04},
-{0x2071, 0x00},
-{0x2072, 0x46},
-{0x2073, 0x00},
-{0x2074, 0xE9},
-{0x2075, 0x01},
-{0x2076, 0x74},
-{0x2077, 0x02},
-{0x2078, 0x80},
-{0x2079, 0x00},
-{0x207A, 0xC1},
-{0x207B, 0x00},
-{0x207C, 0xFF},
-{0x207D, 0x03},
-{0x207E, 0xFF},
-{0x207F, 0x03},
-{0x2080, 0x78},
-{0x2081, 0x00},
-{0x2082, 0x6A},
-{0x2083, 0x01},
-{0x2084, 0xE4},
-{0x2085, 0x01},
-{0x2086, 0x2B},
-{0x2087, 0x03},
-{0x2088, 0x00},
-{0x2089, 0x00},
-{0x208A, 0xFF},
-{0x208B, 0x03},
-{0x208C, 0xFF},
-{0x208D, 0x03},
-{0x208E, 0xFF},
-{0x208F, 0x03},
-{0x2090, 0x7D},
-{0x2091, 0x00},
-{0x2092, 0x62},
-{0x2093, 0x01},
-{0x2094, 0xE9},
-{0x2095, 0x01},
-{0x2096, 0x00},
-{0x2097, 0x00},
-{0x2098, 0x7C},
-{0x2099, 0x00},
-{0x209A, 0x21},
-{0x209B, 0x03},
-{0x209C, 0xE9},
-{0x209D, 0x01},
-{0x209E, 0x21},
-{0x209F, 0x03},
-{0x20A0, 0xFF},
-{0x20A1, 0x03},
-{0x20A2, 0xFF},
-{0x20A3, 0x03},
-{0x20A4, 0xFF},
-{0x20A5, 0x03},
-{0x20A6, 0xFF},
-{0x20A7, 0x03},
-{0x20A8, 0xFF},
-{0x20A9, 0x03},
-{0x20AA, 0xFF},
-{0x20AB, 0x03},
-{0x20AC, 0xFF},
-{0x20AD, 0x03},
-{0x20AE, 0xFF},
-{0x20AF, 0x03},
-{0x20B0, 0xFF},
-{0x20B1, 0x03},
-{0x20B2, 0xFF},
-{0x20B3, 0x03},
-{0x20B4, 0x87},
-{0x20B5, 0xCC},
-{0x20B6, 0x87},
-{0x20B7, 0x08},
-{0x20B8, 0xF4},
-{0x20B9, 0xA5},
-{0x20BA, 0x07},
-{0x20BC, 0x1F},
-{0x20BD, 0x01},
-{0x20BE, 0xF6},
-{0x20BF, 0x00},
-{0x20C0, 0x90},
-{0x20C1, 0x01},
-{0x20C2, 0x67},
-{0x20C3, 0x01},
-{0x20C4, 0xFF},
-{0x20C5, 0x03},
-{0x20C6, 0xFF},
-{0x20C7, 0x03},
-{0x20C8, 0x33},
-{0x20C9, 0x02},
-{0x20CA, 0x0A},
-{0x20CB, 0x02},
-{0x20CC, 0x7F},
-{0x20CD, 0x00},
-{0x20CE, 0xD2},
-{0x20CF, 0x00},
-{0x20D0, 0x81},
-{0x20D1, 0x00},
-{0x20D2, 0x87},
-{0x20D3, 0x00},
-{0x20D4, 0x09},
-{0x20D5, 0x00},
-{0x20D8, 0x7F},
-{0x20D9, 0x00},
-{0x20DA, 0x62},
-{0x20DB, 0x01},
-{0x20DC, 0x7F},
-{0x20DD, 0x00},
-{0x20DE, 0x62},
-{0x20DF, 0x01},
-{0x20E0, 0x65},
-{0x20E1, 0x00},
-{0x20E2, 0x75},
-{0x20E3, 0x00},
-{0x20E4, 0xE0},
-{0x20E5, 0x00},
-{0x20E6, 0xF0},
-{0x20E7, 0x00},
-{0x20E8, 0x4C},
-{0x20E9, 0x01},
-{0x20EA, 0x5C},
-{0x20EB, 0x01},
-{0x20EC, 0xD1},
-{0x20ED, 0x01},
-{0x20EE, 0xE1},
-{0x20EF, 0x01},
-{0x20F0, 0x93},
-{0x20F1, 0x02},
-{0x20F2, 0xA3},
-{0x20F3, 0x02},
-{0x20F4, 0x0D},
-{0x20F5, 0x03},
-{0x20F6, 0x1D},
-{0x20F7, 0x03},
-{0x20F8, 0x57},
-{0x20F9, 0x00},
-{0x20FA, 0x7B},
-{0x20FB, 0x00},
-{0x20FC, 0xD2},
-{0x20FD, 0x00},
-{0x20FE, 0xF6},
-{0x20FF, 0x00},
-{0x2100, 0x3E},
-{0x2101, 0x01},
-{0x2102, 0x60},
-{0x2103, 0x01},
-{0x2104, 0xC3},
-{0x2105, 0x01},
-{0x2106, 0xE5},
-{0x2107, 0x01},
-{0x2108, 0x85},
-{0x2109, 0x02},
-{0x210A, 0xA9},
-{0x210B, 0x02},
-{0x210C, 0xFF},
-{0x210D, 0x02},
-{0x210E, 0x21},
-{0x210F, 0x03},
-{0x2110, 0xFF},
-{0x2111, 0x03},
-{0x2112, 0x00},
-{0x2113, 0x00},
-{0x2114, 0xFF},
-{0x2115, 0x03},
-{0x2116, 0xFF},
-{0x2117, 0x03},
-{0x2118, 0xFF},
-{0x2119, 0x03},
-{0x211A, 0xFF},
-{0x211B, 0x03},
-{0x211C, 0xFF},
-{0x211D, 0x03},
-{0x211E, 0xFF},
-{0x211F, 0x03},
-{0x2120, 0xFF},
-{0x2121, 0x03},
-{0x2122, 0xFF},
-{0x2123, 0x03},
-{0x2124, 0xFF},
-{0x2125, 0x03},
-{0x2126, 0xFF},
-{0x2127, 0x03},
-{0x2128, 0x7D},
-{0x2129, 0x90},
-{0x212A, 0xD5},
-{0x212B, 0x07},
-{0x212C, 0x64},
-{0x212D, 0x01},
-{0x2130, 0x5F},
-{0x2131, 0x7D},
-{0x2132, 0x05},
-{0x2134, 0x78},
-{0x2135, 0x00},
-{0x2136, 0x76},
-{0x2137, 0x00},
-{0x2138, 0xF3},
-{0x2139, 0x00},
-{0x213A, 0xF1},
-{0x213B, 0x00},
-{0x213C, 0xA6},
-{0x213D, 0x02},
-{0x213E, 0xA4},
-{0x213F, 0x02},
-{0x2140, 0x7D},
-{0x2141, 0x00},
-{0x2142, 0x8D},
-{0x2143, 0x00},
-{0x2144, 0xA1},
-{0x2145, 0x01},
-{0x2146, 0xB1},
-{0x2147, 0x01},
-{0x2148, 0xAB},
-{0x2149, 0x02},
-{0x214A, 0xBB},
-{0x214B, 0x02},
-{0x214C, 0x17},
-{0x214D, 0x5C},
-{0x214E, 0x00},
-{0x2150, 0x00},
-{0x2151, 0x00},
-{0x2152, 0xF8},
-{0x2153, 0x00},
-{0x2154, 0x45},
-{0x2155, 0x00},
-{0x2156, 0x00},
-{0x2157, 0x00},
-{0x2158, 0x25},
-{0x2159, 0x00},
-{0x215A, 0x7D},
-{0x215B, 0x00},
-{0x215C, 0x62},
-{0x215D, 0x01},
-{0x215E, 0xFF},
-{0x215F, 0x03},
-{0x2160, 0x26},
-{0x2161, 0x00},
-{0x2162, 0x7D},
-{0x2163, 0x00},
-{0x2164, 0x63},
-{0x2165, 0x01},
-{0x2166, 0xFF},
-{0x2167, 0x03},
-{0x2168, 0xCB},
-{0x2169, 0x02},
-{0x216A, 0xCF},
-{0x216B, 0x02},
-{0x216C, 0xFF},
-{0x216D, 0x03},
-{0x216E, 0xFF},
-{0x216F, 0x03},
-{0x2170, 0xFF},
-{0x2171, 0x03},
-{0x2172, 0xFF},
-{0x2173, 0x03},
-{0x2174, 0xFF},
-{0x2175, 0x03},
-{0x2176, 0xFF},
-{0x2177, 0x03},
-{0x2178, 0x7E},
-{0x2179, 0x00},
-{0x217A, 0xBD},
-{0x217B, 0x00},
-{0x217C, 0xEC},
-{0x217D, 0x01},
-{0x217E, 0x7B},
-{0x217F, 0x02},
-{0x2180, 0xD1},
-{0x2181, 0x02},
-{0x2182, 0x25},
-{0x2183, 0x03},
-{0x2184, 0x7F},
-{0x2185, 0x00},
-{0x2186, 0xBD},
-{0x2187, 0x00},
-{0x2188, 0xED},
-{0x2189, 0x01},
-{0x218A, 0x7B},
-{0x218B, 0x02},
-{0x218C, 0xD2},
-{0x218D, 0x02},
-{0x218E, 0x25},
-{0x218F, 0x03},
-{0x2190, 0xFF},
-{0x2191, 0x03},
-{0x2192, 0xFF},
-{0x2193, 0x03},
-{0x2194, 0xE9},
-{0x2195, 0x01},
-{0x2196, 0x21},
-{0x2197, 0x03},
-{0x2198, 0x17},
-{0x2199, 0xFC},
-{0x219A, 0x7F},
-{0x219B, 0x01},
-{0x219C, 0xFF},
-{0x219D, 0x03},
-{0x21A0, 0x1B},
-{0x21A1, 0x1B},
-{0x21A2, 0x1B},
-{0x21A3, 0x01},
-{0x21A4, 0x2E},
-{0x21A5, 0x80},
-{0x21A6, 0x00},
-{0x21A8, 0x04},
-{0x21A9, 0x98},
-{0x21AA, 0x60},
-{0x21AB, 0x03},
-{0x21AC, 0x7F},
-{0x21AD, 0x80},
-{0x21AE, 0x09},
-{0x21B0, 0x1C},
-{0x21B1, 0x00},
-{0x21B2, 0xA0},
-{0x21B3, 0x00},
-{0x21B4, 0x0C},
-{0x21B5, 0x00},
-{0x21B6, 0x2D},
-{0x21B7, 0x00},
-{0x21B8, 0x20},
-{0x21B9, 0x00},
-{0x21BA, 0x02},
-{0x21BB, 0x00},
-{0x21BC, 0xCC},
-{0x21BD, 0x00},
-{0x21BE, 0x4A},
-{0x21BF, 0x00},
-{0x21C0, 0xD0},
-{0x21C1, 0x00},
-{0x21C2, 0x44},
-{0x21C3, 0x00},
-{0x21C4, 0x00},
-{0x21C5, 0xE0},
-{0x21C6, 0x00},
-{0x21C8, 0x11},
-{0x21C9, 0x00},
-{0x21CA, 0x02},
-{0x21CC, 0x08},
-{0x21CD, 0xC0},
-{0x21CE, 0x0C},
-{0x21D0, 0x44},
-{0x21D1, 0x00},
-{0x21D2, 0x02},
-{0x21D4, 0x02},
-{0x21D5, 0x20},
-{0x21D6, 0x2C},
-{0x21D8, 0xFE},
-{0x21D9, 0x9D},
-{0x21DA, 0xDF},
-{0x21DB, 0x03},
-{0x21DC, 0x62},
-{0x21DD, 0x01},
-{0x21DE, 0x7F},
-{0x21DF, 0x00},
-{0x21E0, 0xB7},
-{0x21E1, 0x01},
-{0x21E2, 0xB5},
-{0x21E3, 0x01},
-{0x21E4, 0xC1},
-{0x21E5, 0x02},
-{0x21E6, 0xBF},
-{0x21E7, 0x02},
-{0x21E8, 0xB3},
-{0x21E9, 0x4D},
-{0x21EA, 0x00},
-{0x21EB, 0x04},
-{0x21EC, 0x90},
-{0x21ED, 0x07},
-{0x21EE, 0xD0},
-{0x21EF, 0x04},
-{0x21F0, 0xCC},
-{0x21F1, 0x04},
-{0x21F4, 0x02},
-{0x21F5, 0x00},
-{0x21F6, 0x00},
-{0x21F8, 0x00},
-{0x21F9, 0x00},
-{0x21FC, 0x28},
-{0x21FD, 0x00},
-{0x21FE, 0x00},
-{0x21FF, 0x00},
-{0x2200, 0x00},
-{0x2204, 0x56},
-{0x2205, 0x04},
-{0x2206, 0xE2},
-{0x2207, 0x04},
-{0x2208, 0x0A},
-{0x2209, 0x00},
-{0x220C, 0x47},
-{0x220D, 0x00},
-{0x220E, 0x1F},
-{0x220F, 0x00},
-{0x2210, 0x17},
-{0x2211, 0x00},
-{0x2212, 0x0F},
-{0x2213, 0x00},
-{0x2214, 0x17},
-{0x2215, 0x00},
-{0x2216, 0x47},
-{0x2217, 0x00},
-{0x2218, 0x0F},
-{0x2219, 0x00},
-{0x221A, 0x0F},
-{0x221B, 0x00},
-{0x221C, 0x03},
-{0x2220, 0x20},
-{0x2221, 0x10},
-{0x2222, 0x11},
-{0x2223, 0x01},
-{0x2224, 0xC7},
-{0x2225, 0xAA},
-{0x2226, 0x80},
-{0x2227, 0x08},
-{0x2228, 0x01},
-{0x2260, 0xFF},
-{0x2261, 0x1F},
-{0x2262, 0x00},
-{0x2263, 0x00},
-{0x2264, 0x00},
-{0x2265, 0x00},
-{0x2266, 0xFF},
-{0x2267, 0x1F},
-{0x2268, 0x00},
-{0x2269, 0x00},
-{0x226A, 0xFF},
-{0x226B, 0x1F},
-{0x226C, 0x00},
-{0x226D, 0x00},
-{0x226E, 0xFF},
-{0x226F, 0x1F},
-{0x227C, 0xFF},
-{0x227D, 0x1F},
-{0x227E, 0x00},
-{0x227F, 0x10},
-{0x2280, 0xFF},
-{0x2281, 0x1F},
-{0x2282, 0x00},
-{0x2283, 0x10},
-{0x2284, 0xFF},
-{0x2285, 0x1F},
-{0x2286, 0x00},
-{0x2287, 0x10},
-{0x22B2, 0x92},
-{0x22B4, 0x20},
-{0x22B5, 0x00},
-{0x22B6, 0x20},
-{0x22B7, 0x00},
-{0x22B8, 0x20},
-{0x22B9, 0x00},
-{0x22BA, 0x20},
-{0x22BB, 0x00},
-{0x22BC, 0x20},
-{0x22BD, 0x00},
-{0x22BE, 0x20},
-{0x22BF, 0x00},
-{0x22C0, 0x20},
-{0x22C1, 0x00},
-{0x22C2, 0x20},
-{0x22C3, 0x00},
-{0x22C4, 0x20},
-{0x22C5, 0x00},
-{0x22C6, 0x20},
-{0x22C7, 0x00},
-{0x22C8, 0x20},
-{0x22C9, 0x00},
-{0x22CA, 0x20},
-{0x22CB, 0x00},
-{0x22CC, 0x20},
-{0x22CD, 0x00},
-{0x22CE, 0x20},
-{0x22CF, 0x00},
-{0x22DA, 0x00},
-{0x22EF, 0x82},
-{0x2308, 0x01},
-{0x2310, 0x73},
-{0x2311, 0x89},
-{0x2318, 0x40},
-{0x2319, 0xCD},
-{0x231A, 0x54},
-{0x2324, 0x20},
-{0x2325, 0x00},
-{0x2328, 0x00},
-{0x234A, 0x9F},
-{0x234B, 0x07},
-{0x2354, 0x0C},
-{0x23C0, 0x5D},
-{0x23C2, 0x02},
-{0x244C, 0x00},
-{0x244D, 0x02},
-{0x244E, 0x54},
-{0x244F, 0x02},
-{0x24A0, 0x00},
-{0x24A4, 0x16},
-{0x24A5, 0x01},
-{0x24A6, 0xA6},
-{0x24A7, 0x02},
-{0x24A8, 0xD5},
-{0x24A9, 0x02},
-{0x24BC, 0x17},
-{0x24BD, 0x01},
-{0x24BE, 0xA7},
-{0x24BF, 0x02},
-{0x24C0, 0xD5},
-{0x24C1, 0x02},
-{0x24DA, 0x6F},
-{0x24DB, 0x00},
-{0x24DC, 0x62},
-{0x24DD, 0x01},
-{0x24EA, 0x32},
-{0x24EB, 0x00},
-{0x24EC, 0xDC},
-{0x24ED, 0x00},
-{0x24FA, 0x32},
-{0x24FB, 0x00},
-{0x24FC, 0xDD},
-{0x24FD, 0x00},
-{0x254A, 0x15},
-{0x254B, 0x01},
-{0x255A, 0x15},
-{0x255B, 0x01},
-{0x2560, 0x01},
-{0x2561, 0x00},
-{0x2562, 0x2A},
-{0x2563, 0x00},
-{0x2564, 0xF8},
-{0x2565, 0x00},
-{0x2566, 0x15},
-{0x2567, 0x01},
-{0x2568, 0x0C},
-{0x2569, 0x02},
-{0x256A, 0x31},
-{0x256B, 0x02},
-{0x2578, 0x90},
-{0x2579, 0x01},
-{0x257A, 0x92},
-{0x257B, 0x01},
-{0x257C, 0xB8},
-{0x257D, 0x02},
-{0x257E, 0xBA},
-{0x257F, 0x02},
-{0x2584, 0x90},
-{0x2585, 0x01},
-{0x2586, 0x92},
-{0x2587, 0x01},
-{0x2588, 0xB8},
-{0x2589, 0x02},
-{0x258A, 0xBA},
-{0x258B, 0x02},
-{0x267A, 0xF8},
-{0x267B, 0x00},
-{0x267C, 0x16},
-{0x267D, 0x01},
-{0x267E, 0xA6},
-{0x267F, 0x02},
-{0x2680, 0xD5},
-{0x2681, 0x02},
-{0x2690, 0xF8},
-{0x2691, 0x00},
-{0x2694, 0xA6},
-{0x2695, 0x02},
-{0x2696, 0x16},
-{0x2697, 0x01},
-{0x269A, 0xD5},
-{0x269B, 0x02},
-{0x26B8, 0x10},
-{0x26B9, 0x00},
-{0x26BA, 0x33},
-{0x26BB, 0x00},
-{0x26BC, 0x89},
-{0x26BD, 0x00},
-{0x26BE, 0xB0},
-{0x26BF, 0x00},
-{0x26C4, 0x4E},
-{0x26C5, 0x00},
-{0x26C8, 0xC9},
-{0x26C9, 0x00},
-{0x26CC, 0x35},
-{0x26CD, 0x01},
-{0x26D0, 0xBA},
-{0x26D1, 0x01},
-{0x26D4, 0x7C},
-{0x26D5, 0x02},
-{0x26D8, 0xF6},
-{0x26D9, 0x02},
-{0x26DE, 0x51},
-{0x26DF, 0x00},
-{0x26E0, 0x7F},
-{0x26E1, 0x00},
-{0x26E2, 0xCC},
-{0x26E3, 0x00},
-{0x26E4, 0xF8},
-{0x26E5, 0x00},
-{0x26E6, 0x38},
-{0x26E7, 0x01},
-{0x26E8, 0x65},
-{0x26E9, 0x01},
-{0x26EA, 0xBD},
-{0x26EB, 0x01},
-{0x26EE, 0x7F},
-{0x26EF, 0x02},
-{0x26F0, 0xAB},
-{0x26F1, 0x02},
-{0x26F2, 0xF9},
-{0x26F3, 0x02},
-{0x2722, 0x59},
-{0x2723, 0x02},
-{0x2938, 0x55},
-{0x2939, 0x00},
-{0x293A, 0x17},
-{0x293B, 0x00},
-{0x293C, 0xD0},
-{0x293D, 0x00},
-{0x293E, 0x91},
-{0x293F, 0x00},
-{0x2940, 0x3C},
-{0x2941, 0x01},
-{0x2942, 0x0C},
-{0x2943, 0x01},
-{0x2944, 0xC1},
-{0x2945, 0x01},
-{0x2946, 0x76},
-{0x2947, 0x01},
-{0x2948, 0x83},
-{0x2949, 0x02},
-{0x294A, 0xFB},
-{0x294B, 0x01},
-{0x294C, 0xFD},
-{0x294D, 0x02},
-{0x294E, 0xBF},
-{0x294F, 0x02},
-{0x2A06, 0x25},
-{0x2A07, 0x03},
-{0x2A0C, 0xBE},
-{0x2A0D, 0x00},
-{0x2A0E, 0x7D},
-{0x2A0F, 0x00},
-{0x2A20, 0x00},
-{0x2A21, 0x00},
-{0x2A22, 0x7D},
-{0x2A23, 0x00},
-{0x2B11, 0x19},
-{0x2B13, 0x15},
-{0x2B14, 0x14},
-{0x2B15, 0x13},
-{0x2B16, 0x12},
-{0x2B17, 0x11},
-{0x2B18, 0x10},
-{0x2B19, 0x0F},
-{0x2B1A, 0x0E},
-{0x2B1B, 0x0D},
-{0x2B1C, 0x0C},
-{0x2B1D, 0x0B},
-{0x2B1E, 0x0A},
-{0x2B1F, 0x09},
-{0x2B20, 0x08},
-{0x2B21, 0x07},
-{0x2B22, 0x06},
-{0x2B23, 0x05},
-{0x2B24, 0x04},
-{0x2B25, 0x03},
-{0x2B26, 0x03},
-{0x2B38, 0x01},
-{0x2B45, 0xE3},
-{0x2B50, 0x01},
-{0x2B51, 0x00},
-{0x2B6D, 0x47},
-{0x2B70, 0x04},
-{0x2B71, 0x02},
-{0x2B72, 0x02},
-{0x2B7B, 0x42},
-{0x2B7F, 0x7F},
-{0x2B80, 0x94},
-{0x2B81, 0x06},
-{0x2B87, 0x1B},
-{0x2B88, 0x1A},
-{0x2B89, 0x17},
-{0x2B8A, 0x12},
-{0x2B8B, 0x01},
-{0x2B8D, 0x2B},
-{0x2B8E, 0x2B},
-{0x2B8F, 0x1B},
-{0x2B90, 0xBF},
-{0x2B91, 0x0F},
-{0x2B92, 0x73},
-{0x2B93, 0x0E},
-{0x2B94, 0xBF},
-{0x2B95, 0x07},
-{0x2B96, 0x73},
-{0x2B97, 0x0E},
-{0x2B98, 0xBF},
-{0x2B99, 0x57},
-{0x2B9B, 0x2A},
-{0x2BA8, 0xBC},
-{0x2BA9, 0x62},
-{0x2BC5, 0x80},
-{0x2BD5, 0x30},
-{0x2BD6, 0xF0},
-{0x2BD8, 0x5B},
-{0x2BD9, 0xF0},
-{0x2BDA, 0x21},
-{0x2BDB, 0x0E},
-{0x2BDC, 0x5E},
-{0x2BFE, 0x02},
-{0x2BFF, 0x00},
-{0x2C98, 0xE1},
-{0x2C99, 0x2E},
-{0x2C9B, 0x80},
-{0x2CA9, 0x80},
-{0x2CAA, 0x01},
-{0x2CBF, 0x08},
-{0x2D39, 0x0E},
-{0x2D50, 0x80},
-{0x2D54, 0x00},
-{0x2D5B, 0x58},
-{0x2D64, 0x66}, // GRBG
-{0x2D65, 0x80}, // GRBG
-{0x2DFC, 0x00}, // disable spmg
-{0x2DFD, 0x01},
-{0x2E24, 0x01}, // disable spmg
-{0x3000, 0x00},
-{0x3001, 0x00},
-{0x3002, 0x23},
-{0x3003, 0xA1},
-{0x3004, 0x00},
-{0x3005, 0x20},
-{0x3006, 0x6E},
-{0x3007, 0x00},
-{0x3008, 0x06},
-{0x3009, 0xB4},
-{0x300A, 0x1F},
-{0x300B, 0x00},
-{0x300C, 0x00},
-{0x300D, 0x1B},
-{0x300E, 0x90},
-{0x300F, 0x97},
-{0x3010, 0x00},
-{0x3011, 0x00},
-{0x3012, 0x11},
-{0x3013, 0x21},
-{0x3014, 0x00},
-{0x3015, 0x20},
-{0x3016, 0x94},
-{0x3017, 0x00},
-{0x3018, 0x30},
-{0x3019, 0x09},
-{0x301A, 0x46},
-{0x301B, 0x00},
-{0x30A0, 0xCD},
-{0x30A1, 0x0C},
-{0x30A2, 0xBA},
-{0x30A3, 0x0C},
-{0x30A4, 0x5F},
-{0x30A5, 0x00},
-{0x30A6, 0x43},
-{0x30A7, 0x00},
-{0x30A8, 0xC8},
-{0x30A9, 0x0A},
-{0x30AA, 0x0B},
-{0x30AB, 0x08},
-{0x30AC, 0x4B},
-{0x30AD, 0x03},
-{0x30AE, 0x37},
-{0x30AF, 0x03},
-{0x30B0, 0x65},
-{0x30B1, 0x09},
-{0x30B2, 0x7A},
-{0x30B3, 0x09},
-{0x30B4, 0x20},
-{0x30B5, 0x00},
-{0x30B6, 0x28},
-{0x30B7, 0x00},
-{0x30B8, 0x91},
-{0x30B9, 0x04},
-{0x30BA, 0x75},
-{0x30BB, 0x05},
-{0x30BC, 0x7C},
-{0x30BD, 0x01},
-{0x30BE, 0x87},
-{0x30BF, 0x01},
-{0x3370, 0x01},
-{0x3374, 0x00},
-{0x3375, 0x00},
-{0x3376, 0x01},
-{0x3377, 0x00},
-{0x3410, 0x80},
-{0x3411, 0x07},
-{0x3418, 0xB0},
-{0x3419, 0x04},
-{0x3450, 0x00}, /* use continuous clock */
-{0x34BE, 0x7A},
-{0x34BF, 0x02},
-{0x3584, 0x00},
-{0x3586, 0x00},
-{0x3587, 0x01},
-{0x3588, 0xE6},
-{0x3589, 0x00},
-{0x3590, 0x00},
-{0x3591, 0x00},
-{0x3594, 0x40},
-{0x3598, 0x03},
-{0x3599, 0x00},
-{0x359A, 0x80},
-{0x359B, 0x00},
-{0x359C, 0x00},
-{0x359D, 0x01},
-{0x359E, 0x00},
-{0x359F, 0x02},
-{0x35A0, 0x00},
-{0x35A1, 0x04},
-{0x35A2, 0x20},
-{0x35A3, 0x00},
-{0x35A4, 0x40},
-{0x35A5, 0x00},
-{0x35A6, 0x80},
-{0x35A7, 0x00},
-{0x35A8, 0x00},
-{0x35A9, 0x01},
-{0x35AC, 0x80},
-{0x35AD, 0x00},
-{0x35AE, 0x00},
-{0x35AF, 0x01},
-{0x35B0, 0x00},
-{0x35B1, 0x02},
-{0x35B2, 0x00},
-{0x35B3, 0x04},
-{0x35B4, 0x02},
-{0x35B5, 0x00},
-{0x35B6, 0x04},
-{0x35B7, 0x00},
-{0x35B8, 0x08},
-{0x35B9, 0x00},
-{0x35BA, 0x10},
-{0x35BB, 0x00},
-{0x35C8, 0x00},
-{0x35C9, 0x01},
-{0x35CA, 0x00},
-{0x35CB, 0x04},
-{0x35CC, 0x00},
-{0x35CD, 0x10},
-{0x35CE, 0x00},
-{0x35CF, 0x40},
-{0x35D0, 0x00},
-{0x35D1, 0x0C},
-{0x35D2, 0x00},
-{0x35D3, 0x0C},
-{0x35D4, 0x00},
-{0x35D5, 0x0C},
-{0x35D6, 0x00},
-{0x35D7, 0x0C},
-{0x35D8, 0x00},
-{0x35D9, 0x00},
-{0x35DA, 0x08},
-{0x35DB, 0x00},
-{0x35DC, 0xD8},
-{0x35DD, 0x0E},
-{0x35F0, 0x00},
-{0x35F1, 0x10},
-{0x35F2, 0x00},
-{0x35F3, 0x10},
-{0x35F4, 0x00},
-{0x35F5, 0x10},
-{0x35F6, 0x00},
-{0x35F7, 0x04},
-{0x35F8, 0x00},
-{0x35F9, 0x03},
-{0x35FA, 0x38},
-{0x35FB, 0x00},
-{0x35FC, 0xB3},
-{0x35FD, 0x01},
-{0x35FE, 0x00},
-{0x35FF, 0x00},
-{0x3600, 0x05},
-{0x3601, 0x06},
-{0x3604, 0x03},
-{0x3605, 0x00},
-{0x3608, 0x03},
-{0x3609, 0x00},
-{0x360C, 0x01},
-{0x360D, 0x00},
-{0x3610, 0x10},
-{0x3611, 0x01},
-{0x3612, 0x00},
-{0x3613, 0x00},
-{0x3614, 0x00},
-{0x3615, 0x00},
-{0x361C, 0x00},
-{0x361D, 0x01},
-{0x361E, 0x01},
-{0x361F, 0x00},
-{0x3620, 0x00},
-{0x3621, 0x01},
-{0x3622, 0xB0},
-{0x3623, 0x04},
-{0x3624, 0xDC},
-{0x3625, 0x05},
-{0x3626, 0x00},
-{0x3627, 0x01},
-{0x3628, 0xFF},
-{0x3629, 0x0F},
-{0x362A, 0x00},
-{0x362B, 0x10},
-{0x362C, 0x00},
-{0x362D, 0x01},
-{0x3630, 0x42},
-{0x3631, 0x00},
-{0x3632, 0x43},
-{0x3633, 0x00},
-{0x3634, 0x43},
-{0x3635, 0x00},
-{0x3636, 0x43},
-{0x3637, 0x00},
-{0x3638, 0x47},
-{0x3639, 0x00},
-{0x363A, 0x46},
-{0x363B, 0x00},
-{0x363C, 0x45},
-{0x363D, 0x00},
-{0x363E, 0x46},
-{0x363F, 0x00},
-{0x3650, 0x00},  // set to default from 0x01 FSYNC Enable/Disable
-{0x36C4, 0xFF},
-{0x36C5, 0x0F},
-{0x36C6, 0xFF},
-{0x36C7, 0x0F},
-{0x36C8, 0xFF},
-{0x36C9, 0x0F},
-{0x36CC, 0x00},
-{0x36CD, 0x00},
-{0x36CE, 0x00},
-{0x36CF, 0x00},
-{0x36D0, 0x00},
-{0x36D1, 0x00},
-{0x36D4, 0xFF},
-{0x36D5, 0x0F},
-{0x36D6, 0xFF},
-{0x36D7, 0x0F},
-{0x36D8, 0xFF},
-{0x36D9, 0x0F},
-{0x36DC, 0xFF},
-{0x36DD, 0x0F},
-{0x36DE, 0xFF},
-{0x36DF, 0x0F},
-{0x36E0, 0xFF},
-{0x36E1, 0x0F},
-{0x36E4, 0xFF},
-{0x36E5, 0x0F},
-{0x36E6, 0xFF},
-{0x36E7, 0x0F},
-{0x36E8, 0xFF},
-{0x36E9, 0x0F},
-{0x36EE, 0x00},
-{0x36EF, 0x00},
-{0x36F0, 0x00},
-{0x36F1, 0x80},
-{0x36F8, 0x00},
-{0x3700, 0x03},
-{0x3701, 0x05},
-{0x3702, 0x03},
-{0x3703, 0x04},
-{0x3704, 0x08},
-{0x3705, 0x03},
-{0x3706, 0x03},
-{0x3707, 0x03},
-{0x3708, 0x03},
-{0x3709, 0x03},
-{0x370A, 0x03},
-{0x370B, 0x03},
-{0x370C, 0x03},
-{0x370D, 0x03},
-{0x370E, 0x0E},
-{0x3718, 0x62},
-{0x3719, 0x4A},
-{0x371A, 0x38},
-{0x371B, 0x20},
-{0x371C, 0x64},
-{0x371D, 0x42},
-{0x371E, 0x32},
-{0x371F, 0x1B},
-{0x3720, 0x98},
-{0x3721, 0xA0},
-{0x3722, 0xA8},
-{0x3723, 0xB0},
-{0x3748, 0xA5},
-{0x3749, 0x9B},
-{0x374A, 0x91},
-{0x374B, 0x7D},
-{0x37C0, 0x00},
-{0x37C1, 0x00},
-{0x37C2, 0x00},
-{0x37C4, 0x00},
-{0x37C5, 0x00},
-{0x37C6, 0x00},
-{0x37C8, 0x00},
-{0x37C9, 0x00},
-{0x37CA, 0x00},
-{0x37CC, 0x00},
-{0x37CD, 0x00},
-{0x37CE, 0x00},
-{0x37D0, 0x00},
-{0x37D1, 0x00},
-{0x37D2, 0x00},
-{0x37D4, 0x00},
-{0x37D5, 0x00},
-{0x37D6, 0x00},
-{0x37D8, 0x00},
-{0x37D9, 0x00},
-{0x37DA, 0x00},
-{0x37DC, 0x00},
-{0x37DD, 0x00},
-{0x37DE, 0x00},
-{0x37E0, 0x00},
-{0x37E1, 0x00},
-{0x37E2, 0x00},
-{0x37E4, 0x00},
-{0x37E5, 0x00},
-{0x37E6, 0x00},
-{0x37E8, 0x00},
-{0x37E9, 0x00},
-{0x37EA, 0x00},
-{0x37EC, 0x00},
-{0x37ED, 0x00},
-{0x37EE, 0x00},
-{0x37F0, 0x00},
-{0x37F4, 0x00},
-{0x37F5, 0x1E},
-{0x37F6, 0x34},
-{0x37F7, 0x00},
-{0x37F8, 0xFF},
-{0x37F9, 0xFF},
-{0x37FA, 0x03},
-{0x37FC, 0x00},
-{0x37FD, 0x00},
-{0x37FE, 0x04},
-{0x3800, 0xFF},
-{0x3801, 0xFF},
-{0x3802, 0x03},
-{0x3804, 0x00},
-{0x3805, 0x00},
-{0x3806, 0x04},
-{0x3808, 0x00},
-{0x3809, 0x00},
-{0x380A, 0x00},
-{0x380C, 0x00},
-{0x380D, 0x00},
-{0x380E, 0x00},
-{0x3810, 0x00},
-{0x3811, 0x00},
-{0x3812, 0x00},
-{0x3814, 0x00},
-{0x3815, 0x00},
-{0x3816, 0x00},
-{0x3818, 0x00},
-{0x3819, 0x00},
-{0x381A, 0x00},
-{0x381C, 0x00},
-{0x381D, 0x00},
-{0x381E, 0x00},
-{0x3820, 0x00},
-{0x3821, 0x00},
-{0x3822, 0x00},
-{0x3824, 0x00},
-{0x3825, 0x00},
-{0x3826, 0x00},
-{0x3828, 0x00},
-{0x3829, 0x00},
-{0x382A, 0x00},
-{0x382C, 0x00},
-{0x382D, 0x00},
-{0x382E, 0x00},
-{0x3830, 0x00},
-{0x3831, 0x00},
-{0x3832, 0x00},
-{0x3834, 0x00},
-{0x3835, 0x00},
-{0x3836, 0x00},
-{0x3838, 0xE7},
-{0x3839, 0xFF},
-{0x383A, 0x0C},
-{0x383B, 0x00},
-{0x383C, 0xFD},
-{0x383D, 0xFF},
-{0x383E, 0xF7},
-{0x383F, 0xFF},
-{0x3840, 0x00},
-{0x3841, 0x00},
-{0x3842, 0x00},
-{0x3843, 0x00},
-{0x3844, 0x00},
-{0x3845, 0x00},
-{0x3846, 0x00},
-{0x3847, 0x00},
-{0x3848, 0xB6},
-{0x3849, 0xFF},
-{0x384A, 0xB6},
-{0x384B, 0xFF},
-{0x384C, 0xB3},
-{0x384D, 0xFF},
-{0x384E, 0xAF},
-{0x384F, 0xFF},
-{0x3850, 0xFF},
-{0x3851, 0x0F},
-{0x3852, 0x00},
-{0x3853, 0x10},
-{0x3854, 0xFF},
-{0x3855, 0x0F},
-{0x3856, 0x00},
-{0x3857, 0x10},
-{0x3858, 0xFF},
-{0x3859, 0x0F},
-{0x385A, 0x00},
-{0x385B, 0x10},
-{0x385C, 0x02},
-{0x385D, 0x00},
-{0x385E, 0x06},
-{0x385F, 0x00},
-{0x3860, 0x06},
-{0x3861, 0x00},
-{0x3862, 0x08},
-{0x3863, 0x00},
-{0x3864, 0x02},
-{0x3865, 0x00},
-{0x3870, 0x00},
-{0x3871, 0x01},
-{0x38A0, 0x01},
-{0x38A1, 0x01},
-{0x38A2, 0x00},
-{0x38A3, 0x01},
-{0x38A4, 0x03},
-{0x38A5, 0x00},
-{0x38A6, 0x04},
-{0x38A7, 0x04},
-{0x38A8, 0x00},
-{0x38A9, 0x00},
-{0x38AC, 0x00},
-{0x38AD, 0x00},
-{0x38AE, 0x01},
-{0x38B0, 0x02},
-{0x38B2, 0x06},
-{0x38B3, 0x00},
-{0x38B4, 0x02},
-{0x38B5, 0x00},
-{0x38B6, 0x01},
-{0x38B7, 0x00},
-{0x38B8, 0x01},
-{0x38B9, 0x00},
-{0x38BA, 0x20},
-{0x38BB, 0x00},
-{0x38BC, 0x14},
-{0x38BD, 0x00},
-{0x38BE, 0x0C},
-{0x38BF, 0x00},
-{0x38C0, 0x09},
-{0x38C1, 0x00},
-{0x38C2, 0x27},
-{0x38C3, 0x00},
-{0x38C4, 0x20},
-{0x38C5, 0x00},
-{0x38C6, 0x13},
-{0x38C7, 0x00},
-{0x38C8, 0x0C},
-{0x38C9, 0x00},
-{0x38CA, 0x35},
-{0x38CB, 0x00},
-{0x38CC, 0x25},
-{0x38CD, 0x00},
-{0x38CE, 0x1B},
-{0x38CF, 0x00},
-{0x38D0, 0x11},
-{0x38D1, 0x00},
-{0x38D2, 0x4E},
-{0x38D3, 0x00},
-{0x38D4, 0x31},
-{0x38D5, 0x00},
-{0x38D6, 0x25},
-{0x38D7, 0x00},
-{0x38D8, 0x18},
-{0x38D9, 0x00},
-{0x38DA, 0x6E},
-{0x38DB, 0x00},
-{0x38DC, 0x46},
-{0x38DD, 0x00},
-{0x38DE, 0x32},
-{0x38DF, 0x00},
-{0x38E0, 0x22},
-{0x38E1, 0x00},
-{0x38E2, 0x93},
-{0x38E3, 0x00},
-{0x38E4, 0x5F},
-{0x38E5, 0x00},
-{0x38E6, 0x44},
-{0x38E7, 0x00},
-{0x38E8, 0x31},
-{0x38E9, 0x00},
-{0x38EA, 0xD8},
-{0x38EB, 0x00},
-{0x38EC, 0x8D},
-{0x38ED, 0x00},
-{0x38EE, 0x6A},
-{0x38EF, 0x00},
-{0x38F0, 0x49},
-{0x38F1, 0x00},
-{0x38F2, 0x22},
-{0x38F3, 0x01},
-{0x38F4, 0xC8},
-{0x38F5, 0x00},
-{0x38F6, 0x8E},
-{0x38F7, 0x00},
-{0x38F8, 0x60},
-{0x38F9, 0x00},
-{0x38FA, 0x00},
-{0x38FB, 0x01},
-{0x38FC, 0x00},
-{0x38FD, 0x01},
-{0x38FE, 0x00},
-{0x38FF, 0x01},
-{0x3900, 0x00},
-{0x3901, 0x01},
-{0x3902, 0x60},
-{0x3903, 0x00},
-{0x3904, 0x25},
-{0x3905, 0x00},
-{0x3906, 0x18},
-{0x3907, 0x00},
-{0x3908, 0x10},
-{0x3909, 0x00},
-{0x390A, 0xFF},
-{0x390B, 0x00},
-{0x390C, 0xD5},
-{0x390D, 0x00},
-{0x390E, 0xAA},
-{0x390F, 0x00},
-{0x3910, 0x85},
-{0x3911, 0x00},
-{0x3912, 0xFF},
-{0x3913, 0x00},
-{0x3914, 0xD5},
-{0x3915, 0x00},
-{0x3916, 0xAA},
-{0x3917, 0x00},
-{0x3918, 0x85},
-{0x3919, 0x00},
-{0x391A, 0xFF},
-{0x391B, 0x00},
-{0x391C, 0xD5},
-{0x391D, 0x00},
-{0x391E, 0xAA},
-{0x391F, 0x00},
-{0x3920, 0x85},
-{0x3921, 0x00},
-{0x3922, 0x40},
-{0x3923, 0x00},
-{0x3924, 0x40},
-{0x3925, 0x00},
-{0x3926, 0x40},
-{0x3927, 0x00},
-{0x3928, 0x40},
-{0x3929, 0x00},
-{0x392A, 0x80},
-{0x392B, 0x00},
-{0x392C, 0x80},
-{0x392D, 0x00},
-{0x392E, 0x80},
-{0x392F, 0x00},
-{0x3930, 0x80},
-{0x3931, 0x00},
-{0x3932, 0x4C},
-{0x3933, 0x4C},
-{0x3934, 0x4C},
-{0x3940, 0x01},
-{0x3941, 0x01},
-{0x3942, 0x00},
-{0x3943, 0x01},
-{0x3944, 0x03},
-{0x3945, 0x00},
-{0x3946, 0x04},
-{0x3947, 0x04},
-{0x3948, 0x00},
-{0x3949, 0x00},
-{0x394C, 0x00},
-{0x394D, 0x00},
-{0x394E, 0x01},
-{0x3950, 0x03},
-{0x3952, 0x05},
-{0x3953, 0x00},
-{0x3954, 0x02},
-{0x3955, 0x00},
-{0x3956, 0x02},
-{0x3957, 0x00},
-{0x3958, 0x01},
-{0x3959, 0x00},
-{0x395A, 0x12},
-{0x395B, 0x00},
-{0x395C, 0x09},
-{0x395D, 0x00},
-{0x395E, 0x07},
-{0x395F, 0x00},
-{0x3960, 0x04},
-{0x3961, 0x00},
-{0x3962, 0x1A},
-{0x3963, 0x00},
-{0x3964, 0x0E},
-{0x3965, 0x00},
-{0x3966, 0x09},
-{0x3967, 0x00},
-{0x3968, 0x06},
-{0x3969, 0x00},
-{0x396A, 0x21},
-{0x396B, 0x00},
-{0x396C, 0x11},
-{0x396D, 0x00},
-{0x396E, 0x0C},
-{0x396F, 0x00},
-{0x3970, 0x08},
-{0x3971, 0x00},
-{0x3972, 0x29},
-{0x3973, 0x00},
-{0x3974, 0x18},
-{0x3975, 0x00},
-{0x3976, 0x11},
-{0x3977, 0x00},
-{0x3978, 0x0D},
-{0x3979, 0x00},
-{0x397A, 0x3A},
-{0x397B, 0x00},
-{0x397C, 0x21},
-{0x397D, 0x00},
-{0x397E, 0x19},
-{0x397F, 0x00},
-{0x3980, 0x12},
-{0x3981, 0x00},
-{0x3982, 0x52},
-{0x3983, 0x00},
-{0x3984, 0x2F},
-{0x3985, 0x00},
-{0x3986, 0x24},
-{0x3987, 0x00},
-{0x3988, 0x18},
-{0x3989, 0x00},
-{0x398A, 0x78},
-{0x398B, 0x00},
-{0x398C, 0x44},
-{0x398D, 0x00},
-{0x398E, 0x34},
-{0x398F, 0x00},
-{0x3990, 0x27},
-{0x3991, 0x00},
-{0x3992, 0xA1},
-{0x3993, 0x00},
-{0x3994, 0x61},
-{0x3995, 0x00},
-{0x3996, 0x4E},
-{0x3997, 0x00},
-{0x3998, 0x37},
-{0x3999, 0x00},
-{0x399A, 0x00},
-{0x399B, 0x01},
-{0x399C, 0x00},
-{0x399D, 0x01},
-{0x399E, 0x00},
-{0x399F, 0x01},
-{0x39A0, 0x00},
-{0x39A1, 0x01},
-{0x39A2, 0x60},
-{0x39A3, 0x00},
-{0x39A4, 0x20},
-{0x39A5, 0x00},
-{0x39A6, 0x15},
-{0x39A7, 0x00},
-{0x39A8, 0x10},
-{0x39A9, 0x00},
-{0x39AA, 0xFF},
-{0x39AB, 0x00},
-{0x39AC, 0xD5},
-{0x39AD, 0x00},
-{0x39AE, 0xAA},
-{0x39AF, 0x00},
-{0x39B0, 0x85},
-{0x39B1, 0x00},
-{0x39B2, 0xFF},
-{0x39B3, 0x00},
-{0x39B4, 0xD5},
-{0x39B5, 0x00},
-{0x39B6, 0xAA},
-{0x39B7, 0x00},
-{0x39B8, 0x85},
-{0x39B9, 0x00},
-{0x39BA, 0xFF},
-{0x39BB, 0x00},
-{0x39BC, 0xD5},
-{0x39BD, 0x00},
-{0x39BE, 0xAA},
-{0x39BF, 0x00},
-{0x39C0, 0x85},
-{0x39C1, 0x00},
-{0x39C2, 0x40},
-{0x39C3, 0x00},
-{0x39C4, 0x40},
-{0x39C5, 0x00},
-{0x39C6, 0x40},
-{0x39C7, 0x00},
-{0x39C8, 0x40},
-{0x39C9, 0x00},
-{0x39CA, 0x80},
-{0x39CB, 0x00},
-{0x39CC, 0x80},
-{0x39CD, 0x00},
-{0x39CE, 0x80},
-{0x39CF, 0x00},
-{0x39D0, 0x80},
-{0x39D1, 0x00},
-{0x39D2, 0x4C},
-{0x39D3, 0x4C},
-{0x39D4, 0x4C},
-{0x39E0, 0x01},
-{0x39E1, 0x01},
-{0x39E4, 0x40},
-{0x39E5, 0x01},
-{0x39E6, 0x01},
-{0x39E8, 0x00},
-{0x39E9, 0x01},
-{0x39EA, 0x00},
-{0x39EB, 0x00},
-{0x39EC, 0x01},
-{0x39ED, 0x00},
-{0x39EE, 0x01},
-{0x39F0, 0x03},
-{0x39F1, 0x04},
-{0x39F2, 0x0E},
-{0x39F4, 0x0B},
-{0x39F5, 0x00},
-{0x39F6, 0x07},
-{0x39F7, 0x00},
-{0x39F8, 0x05},
-{0x39F9, 0x00},
-{0x39FA, 0x02},
-{0x39FB, 0x00},
-{0x39FC, 0x34},
-{0x39FD, 0x00},
-{0x39FE, 0x1B},
-{0x39FF, 0x00},
-{0x3A00, 0x13},
-{0x3A01, 0x00},
-{0x3A02, 0x09},
-{0x3A03, 0x00},
-{0x3A04, 0x4D},
-{0x3A05, 0x00},
-{0x3A06, 0x22},
-{0x3A07, 0x00},
-{0x3A08, 0x14},
-{0x3A09, 0x00},
-{0x3A0A, 0x09},
-{0x3A0B, 0x00},
-{0x3A0C, 0x61},
-{0x3A0D, 0x00},
-{0x3A0E, 0x22},
-{0x3A0F, 0x00},
-{0x3A10, 0x15},
-{0x3A11, 0x00},
-{0x3A12, 0x0A},
-{0x3A13, 0x00},
-{0x3A14, 0x6D},
-{0x3A15, 0x00},
-{0x3A16, 0x24},
-{0x3A17, 0x00},
-{0x3A18, 0x16},
-{0x3A19, 0x00},
-{0x3A1A, 0x0B},
-{0x3A1B, 0x00},
-{0x3A1C, 0x6F},
-{0x3A1D, 0x00},
-{0x3A1E, 0x26},
-{0x3A1F, 0x00},
-{0x3A20, 0x18},
-{0x3A21, 0x00},
-{0x3A22, 0x0E},
-{0x3A23, 0x00},
-{0x3A24, 0x72},
-{0x3A25, 0x00},
-{0x3A26, 0x2B},
-{0x3A27, 0x00},
-{0x3A28, 0x1E},
-{0x3A29, 0x00},
-{0x3A2A, 0x13},
-{0x3A2B, 0x00},
-{0x3A2C, 0x7B},
-{0x3A2D, 0x00},
-{0x3A2E, 0x37},
-{0x3A2F, 0x00},
-{0x3A30, 0x29},
-{0x3A31, 0x00},
-{0x3A32, 0x1F},
-{0x3A33, 0x00},
-{0x3A34, 0x94},
-{0x3A35, 0x00},
-{0x3A36, 0x4E},
-{0x3A37, 0x00},
-{0x3A38, 0x42},
-{0x3A39, 0x00},
-{0x3A3A, 0x36},
-{0x3A3B, 0x00},
-{0x3A3C, 0x00},
-{0x3A3D, 0x01},
-{0x3A3E, 0x00},
-{0x3A3F, 0x01},
-{0x3A40, 0x00},
-{0x3A41, 0x01},
-{0x3A42, 0x00},
-{0x3A43, 0x01},
-{0x3A44, 0x70},
-{0x3A45, 0x00},
-{0x3A46, 0x25},
-{0x3A47, 0x00},
-{0x3A48, 0x18},
-{0x3A49, 0x00},
-{0x3A4A, 0x10},
-{0x3A4B, 0x00},
-{0x3A4C, 0xFF},
-{0x3A4D, 0x00},
-{0x3A4E, 0xD5},
-{0x3A4F, 0x00},
-{0x3A50, 0xAA},
-{0x3A51, 0x00},
-{0x3A52, 0x85},
-{0x3A53, 0x00},
-{0x3A54, 0xFF},
-{0x3A55, 0x00},
-{0x3A56, 0xD5},
-{0x3A57, 0x00},
-{0x3A58, 0xAA},
-{0x3A59, 0x00},
-{0x3A5A, 0x85},
-{0x3A5B, 0x00},
-{0x3A5C, 0xFF},
-{0x3A5D, 0x00},
-{0x3A5E, 0xD5},
-{0x3A5F, 0x00},
-{0x3A60, 0xAA},
-{0x3A61, 0x00},
-{0x3A62, 0x85},
-{0x3A63, 0x00},
-{0x3A64, 0x1C},
-{0x3A65, 0x00},
-{0x3A66, 0x13},
-{0x3A67, 0x00},
-{0x3A68, 0x0D},
-{0x3A69, 0x00},
-{0x3A6A, 0x07},
-{0x3A6B, 0x00},
-{0x3A6C, 0x0D},
-{0x3A6D, 0x00},
-{0x3A6E, 0x0B},
-{0x3A6F, 0x00},
-{0x3A70, 0x06},
-{0x3A71, 0x00},
-{0x3A72, 0x05},
-{0x3A73, 0x00},
-{0x3A74, 0x19},
-{0x3A75, 0x00},
-{0x3A76, 0x14},
-{0x3A77, 0x00},
-{0x3A78, 0x0F},
-{0x3A79, 0x00},
-{0x3A7A, 0x0A},
-{0x3A7B, 0x00},
-{0x3A7C, 0x80},
-{0x3A7D, 0x00},
-{0x3A7E, 0x80},
-{0x3A7F, 0x00},
-{0x3A80, 0x80},
-{0x3A81, 0x00},
-{0x3A82, 0x80},
-{0x3A83, 0x00},
-{0x3A84, 0x08},
-{0x3A85, 0x00},
-{0x3A86, 0x05},
-{0x3A87, 0x00},
-{0x3A88, 0x04},
-{0x3A89, 0x00},
-{0x3A8A, 0x03},
-{0x3A8B, 0x00},
-{0x3A8C, 0xCD},
-{0x3A8D, 0x00},
-{0x3A8E, 0xAA},
-{0x3A8F, 0x00},
-{0x3A90, 0x8C},
-{0x3A91, 0x00},
-{0x3A92, 0x64},
-{0x3A93, 0x00},
-{0x3A94, 0xCD},
-{0x3A95, 0x00},
-{0x3A96, 0xAA},
-{0x3A97, 0x00},
-{0x3A98, 0x8C},
-{0x3A99, 0x00},
-{0x3A9A, 0x64},
-{0x3A9B, 0x00},
-{0x3A9C, 0x08},
-{0x3A9D, 0x10},
-{0x3A9E, 0x4C},
-{0x3A9F, 0x4C},
-{0x3AA0, 0x4C},
-{0x3AA1, 0x04},
-{0x3AA2, 0x04},
-{0x3AC0, 0x01},
-{0x3AC4, 0x81},
-{0x3AC5, 0x00},
-{0x3AC6, 0x00},
-{0x3AC7, 0x00},
-{0x3AC8, 0x00},
-{0x3AC9, 0x00},
-{0x3ACA, 0x00},
-{0x3ACB, 0x00},
-{0x3ACC, 0x02},
-{0x3ACD, 0x00},
-{0x3ACE, 0x81},
-{0x3ACF, 0x00},
-{0x3AD0, 0x00},
-{0x3AD1, 0x00},
-{0x3AD2, 0xFD},
-{0x3AD3, 0x03},
-{0x3AD4, 0x02},
-{0x3AD5, 0x00},
-{0x3AD6, 0x00},
-{0x3AD7, 0x00},
-{0x3AD8, 0x81},
-{0x3AD9, 0x00},
-{0x3ADA, 0xFD},
-{0x3ADB, 0x03},
-{0x3ADC, 0xFF},
-{0x3ADD, 0x03},
-{0x3ADE, 0x01},
-{0x3ADF, 0x00},
-{0x3AE0, 0x01},
-{0x3AE1, 0x00},
-{0x3AE2, 0x7E},
-{0x3AE3, 0x00},
-{0x3AF4, 0x00},
-{0x3AF6, 0x40},
-{0x3AF7, 0x1E},
-{0x3AF8, 0x00},
-{0x3AFA, 0x00},
-{0x3AFB, 0x00},
-{0x3AFC, 0x00},
-{0x3AFD, 0x00},
-{0x3AFE, 0x00},
-{0x3AFF, 0x00},
-{0x3B00, 0x00},
-{0x3B01, 0x00},
-{0x3B02, 0x00},
-{0x3B03, 0x00},
-{0x3B04, 0x00},
-{0x3B05, 0x00},
-{0x3B06, 0x00},
-{0x3B07, 0x00},
-{0x3B08, 0x00},
-{0x3B09, 0x00},
-{0x3B0A, 0x00},
-{0x3B0B, 0x00},
-{0x3B0C, 0x00},
-{0x3B0D, 0x00},
-{0x3B0E, 0x00},
-{0x3B0F, 0x00},
-{0x3B10, 0x00},
-{0x3B11, 0x00},
-{0x3B12, 0x00},
-{0x3B13, 0x00},
-{0x3B14, 0x00},
-{0x3B15, 0x00},
-{0x3B16, 0x00},
-{0x3B17, 0x00},
-{0x3B18, 0x00},
-{0x3B19, 0x00},
-{0x3B1A, 0x00},
-{0x3B1B, 0x00},
-{0x3B1C, 0x00},
-{0x3B1D, 0x00},
-{0x3B1E, 0x00},
-{0x3B1F, 0x00},
-{0x3B20, 0x00},
-{0x3B21, 0x00},
-{0x3B22, 0x00},
-{0x3B23, 0x00},
-{0x3B24, 0x00},
-{0x3B25, 0x00},
-{0x3B26, 0x00},
-{0x3B27, 0x00},
-{0x3B28, 0x00},
-{0x3B29, 0x00},
-{0x3B2A, 0x00},
-{0x3B2C, 0x00},
-{0x3B2E, 0x00},
-{0x3B30, 0x00},
-{0x3B32, 0x0C},
-{0x4000, 0xD0},
-{0x4001, 0xC8},
-{0x4002, 0xC8},
-{0x4003, 0xC6},
-{0x4004, 0xBA},
-{0x4005, 0xB5},
-{0x4006, 0xB5},
-{0x4007, 0xB4},
-{0x4008, 0xAA},
-{0x4009, 0xA7},
-{0x400A, 0xA7},
-{0x400B, 0xA7},
-{0x400C, 0xA1},
-{0x400D, 0x9F},
-{0x400E, 0x9F},
-{0x400F, 0x9F},
-{0x4010, 0x9C},
-{0x4011, 0x9B},
-{0x4012, 0x9B},
-{0x4013, 0x9B},
-{0x4014, 0x9F},
-{0x4015, 0x9E},
-{0x4016, 0x9D},
-{0x4017, 0x9E},
-{0x4018, 0xA7},
-{0x4019, 0xA4},
-{0x401A, 0xA4},
-{0x401B, 0xA4},
-{0x401C, 0xB5},
-{0x401D, 0xB0},
-{0x401E, 0xB0},
-{0x401F, 0xB0},
-{0x4020, 0xC9},
-{0x4021, 0xC1},
-{0x4022, 0xC1},
-{0x4023, 0xC0},
-{0x4024, 0xC3},
-{0x4025, 0xBB},
-{0x4026, 0xBC},
-{0x4027, 0xBA},
-{0x4028, 0xA5},
-{0x4029, 0xA1},
-{0x402A, 0xA1},
-{0x402B, 0xA0},
-{0x402C, 0x99},
-{0x402D, 0x97},
-{0x402E, 0x97},
-{0x402F, 0x96},
-{0x4030, 0x8F},
-{0x4031, 0x8E},
-{0x4032, 0x8E},
-{0x4033, 0x8E},
-{0x4034, 0x8A},
-{0x4035, 0x8A},
-{0x4036, 0x8A},
-{0x4037, 0x8A},
-{0x4038, 0x8D},
-{0x4039, 0x8D},
-{0x403A, 0x8D},
-{0x403B, 0x8D},
-{0x403C, 0x96},
-{0x403D, 0x94},
-{0x403E, 0x94},
-{0x403F, 0x94},
-{0x4040, 0xA2},
-{0x4041, 0x9E},
-{0x4042, 0x9E},
-{0x4043, 0x9D},
-{0x4044, 0xBC},
-{0x4045, 0xB5},
-{0x4046, 0xB5},
-{0x4047, 0xB4},
-{0x4048, 0xBC},
-{0x4049, 0xB5},
-{0x404A, 0xB5},
-{0x404B, 0xB3},
-{0x404C, 0xA3},
-{0x404D, 0x9F},
-{0x404E, 0x9F},
-{0x404F, 0x9E},
-{0x4050, 0x95},
-{0x4051, 0x93},
-{0x4052, 0x93},
-{0x4053, 0x93},
-{0x4054, 0x89},
-{0x4055, 0x88},
-{0x4056, 0x88},
-{0x4057, 0x88},
-{0x4058, 0x81},
-{0x4059, 0x81},
-{0x405A, 0x81},
-{0x405B, 0x81},
-{0x405C, 0x86},
-{0x405D, 0x86},
-{0x405E, 0x86},
-{0x405F, 0x86},
-{0x4060, 0x92},
-{0x4061, 0x90},
-{0x4062, 0x90},
-{0x4063, 0x90},
-{0x4064, 0x9E},
-{0x4065, 0x9B},
-{0x4066, 0x9B},
-{0x4067, 0x9A},
-{0x4068, 0xB5},
-{0x4069, 0xAE},
-{0x406A, 0xAE},
-{0x406B, 0xAE},
-{0x406C, 0xBE},
-{0x406D, 0xB6},
-{0x406E, 0xB7},
-{0x406F, 0xB5},
-{0x4070, 0xA4},
-{0x4071, 0xA0},
-{0x4072, 0xA0},
-{0x4073, 0x9F},
-{0x4074, 0x96},
-{0x4075, 0x94},
-{0x4076, 0x94},
-{0x4077, 0x94},
-{0x4078, 0x8A},
-{0x4079, 0x8A},
-{0x407A, 0x8A},
-{0x407B, 0x8A},
-{0x407C, 0x83},
-{0x407D, 0x83},
-{0x407E, 0x83},
-{0x407F, 0x83},
-{0x4080, 0x88},
-{0x4081, 0x87},
-{0x4082, 0x87},
-{0x4083, 0x88},
-{0x4084, 0x93},
-{0x4085, 0x91},
-{0x4086, 0x91},
-{0x4087, 0x91},
-{0x4088, 0xA0},
-{0x4089, 0x9C},
-{0x408A, 0x9C},
-{0x408B, 0x9C},
-{0x408C, 0xB6},
-{0x408D, 0xAF},
-{0x408E, 0xAF},
-{0x408F, 0xAF},
-{0x4090, 0xCA},
-{0x4091, 0xC1},
-{0x4092, 0xC1},
-{0x4093, 0xBF},
-{0x4094, 0xAB},
-{0x4095, 0xA5},
-{0x4096, 0xA5},
-{0x4097, 0xA4},
-{0x4098, 0x9E},
-{0x4099, 0x9A},
-{0x409A, 0x9A},
-{0x409B, 0x9A},
-{0x409C, 0x94},
-{0x409D, 0x92},
-{0x409E, 0x92},
-{0x409F, 0x92},
-{0x40A0, 0x8F},
-{0x40A1, 0x8E},
-{0x40A2, 0x8E},
-{0x40A3, 0x8E},
-{0x40A4, 0x92},
-{0x40A5, 0x90},
-{0x40A6, 0x90},
-{0x40A7, 0x90},
-{0x40A8, 0x9A},
-{0x40A9, 0x97},
-{0x40AA, 0x97},
-{0x40AB, 0x97},
-{0x40AC, 0xA6},
-{0x40AD, 0xA0},
-{0x40AE, 0xA0},
-{0x40AF, 0xA0},
-{0x40B0, 0xC1},
-{0x40B1, 0xB9},
-{0x40B2, 0xB9},
-{0x40B3, 0xB8},
-{0x40B4, 0xDD},
-{0x40B5, 0xD2},
-{0x40B6, 0xD2},
-{0x40B7, 0xCF},
-{0x40B8, 0xC6},
-{0x40B9, 0xBF},
-{0x40BA, 0xBF},
-{0x40BB, 0xBD},
-{0x40BC, 0xB5},
-{0x40BD, 0xB0},
-{0x40BE, 0xB0},
-{0x40BF, 0xAF},
-{0x40C0, 0xAB},
-{0x40C1, 0xA8},
-{0x40C2, 0xA8},
-{0x40C3, 0xA7},
-{0x40C4, 0xA7},
-{0x40C5, 0xA3},
-{0x40C6, 0xA3},
-{0x40C7, 0xA3},
-{0x40C8, 0xA9},
-{0x40C9, 0xA6},
-{0x40CA, 0xA6},
-{0x40CB, 0xA6},
-{0x40CC, 0xB0},
-{0x40CD, 0xAB},
-{0x40CE, 0xAB},
-{0x40CF, 0xAB},
-{0x40D0, 0xBF},
-{0x40D1, 0xB7},
-{0x40D2, 0xB7},
-{0x40D3, 0xB7},
-{0x40D4, 0xD2},
-{0x40D5, 0xC8},
-{0x40D6, 0xC7},
-{0x40D7, 0xC7},
-{0x4100, 0x80},
-{0x4101, 0x80},
-{0x4102, 0x80},
-{0x4103, 0x80},
-{0x4104, 0x80},
-{0x4105, 0x80},
-{0x4106, 0x80},
-{0x4107, 0x80},
-{0x4108, 0x80},
-{0x4109, 0x80},
-{0x410A, 0x80},
-{0x410B, 0x80},
-{0x410C, 0x80},
-{0x410D, 0x80},
-{0x410E, 0x80},
-{0x410F, 0x80},
-{0x4110, 0x80},
-{0x4111, 0x80},
-{0x4112, 0x80},
-{0x4113, 0x80},
-{0x4114, 0x80},
-{0x4115, 0x80},
-{0x4116, 0x80},
-{0x4117, 0x80},
-{0x4118, 0x80},
-{0x4119, 0x80},
-{0x411A, 0x80},
-{0x411B, 0x80},
-{0x411C, 0x80},
-{0x411D, 0x80},
-{0x411E, 0x80},
-{0x411F, 0x80},
-{0x4120, 0x80},
-{0x4121, 0x80},
-{0x4122, 0x80},
-{0x4123, 0x80},
-{0x4124, 0x80},
-{0x4125, 0x80},
-{0x4126, 0x80},
-{0x4127, 0x80},
-{0x4128, 0x80},
-{0x4129, 0x80},
-{0x412A, 0x80},
-{0x412B, 0x80},
-{0x412C, 0x80},
-{0x412D, 0x80},
-{0x412E, 0x80},
-{0x412F, 0x80},
-{0x4130, 0x80},
-{0x4131, 0x80},
-{0x4132, 0x80},
-{0x4133, 0x80},
-{0x4134, 0x80},
-{0x4135, 0x80},
-{0x4136, 0x80},
-{0x4137, 0x80},
-{0x4138, 0x80},
-{0x4139, 0x80},
-{0x413A, 0x80},
-{0x413B, 0x80},
-{0x413C, 0x80},
-{0x413D, 0x80},
-{0x413E, 0x80},
-{0x413F, 0x80},
-{0x4140, 0x80},
-{0x4141, 0x80},
-{0x4142, 0x80},
-{0x4143, 0x80},
-{0x4144, 0x80},
-{0x4145, 0x80},
-{0x4146, 0x80},
-{0x4147, 0x80},
-{0x4148, 0x80},
-{0x4149, 0x80},
-{0x414A, 0x80},
-{0x414B, 0x80},
-{0x414C, 0x80},
-{0x414D, 0x80},
-{0x414E, 0x80},
-{0x414F, 0x80},
-{0x4150, 0x80},
-{0x4151, 0x80},
-{0x4152, 0x80},
-{0x4153, 0x80},
-{0x4154, 0x80},
-{0x4155, 0x80},
-{0x4156, 0x80},
-{0x4157, 0x80},
-{0x4158, 0x80},
-{0x4159, 0x80},
-{0x415A, 0x80},
-{0x415B, 0x80},
-{0x415C, 0x80},
-{0x415D, 0x80},
-{0x415E, 0x80},
-{0x415F, 0x80},
-{0x4160, 0x80},
-{0x4161, 0x80},
-{0x4162, 0x80},
-{0x4163, 0x80},
-{0x4164, 0x80},
-{0x4165, 0x80},
-{0x4166, 0x80},
-{0x4167, 0x80},
-{0x4168, 0x80},
-{0x4169, 0x80},
-{0x416A, 0x80},
-{0x416B, 0x80},
-{0x416C, 0x80},
-{0x416D, 0x80},
-{0x416E, 0x80},
-{0x416F, 0x80},
-{0x4170, 0x80},
-{0x4171, 0x80},
-{0x4172, 0x80},
-{0x4173, 0x80},
-{0x4174, 0x80},
-{0x4175, 0x80},
-{0x4176, 0x80},
-{0x4177, 0x80},
-{0x4178, 0x80},
-{0x4179, 0x80},
-{0x417A, 0x80},
-{0x417B, 0x80},
-{0x417C, 0x80},
-{0x417D, 0x80},
-{0x417E, 0x80},
-{0x417F, 0x80},
-{0x4180, 0x80},
-{0x4181, 0x80},
-{0x4182, 0x80},
-{0x4183, 0x80},
-{0x4184, 0x80},
-{0x4185, 0x80},
-{0x4186, 0x80},
-{0x4187, 0x80},
-{0x4188, 0x80},
-{0x4189, 0x80},
-{0x418A, 0x80},
-{0x418B, 0x80},
-{0x418C, 0x80},
-{0x418D, 0x80},
-{0x418E, 0x80},
-{0x418F, 0x80},
-{0x4190, 0x80},
-{0x4191, 0x80},
-{0x4192, 0x80},
-{0x4193, 0x80},
-{0x4194, 0x80},
-{0x4195, 0x80},
-{0x4196, 0x80},
-{0x4197, 0x80},
-{0x4198, 0x80},
-{0x4199, 0x80},
-{0x419A, 0x80},
-{0x419B, 0x80},
-{0x419C, 0x80},
-{0x419D, 0x80},
-{0x419E, 0x80},
-{0x419F, 0x80},
-{0x41A0, 0x80},
-{0x41A1, 0x80},
-{0x41A2, 0x80},
-{0x41A3, 0x80},
-{0x41A4, 0x80},
-{0x41A5, 0x80},
-{0x41A6, 0x80},
-{0x41A7, 0x80},
-{0x41A8, 0x80},
-{0x41A9, 0x80},
-{0x41AA, 0x80},
-{0x41AB, 0x80},
-{0x41AC, 0x80},
-{0x41AD, 0x80},
-{0x41AE, 0x80},
-{0x41AF, 0x80},
-{0x41B0, 0x80},
-{0x41B1, 0x80},
-{0x41B2, 0x80},
-{0x41B3, 0x80},
-{0x41B4, 0x80},
-{0x41B5, 0x80},
-{0x41B6, 0x80},
-{0x41B7, 0x80},
-{0x41B8, 0x80},
-{0x41B9, 0x80},
-{0x41BA, 0x80},
-{0x41BB, 0x80},
-{0x41BC, 0x80},
-{0x41BD, 0x80},
-{0x41BE, 0x80},
-{0x41BF, 0x80},
-{0x41C0, 0x80},
-{0x41C1, 0x80},
-{0x41C2, 0x80},
-{0x41C3, 0x80},
-{0x41C4, 0x80},
-{0x41C5, 0x80},
-{0x41C6, 0x80},
-{0x41C7, 0x80},
-{0x41C8, 0x80},
-{0x41C9, 0x80},
-{0x41CA, 0x80},
-{0x41CB, 0x80},
-{0x41CC, 0x80},
-{0x41CD, 0x80},
-{0x41CE, 0x80},
-{0x41CF, 0x80},
-{0x41D0, 0x80},
-{0x41D1, 0x80},
-{0x41D2, 0x80},
-{0x41D3, 0x80},
-{0x41D4, 0x80},
-{0x41D5, 0x80},
-{0x41D6, 0x80},
-{0x41D7, 0x80},
-{0x4200, 0x80},
-{0x4201, 0x80},
-{0x4202, 0x80},
-{0x4203, 0x80},
-{0x4204, 0x80},
-{0x4205, 0x80},
-{0x4206, 0x80},
-{0x4207, 0x80},
-{0x4208, 0x80},
-{0x4209, 0x80},
-{0x420A, 0x80},
-{0x420B, 0x80},
-{0x420C, 0x80},
-{0x420D, 0x80},
-{0x420E, 0x80},
-{0x420F, 0x80},
-{0x4210, 0x80},
-{0x4211, 0x80},
-{0x4212, 0x80},
-{0x4213, 0x80},
-{0x4214, 0x80},
-{0x4215, 0x80},
-{0x4216, 0x80},
-{0x4217, 0x80},
-{0x4218, 0x80},
-{0x4219, 0x80},
-{0x421A, 0x80},
-{0x421B, 0x80},
-{0x421C, 0x80},
-{0x421D, 0x80},
-{0x421E, 0x80},
-{0x421F, 0x80},
-{0x4220, 0x80},
-{0x4221, 0x80},
-{0x4222, 0x80},
-{0x4223, 0x80},
-{0x4224, 0x80},
-{0x4225, 0x80},
-{0x4226, 0x80},
-{0x4227, 0x80},
-{0x4228, 0x80},
-{0x4229, 0x80},
-{0x422A, 0x80},
-{0x422B, 0x80},
-{0x422C, 0x80},
-{0x422D, 0x80},
-{0x422E, 0x80},
-{0x422F, 0x80},
-{0x4230, 0x80},
-{0x4231, 0x80},
-{0x4232, 0x80},
-{0x4233, 0x80},
-{0x4234, 0x80},
-{0x4235, 0x80},
-{0x4236, 0x80},
-{0x4237, 0x80},
-{0x4238, 0x80},
-{0x4239, 0x80},
-{0x423A, 0x80},
-{0x423B, 0x80},
-{0x423C, 0x80},
-{0x423D, 0x80},
-{0x423E, 0x80},
-{0x423F, 0x80},
-{0x4240, 0x80},
-{0x4241, 0x80},
-{0x4242, 0x80},
-{0x4243, 0x80},
-{0x4244, 0x80},
-{0x4245, 0x80},
-{0x4246, 0x80},
-{0x4247, 0x80},
-{0x4248, 0x80},
-{0x4249, 0x80},
-{0x424A, 0x80},
-{0x424B, 0x80},
-{0x424C, 0x80},
-{0x424D, 0x80},
-{0x424E, 0x80},
-{0x424F, 0x80},
-{0x4250, 0x80},
-{0x4251, 0x80},
-{0x4252, 0x80},
-{0x4253, 0x80},
-{0x4254, 0x80},
-{0x4255, 0x80},
-{0x4256, 0x80},
-{0x4257, 0x80},
-{0x4258, 0x80},
-{0x4259, 0x80},
-{0x425A, 0x80},
-{0x425B, 0x80},
-{0x425C, 0x80},
-{0x425D, 0x80},
-{0x425E, 0x80},
-{0x425F, 0x80},
-{0x4260, 0x80},
-{0x4261, 0x80},
-{0x4262, 0x80},
-{0x4263, 0x80},
-{0x4264, 0x80},
-{0x4265, 0x80},
-{0x4266, 0x80},
-{0x4267, 0x80},
-{0x4268, 0x80},
-{0x4269, 0x80},
-{0x426A, 0x80},
-{0x426B, 0x80},
-{0x426C, 0x80},
-{0x426D, 0x80},
-{0x426E, 0x80},
-{0x426F, 0x80},
-{0x4270, 0x80},
-{0x4271, 0x80},
-{0x4272, 0x80},
-{0x4273, 0x80},
-{0x4274, 0x80},
-{0x4275, 0x80},
-{0x4276, 0x80},
-{0x4277, 0x80},
-{0x4278, 0x80},
-{0x4279, 0x80},
-{0x427A, 0x80},
-{0x427B, 0x80},
-{0x427C, 0x80},
-{0x427D, 0x80},
-{0x427E, 0x80},
-{0x427F, 0x80},
-{0x4280, 0x80},
-{0x4281, 0x80},
-{0x4282, 0x80},
-{0x4283, 0x80},
-{0x4284, 0x80},
-{0x4285, 0x80},
-{0x4286, 0x80},
-{0x4287, 0x80},
-{0x4288, 0x80},
-{0x4289, 0x80},
-{0x428A, 0x80},
-{0x428B, 0x80},
-{0x428C, 0x80},
-{0x428D, 0x80},
-{0x428E, 0x80},
-{0x428F, 0x80},
-{0x4290, 0x80},
-{0x4291, 0x80},
-{0x4292, 0x80},
-{0x4293, 0x80},
-{0x4294, 0x80},
-{0x4295, 0x80},
-{0x4296, 0x80},
-{0x4297, 0x80},
-{0x4298, 0x80},
-{0x4299, 0x80},
-{0x429A, 0x80},
-{0x429B, 0x80},
-{0x429C, 0x80},
-{0x429D, 0x80},
-{0x429E, 0x80},
-{0x429F, 0x80},
-{0x42A0, 0x80},
-{0x42A1, 0x80},
-{0x42A2, 0x80},
-{0x42A3, 0x80},
-{0x42A4, 0x80},
-{0x42A5, 0x80},
-{0x42A6, 0x80},
-{0x42A7, 0x80},
-{0x42A8, 0x80},
-{0x42A9, 0x80},
-{0x42AA, 0x80},
-{0x42AB, 0x80},
-{0x42AC, 0x80},
-{0x42AD, 0x80},
-{0x42AE, 0x80},
-{0x42AF, 0x80},
-{0x42B0, 0x80},
-{0x42B1, 0x80},
-{0x42B2, 0x80},
-{0x42B3, 0x80},
-{0x42B4, 0x80},
-{0x42B5, 0x80},
-{0x42B6, 0x80},
-{0x42B7, 0x80},
-{0x42B8, 0x80},
-{0x42B9, 0x80},
-{0x42BA, 0x80},
-{0x42BB, 0x80},
-{0x42BC, 0x80},
-{0x42BD, 0x80},
-{0x42BE, 0x80},
-{0x42BF, 0x80},
-{0x42C0, 0x80},
-{0x42C1, 0x80},
-{0x42C2, 0x80},
-{0x42C3, 0x80},
-{0x42C4, 0x80},
-{0x42C5, 0x80},
-{0x42C6, 0x80},
-{0x42C7, 0x80},
-{0x42C8, 0x80},
-{0x42C9, 0x80},
-{0x42CA, 0x80},
-{0x42CB, 0x80},
-{0x42CC, 0x80},
-{0x42CD, 0x80},
-{0x42CE, 0x80},
-{0x42CF, 0x80},
-{0x42D0, 0x80},
-{0x42D1, 0x80},
-{0x42D2, 0x80},
-{0x42D3, 0x80},
-{0x42D4, 0x80},
-{0x42D5, 0x80},
-{0x42D6, 0x80},
-{0x42D7, 0x80},
-{0x42D8, 0x00},
-{0x42D9, 0x00},
-{0x4300, 0x8C},
-{0x4301, 0x88},
-{0x4302, 0x88},
-{0x4303, 0x8A},
-{0x4304, 0x88},
-{0x4305, 0x84},
-{0x4306, 0x84},
-{0x4307, 0x86},
-{0x4308, 0x84},
-{0x4309, 0x82},
-{0x430A, 0x82},
-{0x430B, 0x82},
-{0x430C, 0x81},
-{0x430D, 0x7F},
-{0x430E, 0x7F},
-{0x430F, 0x80},
-{0x4310, 0x7F},
-{0x4311, 0x7F},
-{0x4312, 0x7F},
-{0x4313, 0x80},
-{0x4314, 0x80},
-{0x4315, 0x80},
-{0x4316, 0x7F},
-{0x4317, 0x80},
-{0x4318, 0x83},
-{0x4319, 0x82},
-{0x431A, 0x82},
-{0x431B, 0x82},
-{0x431C, 0x83},
-{0x431D, 0x83},
-{0x431E, 0x83},
-{0x431F, 0x83},
-{0x4320, 0x88},
-{0x4321, 0x87},
-{0x4322, 0x86},
-{0x4323, 0x88},
-{0x4324, 0x8A},
-{0x4325, 0x86},
-{0x4326, 0x86},
-{0x4327, 0x88},
-{0x4328, 0x85},
-{0x4329, 0x82},
-{0x432A, 0x82},
-{0x432B, 0x84},
-{0x432C, 0x81},
-{0x432D, 0x80},
-{0x432E, 0x80},
-{0x432F, 0x81},
-{0x4330, 0x80},
-{0x4331, 0x7F},
-{0x4332, 0x7F},
-{0x4333, 0x80},
-{0x4334, 0x7F},
-{0x4335, 0x7F},
-{0x4336, 0x7F},
-{0x4337, 0x80},
-{0x4338, 0x80},
-{0x4339, 0x7F},
-{0x433A, 0x7F},
-{0x433B, 0x80},
-{0x433C, 0x81},
-{0x433D, 0x80},
-{0x433E, 0x80},
-{0x433F, 0x81},
-{0x4340, 0x82},
-{0x4341, 0x82},
-{0x4342, 0x82},
-{0x4343, 0x83},
-{0x4344, 0x85},
-{0x4345, 0x85},
-{0x4346, 0x85},
-{0x4347, 0x86},
-{0x4348, 0x88},
-{0x4349, 0x86},
-{0x434A, 0x86},
-{0x434B, 0x87},
-{0x434C, 0x84},
-{0x434D, 0x82},
-{0x434E, 0x82},
-{0x434F, 0x83},
-{0x4350, 0x81},
-{0x4351, 0x80},
-{0x4352, 0x80},
-{0x4353, 0x81},
-{0x4354, 0x80},
-{0x4355, 0x7F},
-{0x4356, 0x7F},
-{0x4357, 0x80},
-{0x4358, 0x80},
-{0x4359, 0x80},
-{0x435A, 0x80},
-{0x435B, 0x80},
-{0x435C, 0x80},
-{0x435D, 0x80},
-{0x435E, 0x80},
-{0x435F, 0x80},
-{0x4360, 0x80},
-{0x4361, 0x80},
-{0x4362, 0x80},
-{0x4363, 0x80},
-{0x4364, 0x82},
-{0x4365, 0x82},
-{0x4366, 0x82},
-{0x4367, 0x83},
-{0x4368, 0x87},
-{0x4369, 0x86},
-{0x436A, 0x86},
-{0x436B, 0x87},
-{0x436C, 0x89},
-{0x436D, 0x87},
-{0x436E, 0x87},
-{0x436F, 0x88},
-{0x4370, 0x85},
-{0x4371, 0x83},
-{0x4372, 0x83},
-{0x4373, 0x84},
-{0x4374, 0x82},
-{0x4375, 0x81},
-{0x4376, 0x81},
-{0x4377, 0x81},
-{0x4378, 0x80},
-{0x4379, 0x80},
-{0x437A, 0x80},
-{0x437B, 0x80},
-{0x437C, 0x80},
-{0x437D, 0x80},
-{0x437E, 0x80},
-{0x437F, 0x80},
-{0x4380, 0x80},
-{0x4381, 0x80},
-{0x4382, 0x80},
-{0x4383, 0x80},
-{0x4384, 0x81},
-{0x4385, 0x81},
-{0x4386, 0x81},
-{0x4387, 0x80},
-{0x4388, 0x83},
-{0x4389, 0x83},
-{0x438A, 0x83},
-{0x438B, 0x83},
-{0x438C, 0x87},
-{0x438D, 0x87},
-{0x438E, 0x86},
-{0x438F, 0x86},
-{0x4390, 0x8C},
-{0x4391, 0x88},
-{0x4392, 0x89},
-{0x4393, 0x8C},
-{0x4394, 0x87},
-{0x4395, 0x85},
-{0x4396, 0x85},
-{0x4397, 0x86},
-{0x4398, 0x83},
-{0x4399, 0x82},
-{0x439A, 0x82},
-{0x439B, 0x83},
-{0x439C, 0x81},
-{0x439D, 0x81},
-{0x439E, 0x81},
-{0x439F, 0x81},
-{0x43A0, 0x81},
-{0x43A1, 0x81},
-{0x43A2, 0x81},
-{0x43A3, 0x81},
-{0x43A4, 0x80},
-{0x43A5, 0x81},
-{0x43A6, 0x81},
-{0x43A7, 0x80},
-{0x43A8, 0x81},
-{0x43A9, 0x82},
-{0x43AA, 0x82},
-{0x43AB, 0x81},
-{0x43AC, 0x84},
-{0x43AD, 0x84},
-{0x43AE, 0x84},
-{0x43AF, 0x84},
-{0x43B0, 0x88},
-{0x43B1, 0x88},
-{0x43B2, 0x88},
-{0x43B3, 0x88},
-{0x43B4, 0x8F},
-{0x43B5, 0x8B},
-{0x43B6, 0x8C},
-{0x43B7, 0x90},
-{0x43B8, 0x8A},
-{0x43B9, 0x87},
-{0x43BA, 0x88},
-{0x43BB, 0x8B},
-{0x43BC, 0x85},
-{0x43BD, 0x84},
-{0x43BE, 0x84},
-{0x43BF, 0x85},
-{0x43C0, 0x83},
-{0x43C1, 0x82},
-{0x43C2, 0x83},
-{0x43C3, 0x83},
-{0x43C4, 0x82},
-{0x43C5, 0x81},
-{0x43C6, 0x81},
-{0x43C7, 0x82},
-{0x43C8, 0x81},
-{0x43C9, 0x81},
-{0x43CA, 0x81},
-{0x43CB, 0x80},
-{0x43CC, 0x83},
-{0x43CD, 0x83},
-{0x43CE, 0x82},
-{0x43CF, 0x82},
-{0x43D0, 0x86},
-{0x43D1, 0x85},
-{0x43D2, 0x85},
-{0x43D3, 0x86},
-{0x43D4, 0x8A},
-{0x43D5, 0x89},
-{0x43D6, 0x89},
-{0x43D7, 0x89},
-{0x4400, 0x80},
-{0x4401, 0x80},
-{0x4402, 0x80},
-{0x4403, 0x80},
-{0x4404, 0x80},
-{0x4405, 0x80},
-{0x4406, 0x80},
-{0x4407, 0x80},
-{0x4408, 0x80},
-{0x4409, 0x80},
-{0x440A, 0x80},
-{0x440B, 0x80},
-{0x440C, 0x80},
-{0x440D, 0x80},
-{0x440E, 0x80},
-{0x440F, 0x80},
-{0x4410, 0x80},
-{0x4411, 0x80},
-{0x4412, 0x80},
-{0x4413, 0x80},
-{0x4414, 0x80},
-{0x4415, 0x80},
-{0x4416, 0x80},
-{0x4417, 0x80},
-{0x4418, 0x80},
-{0x4419, 0x80},
-{0x441A, 0x80},
-{0x441B, 0x80},
-{0x441C, 0x80},
-{0x441D, 0x80},
-{0x441E, 0x80},
-{0x441F, 0x80},
-{0x4420, 0x80},
-{0x4421, 0x80},
-{0x4422, 0x80},
-{0x4423, 0x80},
-{0x4424, 0x80},
-{0x4425, 0x80},
-{0x4426, 0x80},
-{0x4427, 0x80},
-{0x4428, 0x80},
-{0x4429, 0x80},
-{0x442A, 0x80},
-{0x442B, 0x80},
-{0x442C, 0x80},
-{0x442D, 0x80},
-{0x442E, 0x80},
-{0x442F, 0x80},
-{0x4430, 0x80},
-{0x4431, 0x80},
-{0x4432, 0x80},
-{0x4433, 0x80},
-{0x4434, 0x80},
-{0x4435, 0x80},
-{0x4436, 0x80},
-{0x4437, 0x80},
-{0x4438, 0x80},
-{0x4439, 0x80},
-{0x443A, 0x80},
-{0x443B, 0x80},
-{0x443C, 0x80},
-{0x443D, 0x80},
-{0x443E, 0x80},
-{0x443F, 0x80},
-{0x4440, 0x80},
-{0x4441, 0x80},
-{0x4442, 0x80},
-{0x4443, 0x80},
-{0x4444, 0x80},
-{0x4445, 0x80},
-{0x4446, 0x80},
-{0x4447, 0x80},
-{0x4448, 0x80},
-{0x4449, 0x80},
-{0x444A, 0x80},
-{0x444B, 0x80},
-{0x444C, 0x80},
-{0x444D, 0x80},
-{0x444E, 0x80},
-{0x444F, 0x80},
-{0x4450, 0x80},
-{0x4451, 0x80},
-{0x4452, 0x80},
-{0x4453, 0x80},
-{0x4454, 0x80},
-{0x4455, 0x80},
-{0x4456, 0x80},
-{0x4457, 0x80},
-{0x4458, 0x80},
-{0x4459, 0x80},
-{0x445A, 0x80},
-{0x445B, 0x80},
-{0x445C, 0x80},
-{0x445D, 0x80},
-{0x445E, 0x80},
-{0x445F, 0x80},
-{0x4460, 0x80},
-{0x4461, 0x80},
-{0x4462, 0x80},
-{0x4463, 0x80},
-{0x4464, 0x80},
-{0x4465, 0x80},
-{0x4466, 0x80},
-{0x4467, 0x80},
-{0x4468, 0x80},
-{0x4469, 0x80},
-{0x446A, 0x80},
-{0x446B, 0x80},
-{0x446C, 0x80},
-{0x446D, 0x80},
-{0x446E, 0x80},
-{0x446F, 0x80},
-{0x4470, 0x80},
-{0x4471, 0x80},
-{0x4472, 0x80},
-{0x4473, 0x80},
-{0x4474, 0x80},
-{0x4475, 0x80},
-{0x4476, 0x80},
-{0x4477, 0x80},
-{0x4478, 0x80},
-{0x4479, 0x80},
-{0x447A, 0x80},
-{0x447B, 0x80},
-{0x447C, 0x80},
-{0x447D, 0x80},
-{0x447E, 0x80},
-{0x447F, 0x80},
-{0x4480, 0x80},
-{0x4481, 0x80},
-{0x4482, 0x80},
-{0x4483, 0x80},
-{0x4484, 0x80},
-{0x4485, 0x80},
-{0x4486, 0x80},
-{0x4487, 0x80},
-{0x4488, 0x80},
-{0x4489, 0x80},
-{0x448A, 0x80},
-{0x448B, 0x80},
-{0x448C, 0x80},
-{0x448D, 0x80},
-{0x448E, 0x80},
-{0x448F, 0x80},
-{0x4490, 0x80},
-{0x4491, 0x80},
-{0x4492, 0x80},
-{0x4493, 0x80},
-{0x4494, 0x80},
-{0x4495, 0x80},
-{0x4496, 0x80},
-{0x4497, 0x80},
-{0x4498, 0x80},
-{0x4499, 0x80},
-{0x449A, 0x80},
-{0x449B, 0x80},
-{0x449C, 0x80},
-{0x449D, 0x80},
-{0x449E, 0x80},
-{0x449F, 0x80},
-{0x44A0, 0x80},
-{0x44A1, 0x80},
-{0x44A2, 0x80},
-{0x44A3, 0x80},
-{0x44A4, 0x80},
-{0x44A5, 0x80},
-{0x44A6, 0x80},
-{0x44A7, 0x80},
-{0x44A8, 0x80},
-{0x44A9, 0x80},
-{0x44AA, 0x80},
-{0x44AB, 0x80},
-{0x44AC, 0x80},
-{0x44AD, 0x80},
-{0x44AE, 0x80},
-{0x44AF, 0x80},
-{0x44B0, 0x80},
-{0x44B1, 0x80},
-{0x44B2, 0x80},
-{0x44B3, 0x80},
-{0x44B4, 0x80},
-{0x44B5, 0x80},
-{0x44B6, 0x80},
-{0x44B7, 0x80},
-{0x44B8, 0x80},
-{0x44B9, 0x80},
-{0x44BA, 0x80},
-{0x44BB, 0x80},
-{0x44BC, 0x80},
-{0x44BD, 0x80},
-{0x44BE, 0x80},
-{0x44BF, 0x80},
-{0x44C0, 0x80},
-{0x44C1, 0x80},
-{0x44C2, 0x80},
-{0x44C3, 0x80},
-{0x44C4, 0x80},
-{0x44C5, 0x80},
-{0x44C6, 0x80},
-{0x44C7, 0x80},
-{0x44C8, 0x80},
-{0x44C9, 0x80},
-{0x44CA, 0x80},
-{0x44CB, 0x80},
-{0x44CC, 0x80},
-{0x44CD, 0x80},
-{0x44CE, 0x80},
-{0x44CF, 0x80},
-{0x44D0, 0x80},
-{0x44D1, 0x80},
-{0x44D2, 0x80},
-{0x44D3, 0x80},
-{0x44D4, 0x80},
-{0x44D5, 0x80},
-{0x44D6, 0x80},
-{0x44D7, 0x80},
-{0x4500, 0x80},
-{0x4501, 0x80},
-{0x4502, 0x80},
-{0x4503, 0x80},
-{0x4504, 0x80},
-{0x4505, 0x80},
-{0x4506, 0x80},
-{0x4507, 0x80},
-{0x4508, 0x80},
-{0x4509, 0x80},
-{0x450A, 0x80},
-{0x450B, 0x80},
-{0x450C, 0x80},
-{0x450D, 0x80},
-{0x450E, 0x80},
-{0x450F, 0x80},
-{0x4510, 0x80},
-{0x4511, 0x80},
-{0x4512, 0x80},
-{0x4513, 0x80},
-{0x4514, 0x80},
-{0x4515, 0x80},
-{0x4516, 0x80},
-{0x4517, 0x80},
-{0x4518, 0x80},
-{0x4519, 0x80},
-{0x451A, 0x80},
-{0x451B, 0x80},
-{0x451C, 0x80},
-{0x451D, 0x80},
-{0x451E, 0x80},
-{0x451F, 0x80},
-{0x4520, 0x80},
-{0x4521, 0x80},
-{0x4522, 0x80},
-{0x4523, 0x80},
-{0x4524, 0x80},
-{0x4525, 0x80},
-{0x4526, 0x80},
-{0x4527, 0x80},
-{0x4528, 0x80},
-{0x4529, 0x80},
-{0x452A, 0x80},
-{0x452B, 0x80},
-{0x452C, 0x80},
-{0x452D, 0x80},
-{0x452E, 0x80},
-{0x452F, 0x80},
-{0x4530, 0x80},
-{0x4531, 0x80},
-{0x4532, 0x80},
-{0x4533, 0x80},
-{0x4534, 0x80},
-{0x4535, 0x80},
-{0x4536, 0x80},
-{0x4537, 0x80},
-{0x4538, 0x80},
-{0x4539, 0x80},
-{0x453A, 0x80},
-{0x453B, 0x80},
-{0x453C, 0x80},
-{0x453D, 0x80},
-{0x453E, 0x80},
-{0x453F, 0x80},
-{0x4540, 0x80},
-{0x4541, 0x80},
-{0x4542, 0x80},
-{0x4543, 0x80},
-{0x4544, 0x80},
-{0x4545, 0x80},
-{0x4546, 0x80},
-{0x4547, 0x80},
-{0x4548, 0x80},
-{0x4549, 0x80},
-{0x454A, 0x80},
-{0x454B, 0x80},
-{0x454C, 0x80},
-{0x454D, 0x80},
-{0x454E, 0x80},
-{0x454F, 0x80},
-{0x4550, 0x80},
-{0x4551, 0x80},
-{0x4552, 0x80},
-{0x4553, 0x80},
-{0x4554, 0x80},
-{0x4555, 0x80},
-{0x4556, 0x80},
-{0x4557, 0x80},
-{0x4558, 0x80},
-{0x4559, 0x80},
-{0x455A, 0x80},
-{0x455B, 0x80},
-{0x455C, 0x80},
-{0x455D, 0x80},
-{0x455E, 0x80},
-{0x455F, 0x80},
-{0x4560, 0x80},
-{0x4561, 0x80},
-{0x4562, 0x80},
-{0x4563, 0x80},
-{0x4564, 0x80},
-{0x4565, 0x80},
-{0x4566, 0x80},
-{0x4567, 0x80},
-{0x4568, 0x80},
-{0x4569, 0x80},
-{0x456A, 0x80},
-{0x456B, 0x80},
-{0x456C, 0x80},
-{0x456D, 0x80},
-{0x456E, 0x80},
-{0x456F, 0x80},
-{0x4570, 0x80},
-{0x4571, 0x80},
-{0x4572, 0x80},
-{0x4573, 0x80},
-{0x4574, 0x80},
-{0x4575, 0x80},
-{0x4576, 0x80},
-{0x4577, 0x80},
-{0x4578, 0x80},
-{0x4579, 0x80},
-{0x457A, 0x80},
-{0x457B, 0x80},
-{0x457C, 0x80},
-{0x457D, 0x80},
-{0x457E, 0x80},
-{0x457F, 0x80},
-{0x4580, 0x80},
-{0x4581, 0x80},
-{0x4582, 0x80},
-{0x4583, 0x80},
-{0x4584, 0x80},
-{0x4585, 0x80},
-{0x4586, 0x80},
-{0x4587, 0x80},
-{0x4588, 0x80},
-{0x4589, 0x80},
-{0x458A, 0x80},
-{0x458B, 0x80},
-{0x458C, 0x80},
-{0x458D, 0x80},
-{0x458E, 0x80},
-{0x458F, 0x80},
-{0x4590, 0x80},
-{0x4591, 0x80},
-{0x4592, 0x80},
-{0x4593, 0x80},
-{0x4594, 0x80},
-{0x4595, 0x80},
-{0x4596, 0x80},
-{0x4597, 0x80},
-{0x4598, 0x80},
-{0x4599, 0x80},
-{0x459A, 0x80},
-{0x459B, 0x80},
-{0x459C, 0x80},
-{0x459D, 0x80},
-{0x459E, 0x80},
-{0x459F, 0x80},
-{0x45A0, 0x80},
-{0x45A1, 0x80},
-{0x45A2, 0x80},
-{0x45A3, 0x80},
-{0x45A4, 0x80},
-{0x45A5, 0x80},
-{0x45A6, 0x80},
-{0x45A7, 0x80},
-{0x45A8, 0x80},
-{0x45A9, 0x80},
-{0x45AA, 0x80},
-{0x45AB, 0x80},
-{0x45AC, 0x80},
-{0x45AD, 0x80},
-{0x45AE, 0x80},
-{0x45AF, 0x80},
-{0x45B0, 0x80},
-{0x45B1, 0x80},
-{0x45B2, 0x80},
-{0x45B3, 0x80},
-{0x45B4, 0x80},
-{0x45B5, 0x80},
-{0x45B6, 0x80},
-{0x45B7, 0x80},
-{0x45B8, 0x80},
-{0x45B9, 0x80},
-{0x45BA, 0x80},
-{0x45BB, 0x80},
-{0x45BC, 0x80},
-{0x45BD, 0x80},
-{0x45BE, 0x80},
-{0x45BF, 0x80},
-{0x45C0, 0x80},
-{0x45C1, 0x80},
-{0x45C2, 0x80},
-{0x45C3, 0x80},
-{0x45C4, 0x80},
-{0x45C5, 0x80},
-{0x45C6, 0x80},
-{0x45C7, 0x80},
-{0x45C8, 0x80},
-{0x45C9, 0x80},
-{0x45CA, 0x80},
-{0x45CB, 0x80},
-{0x45CC, 0x80},
-{0x45CD, 0x80},
-{0x45CE, 0x80},
-{0x45CF, 0x80},
-{0x45D0, 0x80},
-{0x45D1, 0x80},
-{0x45D2, 0x80},
-{0x45D3, 0x80},
-{0x45D4, 0x80},
-{0x45D5, 0x80},
-{0x45D6, 0x80},
-{0x45D7, 0x80},
-{0x7000, 0xAB},
-{0x7001, 0xBA},
-{0x7002, 0x40},
-{0x7003, 0x02},
-{0x7004, 0x00},
-{0x7005, 0x00},
-{0x7006, 0x00},
-{0x7007, 0x00},
-{0x7008, 0x00},
-{0x7009, 0x00},
-{0x700A, 0x00},
-{0x700B, 0x00},
-{0x700C, 0x00},
-{0x700D, 0x00},
-{0x700E, 0x00},
-{0x700F, 0x00},
-{0x7010, 0x55},
-{0x7011, 0x88},
-{0x7012, 0x40},
-{0x7013, 0x01},
-{0x7014, 0x72},
-{0x7015, 0xF1},
-{0x7016, 0x02},
-{0x7017, 0xF8},
-{0x7018, 0x00},
-{0x7019, 0x00},
-{0x701A, 0x00},
-{0x701B, 0x00},
-{0x701C, 0x00},
-{0x701D, 0x00},
-{0x701E, 0x00},
-{0x701F, 0x00},
-{0x7020, 0x00},
-{0x7021, 0x00},
-{0x7022, 0x00},
-{0x7023, 0x00},
-{0x7024, 0x00},
-{0x7025, 0x00},
-{0x7026, 0x00},
-{0x7027, 0x00},
-{0x7028, 0x00},
-{0x7029, 0x00},
-{0x702A, 0x00},
-{0x702B, 0x00},
-{0x702C, 0x00},
-{0x702D, 0x00},
-{0x702E, 0x00},
-{0x702F, 0x00},
-{0x7030, 0x00},
-{0x7031, 0x00},
-{0x7032, 0x00},
-{0x7033, 0x00},
-{0x7034, 0x00},
-{0x7035, 0x00},
-{0x7036, 0x00},
-{0x7037, 0x00},
-{0x7038, 0x00},
-{0x7039, 0x00},
-{0x703A, 0x00},
-{0x703B, 0x00},
-{0x703C, 0x00},
-{0x703D, 0x00},
-{0x703E, 0x00},
-{0x703F, 0x00},
-{0x7040, 0x00},
-{0x7041, 0x00},
-{0x7042, 0x00},
-{0x7043, 0x00},
-{0x7044, 0x00},
-{0x7045, 0x00},
-{0x7046, 0x00},
-{0x7047, 0x00},
-{0x7048, 0x00},
-{0x7049, 0x00},
-{0x704A, 0x00},
-{0x704B, 0x00},
-{0x704C, 0x00},
-{0x704D, 0x00},
-{0x704E, 0x00},
-{0x704F, 0x00},
-{0x7050, 0x00},
-{0x7051, 0x00},
-{0x7052, 0x00},
-{0x7053, 0x00},
-{0x7054, 0x00},
-{0x7055, 0x00},
-{0x7056, 0x00},
-{0x7057, 0x00},
-{0x7058, 0x00},
-{0x7059, 0x00},
-{0x705A, 0x00},
-{0x705B, 0x00},
-{0x705C, 0x00},
-{0x705D, 0x00},
-{0x705E, 0x00},
-{0x705F, 0x00},
-{0x7060, 0x00},
-{0x7061, 0x00},
-{0x7062, 0x00},
-{0x7063, 0x00},
-{0x7064, 0x00},
-{0x7065, 0x00},
-{0x7066, 0x00},
-{0x7067, 0x00},
-{0x7068, 0x00},
-{0x7069, 0x00},
-{0x706A, 0x00},
-{0x706B, 0x00},
-{0x706C, 0x00},
-{0x706D, 0x00},
-{0x706E, 0x00},
-{0x706F, 0x00},
-{0x7070, 0x00},
-{0x7071, 0x00},
-{0x7072, 0x00},
-{0x7073, 0x00},
-{0x7074, 0x00},
-{0x7075, 0x00},
-{0x7076, 0x00},
-{0x7077, 0x00},
-{0x7078, 0x00},
-{0x7079, 0x00},
-{0x707A, 0x00},
-{0x707B, 0x00},
-{0x707C, 0x00},
-{0x707D, 0x00},
-{0x707E, 0x00},
-{0x707F, 0x00},
-{0x7080, 0x00},
-{0x7081, 0x00},
-{0x7082, 0x00},
-{0x7083, 0x00},
-{0x7084, 0x00},
-{0x7085, 0x00},
-{0x7086, 0x00},
-{0x7087, 0x00},
-{0x7088, 0x00},
-{0x7089, 0x00},
-{0x708A, 0x00},
-{0x708B, 0x00},
-{0x708C, 0x00},
-{0x708D, 0x00},
-{0x708E, 0x00},
-{0x708F, 0x00},
-{0x7090, 0x00},
-{0x7091, 0xF0},
-{0x7092, 0x02},
-{0x7093, 0xF8},
-{0x7094, 0x8D},
-{0x7095, 0xF6},
-{0x7096, 0xFA},
-{0x7097, 0xFF},
-{0x7098, 0xF0},
-{0x7099, 0xB5},
-{0x709A, 0x04},
-{0x709B, 0x46},
-{0x709C, 0x8F},
-{0x709D, 0xB0},
-{0x709E, 0x5F},
-{0x709F, 0x48},
-{0x70A0, 0x0C},
-{0x70A1, 0x90},
-{0x70A2, 0x5F},
-{0x70A3, 0x48},
-{0x70A4, 0x06},
-{0x70A5, 0x90},
-{0x70A6, 0x20},
-{0x70A7, 0x46},
-{0x70A8, 0x34},
-{0x70A9, 0x30},
-{0x70AA, 0x0B},
-{0x70AB, 0x90},
-{0x70AC, 0x5B},
-{0x70AD, 0x48},
-{0x70AE, 0x5A},
-{0x70AF, 0x49},
-{0x70B0, 0x26},
-{0x70B1, 0x46},
-{0x70B2, 0x66},
-{0x70B3, 0x30},
-{0x70B4, 0x3A},
-{0x70B5, 0x31},
-{0x70B6, 0x3C},
-{0x70B7, 0x36},
-{0x70B8, 0x05},
-{0x70B9, 0x90},
-{0x70BA, 0x0A},
-{0x70BB, 0x30},
-{0x70BC, 0x04},
-{0x70BD, 0x90},
-{0x70BE, 0x59},
-{0x70BF, 0x48},
-{0x70C0, 0x55},
-{0x70C1, 0x4A},
-{0x70C2, 0x40},
-{0x70C3, 0x6E},
-{0x70C4, 0xC0},
-{0x70C5, 0x07},
-{0x70C6, 0x7D},
-{0x70C7, 0xD1},
-{0x70C8, 0x17},
-{0x70C9, 0x88},
-{0x70CA, 0x0A},
-{0x70CB, 0x5E},
-{0x70CC, 0x0D},
-{0x70CD, 0x92},
-{0x70CE, 0x53},
-{0x70CF, 0x49},
-{0x70D0, 0x55},
-{0x70D1, 0x48},
-{0x70D2, 0x94},
-{0x70D3, 0x31},
-{0x70D4, 0x89},
-{0x70D5, 0x6B},
-{0x70D6, 0x80},
-{0x70D7, 0x68},
-{0x70D8, 0x09},
-{0x70D9, 0x02},
-{0x70DA, 0x00},
-{0x70DB, 0x03},
-{0x70DC, 0x09},
-{0x70DD, 0x0E},
-{0x70DE, 0x00},
-{0x70DF, 0x0B},
-{0x70E0, 0x49},
-{0x70E1, 0x1C},
-{0x70E2, 0x48},
-{0x70E3, 0x43},
-{0x70E4, 0x4D},
-{0x70E5, 0x49},
-{0x70E6, 0x6C},
-{0x70E7, 0x39},
-{0x70E8, 0x8A},
-{0x70E9, 0x6A},
-{0x70EA, 0x07},
-{0x70EB, 0x92},
-{0x70EC, 0xCA},
-{0x70ED, 0x6A},
-{0x70EE, 0x00},
-{0x70EF, 0x21},
-{0x70F0, 0xC9},
-{0x70F1, 0x43},
-{0x70F2, 0x03},
-{0x70F3, 0x92},
-{0x70F4, 0x00},
-{0x70F5, 0x22},
-{0x70F6, 0x00},
-{0x70F7, 0x91},
-{0x70F8, 0x01},
-{0x70F9, 0x92},
-{0x70FA, 0x39},
-{0x70FB, 0x46},
-{0x70FC, 0x8F},
-{0x70FD, 0xF6},
-{0x70FE, 0xCE},
-{0x70FF, 0xFB},
-{0x7100, 0x01},
-{0x7101, 0x22},
-{0x7102, 0x00},
-{0x7103, 0x23},
-{0x7104, 0x8C},
-{0x7105, 0xF6},
-{0x7106, 0x02},
-{0x7107, 0xFA},
-{0x7108, 0x00},
-{0x7109, 0x21},
-{0x710A, 0x05},
-{0x710B, 0x46},
-{0x710C, 0x01},
-{0x710D, 0x91},
-{0x710E, 0x00},
-{0x710F, 0x90},
-{0x7110, 0x39},
-{0x7111, 0x46},
-{0x7112, 0x07},
-{0x7113, 0x98},
-{0x7114, 0x8F},
-{0x7115, 0xF6},
-{0x7116, 0xC2},
-{0x7117, 0xFB},
-{0x7118, 0x0D},
-{0x7119, 0x9A},
-{0x711A, 0xD3},
-{0x711B, 0x17},
-{0x711C, 0x80},
-{0x711D, 0x18},
-{0x711E, 0x59},
-{0x711F, 0x41},
-{0x7120, 0x01},
-{0x7121, 0x22},
-{0x7122, 0x00},
-{0x7123, 0x23},
-{0x7124, 0x8C},
-{0x7125, 0xF6},
-{0x7126, 0xCD},
-{0x7127, 0xF9},
-{0x7128, 0x07},
-{0x7129, 0x90},
-{0x712A, 0x00},
-{0x712B, 0x20},
-{0x712C, 0x01},
-{0x712D, 0x90},
-{0x712E, 0x00},
-{0x712F, 0x95},
-{0x7130, 0x39},
-{0x7131, 0x46},
-{0x7132, 0x03},
-{0x7133, 0x98},
-{0x7134, 0x8F},
-{0x7135, 0xF6},
-{0x7136, 0xB2},
-{0x7137, 0xFB},
-{0x7138, 0x01},
-{0x7139, 0x22},
-{0x713A, 0x00},
-{0x713B, 0x23},
-{0x713C, 0x8C},
-{0x713D, 0xF6},
-{0x713E, 0xE6},
-{0x713F, 0xF9},
-{0x7140, 0x02},
-{0x7141, 0x46},
-{0x7142, 0x07},
-{0x7143, 0x98},
-{0x7144, 0x00},
-{0x7145, 0x23},
-{0x7146, 0x81},
-{0x7147, 0x0B},
-{0x7148, 0x80},
-{0x7149, 0x04},
-{0x714A, 0x7A},
-{0x714B, 0xF6},
-{0x714C, 0x54},
-{0x714D, 0xF8},
-{0x714E, 0x37},
-{0x714F, 0x4A},
-{0x7150, 0x00},
-{0x7151, 0x23},
-{0x7152, 0x00},
-{0x7153, 0x92},
-{0x7154, 0x01},
-{0x7155, 0x93},
-{0x7156, 0x01},
-{0x7157, 0x22},
-{0x7158, 0x8C},
-{0x7159, 0xF6},
-{0x715A, 0xD8},
-{0x715B, 0xF9},
-{0x715C, 0x05},
-{0x715D, 0x46},
-{0x715E, 0x60},
-{0x715F, 0x68},
-{0x7160, 0x00},
-{0x7161, 0x23},
-{0x7162, 0x01},
-{0x7163, 0x0C},
-{0x7164, 0x00},
-{0x7165, 0x04},
-{0x7166, 0xE2},
-{0x7167, 0x68},
-{0x7168, 0x7A},
-{0x7169, 0xF6},
-{0x716A, 0x45},
-{0x716B, 0xF8},
-{0x716C, 0x00},
-{0x716D, 0x22},
-{0x716E, 0xD2},
-{0x716F, 0x43},
-{0x7170, 0x00},
-{0x7171, 0x23},
-{0x7172, 0x00},
-{0x7173, 0x92},
-{0x7174, 0x01},
-{0x7175, 0x93},
-{0x7176, 0x1A},
-{0x7177, 0x46},
-{0x7178, 0x8C},
-{0x7179, 0xF6},
-{0x717A, 0xC8},
-{0x717B, 0xF9},
-{0x717C, 0x29},
-{0x717D, 0x46},
-{0x717E, 0x8F},
-{0x717F, 0xF6},
-{0x7180, 0x8D},
-{0x7181, 0xFB},
-{0x7182, 0x8A},
-{0x7183, 0x03},
-{0x7184, 0x80},
-{0x7185, 0x0C},
-{0x7186, 0x10},
-{0x7187, 0x43},
-{0x7188, 0x00},
-{0x7189, 0x22},
-{0x718A, 0xD2},
-{0x718B, 0x43},
-{0x718C, 0x00},
-{0x718D, 0x23},
-{0x718E, 0x00},
-{0x718F, 0x92},
-{0x7190, 0x89},
-{0x7191, 0x0C},
-{0x7192, 0x01},
-{0x7193, 0x93},
-{0x7194, 0x1A},
-{0x7195, 0x46},
-{0x7196, 0x8C},
-{0x7197, 0xF6},
-{0x7198, 0xB9},
-{0x7199, 0xF9},
-{0x719A, 0x00},
-{0x719B, 0x24},
-{0x719C, 0x03},
-{0x719D, 0x90},
-{0x719E, 0x0C},
-{0x719F, 0x98},
-{0x71A0, 0x61},
-{0x71A1, 0x00},
-{0x71A2, 0x45},
-{0x71A3, 0x5A},
-{0x71A4, 0x06},
-{0x71A5, 0x98},
-{0x71A6, 0x22},
-{0x71A7, 0x4A},
-{0x71A8, 0x40},
-{0x71A9, 0x5A},
-{0x71AA, 0x00},
-{0x71AB, 0x21},
-{0x71AC, 0x8C},
-{0x71AD, 0xF6},
-{0x71AE, 0xBE},
-{0x71AF, 0xF9},
-{0x71B0, 0x07},
-{0x71B1, 0x46},
-{0x71B2, 0x28},
-{0x71B3, 0x46},
-{0x71B4, 0x03},
-{0x71B5, 0x99},
-{0x71B6, 0x8F},
-{0x71B7, 0xF6},
-{0x71B8, 0x71},
-{0x71B9, 0xFB},
-{0x71BA, 0x3A},
-{0x71BB, 0x46},
-{0x71BC, 0x00},
-{0x71BD, 0x23},
-{0x71BE, 0x79},
-{0x71BF, 0xF6},
-{0x71C0, 0xCA},
-{0x71C1, 0xFF},
-{0x71C2, 0x00},
-{0x71C3, 0xE0},
-{0x71C4, 0x0F},
-{0x71C5, 0xE0},
-{0x71C6, 0x8A},
-{0x71C7, 0x02},
-{0x71C8, 0x80},
-{0x71C9, 0x0D},
-{0x71CA, 0x10},
-{0x71CB, 0x43},
-{0x71CC, 0x19},
-{0x71CD, 0x4A},
-{0x71CE, 0x00},
-{0x71CF, 0x23},
-{0x71D0, 0x00},
-{0x71D1, 0x92},
-{0x71D2, 0x89},
-{0x71D3, 0x0D},
-{0x71D4, 0x01},
-{0x71D5, 0x93},
-{0x71D6, 0x40},
-{0x71D7, 0x22},
-{0x71D8, 0x8C},
-{0x71D9, 0xF6},
-{0x71DA, 0x98},
-{0x71DB, 0xF9},
-{0x71DC, 0xA1},
-{0x71DD, 0x00},
-{0x71DE, 0x64},
-{0x71DF, 0x1C},
-{0x71E0, 0x70},
-{0x71E1, 0x50},
-{0x71E2, 0x04},
-{0x71E3, 0x2C},
-{0x71E4, 0xDB},
-{0x71E5, 0xD3},
-{0x71E6, 0x14},
-{0x71E7, 0x4D},
-{0x71E8, 0x00},
-{0x71E9, 0x24},
-{0x71EA, 0x0B},
-{0x71EB, 0x98},
-{0x71EC, 0x67},
-{0x71ED, 0x00},
-{0x71EE, 0xC0},
-{0x71EF, 0x5B},
-{0x71F0, 0x2A},
-{0x71F1, 0x46},
-{0x71F2, 0x40},
-{0x71F3, 0x21},
-{0x71F4, 0x8C},
-{0x71F5, 0xF6},
-{0x71F6, 0x9A},
-{0x71F7, 0xF9},
-{0x71F8, 0x05},
-{0x71F9, 0x99},
-{0x71FA, 0x0E},
-{0x71FB, 0x4A},
-{0x71FC, 0xC8},
-{0x71FD, 0x53},
-{0x71FE, 0xA7},
-{0x71FF, 0x00},
-{0x7200, 0xF0},
-{0x7201, 0x59},
-{0x7202, 0x40},
-{0x7203, 0x21},
-{0x7204, 0x8C},
-{0x7205, 0xF6},
-{0x7206, 0x7B},
-{0x7207, 0xF9},
-{0x7208, 0x04},
-{0x7209, 0x99},
-{0x720A, 0x64},
-{0x720B, 0x1C},
-{0x720C, 0xC8},
-{0x720D, 0x51},
-{0x720E, 0x04},
-{0x720F, 0x2C},
-{0x7210, 0xEB},
-{0x7211, 0xD3},
-{0x7212, 0x0F},
-{0x7213, 0xB0},
-{0x7214, 0xF0},
-{0x7215, 0xBD},
-{0x7216, 0x00},
-{0x7217, 0x00},
-{0x7218, 0x76},
-{0x7219, 0x69},
-{0x721A, 0x18},
-{0x721B, 0x00},
-{0x721C, 0xEC},
-{0x721D, 0x58},
-{0x721E, 0x18},
-{0x721F, 0x00},
-{0x7220, 0x38},
-{0x7221, 0x36},
-{0x7222, 0x18},
-{0x7223, 0x00},
-{0x7224, 0x00},
-{0x7225, 0x35},
-{0x7226, 0x18},
-{0x7227, 0x00},
-{0x7228, 0x00},
-{0x7229, 0x20},
-{0x722A, 0x18},
-{0x722B, 0x00},
-{0x722C, 0xFF},
-{0x722D, 0xFF},
-{0x722E, 0xFF},
-{0x722F, 0x3F},
-{0x7230, 0xFF},
-{0x7231, 0x07},
-{0x7232, 0x00},
-{0x7233, 0x00},
-{0x7234, 0xFF},
-{0x7235, 0xFF},
-{0x7236, 0x07},
-{0x7237, 0x00},
-{0x7238, 0xFF},
-{0x7239, 0x1F},
-{0x723A, 0x00},
-{0x723B, 0x00},
-{0x723C, 0x01},
-{0x723D, 0xF6},
-{0x723E, 0x45},
-{0x723F, 0x12},
-};
-
-#endif
diff --git a/drivers/media/i2c/ti953-ser.c b/drivers/media/i2c/ti953-ser.c
deleted file mode 100644
index b9686b900382..000000000000
--- a/drivers/media/i2c/ti953-ser.c
+++ /dev/null
@@ -1,193 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0
-// Copyright (C) 2020 Intel Corporation
-
-#include <linux/device.h>
-#include <linux/gpio.h>
-#include <linux/module.h>
-#include <linux/slab.h>
-#include <linux/wait.h>
-#include <linux/delay.h>
-#include <linux/platform_device.h>
-#include <linux/version.h>
-
-#include <media/media-device.h>
-#include <media/media-entity.h>
-#include <media/ti960.h>
-#include <media/v4l2-device.h>
-#include <media/videobuf2-core.h>
-
-#include "ti960-reg.h"
-#include "ti953.h"
-
-int ti953_reg_write(struct v4l2_subdev *sd, unsigned short rx_port,
-	unsigned short ser_alias, unsigned char reg, unsigned char val)
-{
-	int ret;
-	int retry, timeout = 10;
-	struct i2c_client *client = v4l2_get_subdevdata(sd);
-	unsigned short addr_backup;
-
-	dev_dbg(sd->dev, "%s port %d, ser_alias %x, reg %x, val %x",
-		__func__, rx_port, ser_alias, reg, val);
-	addr_backup = client->addr;
-	client->addr = ser_alias;
-	for (retry = 0; retry < timeout; retry++) {
-		ret = i2c_smbus_write_byte_data(client, reg, val);
-		if (ret < 0)
-			usleep_range(5000, 6000);
-		else
-			break;
-	}
-
-	client->addr = addr_backup;
-	if (retry >= timeout) {
-		dev_err(sd->dev,
-			"%s:write reg failed: port=%2x, addr=%2x, reg=%2x\n",
-			__func__, rx_port, ser_alias, reg);
-		return -EREMOTEIO;
-	}
-
-	return 0;
-}
-
-int ti953_reg_read(struct v4l2_subdev *sd, unsigned short rx_port,
-	unsigned short ser_alias, unsigned char reg, unsigned char *val)
-{
-	int ret, retry, timeout = 10;
-	struct i2c_client *client = v4l2_get_subdevdata(sd);
-	unsigned short addr_backup;
-
-	addr_backup = client->addr;
-	client->addr = ser_alias;
-	for (retry = 0; retry < timeout; retry++) {
-		ret = i2c_smbus_read_byte_data(client, reg);
-		if (ret < 0)
-			usleep_range(5000, 6000);
-		else {
-			*val = ret & 0xFF;
-			break;
-		}
-	}
-
-	client->addr = addr_backup;
-	if (retry >= timeout) {
-		dev_err(sd->dev,
-			"%s:read reg failed: port=%2x, addr=%2x, reg=%2x\n",
-			__func__, rx_port, ser_alias, reg);
-		return -EREMOTEIO;
-	}
-
-	return 0;
-}
-
-bool ti953_detect(struct v4l2_subdev *sd, unsigned short rx_port, unsigned short ser_alias)
-{
-	bool ret = false;
-	int i;
-	int rval;
-	unsigned char val;
-
-	for (i = 0; i < ARRAY_SIZE(ti953_FPD3_RX_ID); i++) {
-		rval = ti953_reg_read(sd, rx_port, ser_alias,
-			ti953_FPD3_RX_ID[i].reg, &val);
-		if (rval) {
-			dev_err(sd->dev, "port %d, ti953 write timeout %d\n", rx_port, rval);
-			break;
-		}
-		if (val != ti953_FPD3_RX_ID[i].val_expected)
-			break;
-	}
-
-	if (i == ARRAY_SIZE(ti953_FPD3_RX_ID))
-		ret = true;
-	else
-		dev_err(sd->dev, "TI953 Probe Failed");
-
-	return ret;
-}
-
-int ti953_init(struct v4l2_subdev *sd, unsigned short rx_port, unsigned short ser_alias)
-{
-	int i, rval;
-
-	for (i = 0; i < ARRAY_SIZE(ti953_init_settings); i++) {
-		rval = ti953_reg_write(sd, rx_port, ser_alias,
-			ti953_init_settings[i].reg,
-			ti953_init_settings[i].val);
-		if (rval) {
-			dev_err(sd->dev, "port %d, ti953 write timeout %d\n", 0, rval);
-			break;
-		}
-	}
-
-	ti953_init_clk(sd, rx_port, ser_alias);
-
-	return 0;
-}
-
-int ti953_init_clk(struct v4l2_subdev *sd, unsigned short rx_port, unsigned short ser_alias)
-{
-	int i, rval;
-
-	for (i = 0; i < ARRAY_SIZE(ti953_init_settings_clk); i++) {
-		rval = ti953_reg_write(sd, rx_port, ser_alias,
-			ti953_init_settings_clk[i].reg,
-			ti953_init_settings_clk[i].val);
-		if (rval) {
-			dev_err(sd->dev, "port %d, ti953 write timeout %d\n", 0, rval);
-			break;
-		}
-	}
-
-	return 0;
-}
-
-int32_t ti953_bus_speed(struct v4l2_subdev *sd, uint16_t rx_port, uint16_t ser_alias, uint8_t i2c_speed)
-{
-	struct ti953_register_write scl_high_reg;
-	struct ti953_register_write scl_low_reg;
-	int32_t ret = 0;
-
-	scl_high_reg.reg = TI953_SCL_HIGH_TIME;
-	scl_low_reg.reg = TI953_SCL_LOW_TIME;
-	switch (i2c_speed) {
-	case TI953_I2C_SPEED_STANDARD:
-		scl_high_reg.val = TI953_I2C_SCL_HIGH_TIME_STANDARD;
-		scl_low_reg.val = TI953_I2C_SCL_LOW_TIME_STANDARD;
-		break;
-	case TI953_I2C_SPEED_FAST:
-		scl_high_reg.val = TI953_I2C_SCL_HIGH_TIME_FAST;
-		scl_low_reg.val = TI953_I2C_SCL_LOW_TIME_FAST;
-		break;
-	case TI953_I2C_SPEED_FAST_PLUS:
-		scl_high_reg.val = TI953_I2C_SCL_HIGH_TIME_FAST_PLUS;
-		scl_low_reg.val = TI953_I2C_SCL_LOW_TIME_FAST_PLUS;
-		break;
-	case TI953_I2C_SPEED_HIGH:
-	default:
-		dev_err(sd->dev, "port %u, ti953 unsupported I2C speed mode %u",
-			rx_port, i2c_speed);
-		scl_high_reg.val = TI953_I2C_SCL_HIGH_TIME_STANDARD;
-		scl_low_reg.val = TI953_I2C_SCL_LOW_TIME_STANDARD;
-		ret = -EINVAL;
-		break;
-	}
-	if (ret != 0)
-		return ret;
-	ret = ti953_reg_write(sd, rx_port, ser_alias,
-			      scl_high_reg.reg, scl_high_reg.val);
-	if (ret != 0) {
-		dev_err(sd->dev, "port %u, ti953 write SCL_HIGH_TIME failed %d",
-			rx_port, ret);
-		return ret;
-	}
-	ret = ti953_reg_write(sd, rx_port, ser_alias,
-			      scl_low_reg.reg, scl_low_reg.val);
-	if (ret != 0) {
-		dev_err(sd->dev, "port %u, ti953 write SCL_LOW_TIME failed %d",
-			rx_port, ret);
-		return ret;
-	}
-
-	return 0;
-}
diff --git a/drivers/media/i2c/ti953.h b/drivers/media/i2c/ti953.h
deleted file mode 100644
index da47bfaf23b3..000000000000
--- a/drivers/media/i2c/ti953.h
+++ /dev/null
@@ -1,160 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0 */
-/* Copyright (C) 2020 Intel Corporation */
-
-#ifndef TI953_H
-#define TI953_H
-
-struct ti953_register_write {
-	u8 reg;
-	u8 val;
-};
-
-struct ti953_register_devid {
-	u8 reg;
-	u8 val_expected;
-};
-
-/* register definition */
-#define TI953_RESET_CTL		0x1
-#define TI953_GENERAL_CFG	0x2
-#define TI953_LOCAL_GPIO_DATA	0xd
-#define TI953_GPIO_INPUT_CTRL	0xe
-#define TI953_SCL_HIGH_TIME		0xbU
-#define TI953_SCL_LOW_TIME		0xcU
-
-/* register value definition */
-#define TI953_DIGITAL_RESET_1	0x2
-#define TI953_GPIO0_RMTEN	0x10
-#define TI953_GPIO0_OUT		0x1
-#define TI953_GPIO1_OUT		(0x1 << 1)
-#define TI953_GPIO_OUT_EN	0xf0
-#define TI953_I2C_SCL_HIGH_TIME_STANDARD	0x7F
-#define TI953_I2C_SCL_LOW_TIME_STANDARD		0x7F
-#define TI953_I2C_SCL_HIGH_TIME_FAST		0x13
-#define TI953_I2C_SCL_LOW_TIME_FAST		0x26
-#define TI953_I2C_SCL_HIGH_TIME_FAST_PLUS	0x06
-#define TI953_I2C_SCL_LOW_TIME_FAST_PLUS	0x0b
-
-#define TI953_I2C_SPEED_STANDARD	0x1U
-#define TI953_I2C_SPEED_FAST		0x2U
-#define TI953_I2C_SPEED_HIGH		0x3U
-#define TI953_I2C_SPEED_FAST_PLUS	0x4U
-
-/*
- * TI953_GENERAL_CFG:
- * bit 0: I2C Strap Mode: I2C Voltage level
- * bit 1: CRC_TX_GEN_ENABLE: Transmitter CRC Generator
- * bit 4 - 5:
- * CSI-2 Data lane configuration.
- * 00: 1-lane configuration
- * 01: 2-lane configuration
- * 11: 4-lane configuration
- * bit 6:
- * CONTS_CLK:
- * CSI-2 Clock Lane Configuration.
- * 0 : Non Continuous Clock
- * 1 : Continuous Clock
- */
-#define TI953_CONTS_CLK		0x40
-#define TI953_CSI_1LANE		0x00
-#define TI953_CSI_2LANE		0x10
-#define TI953_CSI_4LANE		0x30
-#define TI953_CSI_LANE_MASK	~(0x30)
-#define TI953_CRC_TX_GEN_ENABLE	0x2
-#define TI953_I2C_STRAP_MODE	0x1
-
-static const struct ti953_register_write ti953_init_settings[] = {
-	{0x4c, 0x01}, /* ox03a10 init sequence */
-	{0xb0, 0x04},
-	{0xb1, 0x03},
-	{0xb2, 0x25},
-	{0xb1, 0x13},
-	{0xb2, 0x25},
-	{0xb0, 0x04},
-	{0xb1, 0x04},
-	{0xb2, 0x30},
-	{0xb1, 0x14},
-	{0xb2, 0x30},
-	{0xb0, 0x04},
-	{0xb1, 0x06},
-	{0xb2, 0x40},
-	{0x42, 0x01},
-	{0x41, 0x93},
-	{0x4c, 0x12},
-	{0xb0, 0x08},
-	{0xb1, 0x03},
-	{0xb2, 0x25},
-	{0xb1, 0x13},
-	{0xb2, 0x25},
-	{0xb0, 0x08},
-	{0xb1, 0x04},
-	{0xb2, 0x30},
-	{0xb1, 0x14},
-	{0xb2, 0x30},
-	{0xb0, 0x08},
-	{0xb1, 0x06},
-	{0xb2, 0x40},
-	{0x42, 0x01},
-	{0x41, 0x93},
-	{0x4c, 0x24},
-	{0xb0, 0x0c},
-	{0xb1, 0x03},
-	{0xb2, 0x25},
-	{0xb1, 0x13},
-	{0xb2, 0x25},
-	{0xb0, 0x0c},
-	{0xb1, 0x04},
-	{0xb2, 0x30},
-	{0xb1, 0x14},
-	{0xb2, 0x30},
-	{0xb0, 0x0c},
-	{0xb1, 0x06},
-	{0xb2, 0x40},
-	{0x42, 0x01},
-	{0x41, 0x93},
-	{0x4c, 0x38},
-	{0xb0, 0x10},
-	{0xb1, 0x03},
-	{0xb2, 0x25},
-	{0xb1, 0x13},
-	{0xb2, 0x25},
-	{0xb0, 0x10},
-	{0xb1, 0x04},
-	{0xb2, 0x30},
-	{0xb1, 0x14},
-	{0xb2, 0x30},
-	{0xb0, 0x10},
-	{0xb1, 0x06},
-	{0xb2, 0x40},
-	{0x42, 0x01},
-	{0x41, 0x93},
-};
-
-static const struct ti953_register_write ti953_init_settings_clk[] = {
-	{0x06, 0x41},
-	/* WA: set N to 0x25 for 30 fps */
-	{0x07, 0x25},
-};
-
-static const struct ti953_register_devid ti953_FPD3_RX_ID[] = {
-	{0xf0, 0x5f},
-	{0xf1, 0x55},
-	{0xf2, 0x42},
-	{0xf3, 0x39},
-	{0xf4, 0x35},
-	{0xf5, 0x33},
-};
-
-int ti953_reg_write(struct v4l2_subdev *sd, unsigned short rx_port,
-		unsigned short ser_alias, unsigned char reg, unsigned char val);
-
-int ti953_reg_read(struct v4l2_subdev *sd, unsigned short rx_port,
-		unsigned short ser_alias, unsigned char reg, unsigned char *val);
-
-bool ti953_detect(struct v4l2_subdev *sd, unsigned short rx_port, unsigned short ser_alias);
-
-int ti953_init(struct v4l2_subdev *sd, unsigned short rx_port, unsigned short ser_alias);
-int ti953_init_clk(struct v4l2_subdev *sd, unsigned short rx_port, unsigned short ser_alias);
-int32_t ti953_bus_speed(struct v4l2_subdev *sd, uint16_t rx_port, uint16_t ser_alias, uint8_t i2c_speed);
-
-#endif
diff --git a/drivers/media/i2c/ti960-des.c b/drivers/media/i2c/ti960-des.c
deleted file mode 100644
index 64f89368843b..000000000000
--- a/drivers/media/i2c/ti960-des.c
+++ /dev/null
@@ -1,1903 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0
-// Copyright (C) 2024 Intel Corporation
-
-#include <linux/device.h>
-#include <linux/gpio.h>
-#include <linux/module.h>
-#include <linux/slab.h>
-#include <linux/wait.h>
-#include <linux/delay.h>
-#include <linux/platform_device.h>
-#include <linux/version.h>
-
-#include <linux/gpio/driver.h>
-
-#include <media/media-device.h>
-#include <media/media-entity.h>
-#include <media/ti960.h>
-#include <media/v4l2-device.h>
-#include <media/videobuf2-core.h>
-
-#include "ti960-reg.h"
-#include "ti953.h"
-
-#define MIPI_CSI2_TYPE_RAW12   0x2c
-#define MIPI_CSI2_TYPE_YUV422_8	0x1e
-
-struct ti960_subdev {
-	struct v4l2_subdev *sd;
-	unsigned short rx_port;
-	unsigned short fsin_gpio;
-	unsigned short phy_i2c_addr;
-	unsigned short alias_i2c_addr;
-	unsigned short ser_i2c_addr;
-	char sd_name[16];
-};
-
-struct ti960 {
-	struct v4l2_subdev sd;
-	struct media_pad pad[NR_OF_TI960_PADS];
-	struct v4l2_ctrl_handler ctrl_handler;
-	struct ti960_pdata *pdata;
-	struct ti960_subdev sub_devs[NR_OF_TI960_SINK_PADS];
-	struct ti960_subdev_pdata subdev_pdata[NR_OF_TI960_SINK_PADS];
-	const char *name;
-
-	struct mutex mutex;
-
-	struct regmap *regmap8;
-	struct regmap *regmap16;
-
-	struct v4l2_mbus_framefmt *ffmts[NR_OF_TI960_PADS];
-	struct rect *crop;
-	struct rect *compose;
-
-	unsigned int nsinks;
-	unsigned int nsources;
-	unsigned int nstreams;
-	unsigned int npads;
-
-	struct gpio_chip gc;
-
-	struct v4l2_ctrl *link_freq;
-	struct v4l2_ctrl *test_pattern;
-
-	int ref_count;
-};
-
-#define to_ti960(_sd) container_of(_sd, struct ti960, sd)
-
-static const s64 ti960_op_sys_clock[] =  {800000000,
-					  600000000,
-					  400000000,
-					  200000000};
-
-/*
- * Order matters.
- *
- * 1. Bits-per-pixel, descending.
- * 2. Bits-per-pixel compressed, descending.
- * 3. Pixel order, same as in pixel_order_str. Formats for all four pixel
- *    orders must be defined.
- */
-static const struct ti960_csi_data_format va_csi_data_formats[] = {
-	{ MEDIA_BUS_FMT_YUYV8_1X16, 16, 16, PIXEL_ORDER_GBRG, 0x1e },
-	{ MEDIA_BUS_FMT_UYVY8_1X16, 16, 16, PIXEL_ORDER_GBRG, 0x1e },
-	{ MEDIA_BUS_FMT_SGRBG16_1X16, 16, 16, PIXEL_ORDER_GRBG, 0x2e },
-	{ MEDIA_BUS_FMT_SRGGB16_1X16, 16, 16, PIXEL_ORDER_RGGB, 0x2e },
-	{ MEDIA_BUS_FMT_SBGGR16_1X16, 16, 16, PIXEL_ORDER_BGGR, 0x2e },
-	{ MEDIA_BUS_FMT_SGBRG16_1X16, 16, 16, PIXEL_ORDER_GBRG, 0x2e },
-	{ MEDIA_BUS_FMT_SGRBG12_1X12, 12, 12, PIXEL_ORDER_GRBG, 0x2c },
-	{ MEDIA_BUS_FMT_SRGGB12_1X12, 12, 12, PIXEL_ORDER_RGGB, 0x2c },
-	{ MEDIA_BUS_FMT_SBGGR12_1X12, 12, 12, PIXEL_ORDER_BGGR, 0x2c },
-	{ MEDIA_BUS_FMT_SGBRG12_1X12, 12, 12, PIXEL_ORDER_GBRG, 0x2c },
-	{ MEDIA_BUS_FMT_SGRBG10_1X10, 10, 10, PIXEL_ORDER_GRBG, 0x2b },
-	{ MEDIA_BUS_FMT_SRGGB10_1X10, 10, 10, PIXEL_ORDER_RGGB, 0x2b },
-	{ MEDIA_BUS_FMT_SBGGR10_1X10, 10, 10, PIXEL_ORDER_BGGR, 0x2b },
-	{ MEDIA_BUS_FMT_SGBRG10_1X10, 10, 10, PIXEL_ORDER_GBRG, 0x2b },
-};
-
-static const uint32_t ti960_supported_codes_pad[] = {
-	MEDIA_BUS_FMT_YUYV8_1X16,
-	MEDIA_BUS_FMT_UYVY8_1X16,
-	MEDIA_BUS_FMT_SBGGR16_1X16,
-	MEDIA_BUS_FMT_SGBRG16_1X16,
-	MEDIA_BUS_FMT_SGRBG16_1X16,
-	MEDIA_BUS_FMT_SRGGB16_1X16,
-	MEDIA_BUS_FMT_SBGGR12_1X12,
-	MEDIA_BUS_FMT_SGBRG12_1X12,
-	MEDIA_BUS_FMT_SGRBG12_1X12,
-	MEDIA_BUS_FMT_SRGGB12_1X12,
-	MEDIA_BUS_FMT_SBGGR10_1X10,
-	MEDIA_BUS_FMT_SGBRG10_1X10,
-	MEDIA_BUS_FMT_SGRBG10_1X10,
-	MEDIA_BUS_FMT_SRGGB10_1X10,
-	0,
-};
-
-static const uint32_t *ti960_supported_codes[] = {
-	ti960_supported_codes_pad,
-};
-
-static struct regmap_config ti960_reg_config8 = {
-	.reg_bits = 8,
-	.val_bits = 8,
-};
-
-static struct regmap_config ti960_reg_config16 = {
-	.reg_bits = 16,
-	.val_bits = 8,
-	.reg_format_endian = REGMAP_ENDIAN_BIG,
-};
-
-static s64 ti960_query_sub_stream[NR_OF_TI960_SINK_PADS] = {
-	0, 0, 0, 0
-};
-
-static void set_sub_stream_fmt(int index, u32 code)
-{
-	ti960_query_sub_stream[index] &= 0xFFFFFFFFFFFF0000;
-	ti960_query_sub_stream[index] |= code;
-}
-
-static void set_sub_stream_h(int index, u32 height)
-{
-	s64 val = height & 0xFFFF;
-
-	ti960_query_sub_stream[index] &= 0xFFFFFFFF0000FFFF;
-	ti960_query_sub_stream[index] |= val << 16;
-}
-
-static void set_sub_stream_w(int index, u32 width)
-{
-	s64 val = width & 0xFFFF;
-
-	ti960_query_sub_stream[index] &= 0xFFFF0000FFFFFFFF;
-	ti960_query_sub_stream[index] |= val << 32;
-}
-
-static void set_sub_stream_dt(int index, u32 dt)
-{
-	s64 val = dt & 0xFF;
-
-	ti960_query_sub_stream[index] &= 0xFF00FFFFFFFFFFFF;
-	ti960_query_sub_stream[index] |= val << 48;
-}
-
-static void set_sub_stream_vc_id(int index, u32 vc_id)
-{
-	s64 val = vc_id & 0xFF;
-
-	ti960_query_sub_stream[index] &= 0x00FFFFFFFFFFFFFF;
-	ti960_query_sub_stream[index] |= val << 56;
-}
-
-static u8 ti960_set_sub_stream[] = {
-	0, 0, 0, 0
-};
-
-static int bus_switch(struct ti960 *va)
-{
-	int ret;
-	int retry, timeout = 10;
-	struct i2c_client *client = v4l2_get_subdevdata(&va->sd);
-	unsigned short addr_backup;
-
-	dev_dbg(&client->dev, "try to set bus switch\n");
-	addr_backup = client->addr;
-	client->addr = 0x70;
-	for (retry = 0; retry < timeout; retry++) {
-		ret = i2c_smbus_write_byte(client, 0x01);
-		if (ret < 0)
-			usleep_range(5000, 6000);
-		else
-			break;
-	}
-
-	client->addr = addr_backup;
-	if (retry >= timeout) {
-		dev_err(&client->dev, "bus switch failed, maybe no bus switch\n");
-	}
-
-	return 0;
-}
-
-static int ti960_reg_read(struct ti960 *va, unsigned char reg, unsigned int *val)
-{
-	int ret, retry, timeout = 10;
-
-	for (retry = 0; retry < timeout; retry++) {
-		ret = regmap_read(va->regmap8, reg, val);
-		if (ret < 0) {
-			dev_err(va->sd.dev, "960 reg read ret=%x", ret);
-			usleep_range(5000, 6000);
-		} else {
-			break;
-		}
-	}
-
-	if (retry >= timeout) {
-		dev_err(va->sd.dev,
-			"%s:devid read failed: reg=%2x, ret=%d\n",
-			__func__, reg, ret);
-		return -EREMOTEIO;
-	}
-
-	return 0;
-}
-
-static int ti960_reg_write(struct ti960 *va, unsigned char reg, unsigned int val)
-{
-	int ret, retry, timeout = 10;
-
-	for (retry = 0; retry < timeout; retry++) {
-		dev_dbg(va->sd.dev, "write reg %x = %x", reg, val);
-		ret = regmap_write(va->regmap8, reg, val);
-		if (ret < 0) {
-			dev_err(va->sd.dev, "960 reg write ret=%x", ret);
-			usleep_range(5000, 6000);
-		} else {
-			break;
-		}
-	}
-
-	if (retry >= timeout) {
-		dev_err(va->sd.dev,
-			"%s:devid write failed: reg=%2x, ret=%d\n",
-			__func__, reg, ret);
-		return -EREMOTEIO;
-	}
-
-	return 0;
-}
-
-static int ti960_reg_set_bit(struct ti960 *va, unsigned char reg,
-	unsigned char bit, unsigned char val)
-{
-	int ret;
-	unsigned int reg_val;
-
-	ret = regmap_read(va->regmap8, reg, &reg_val);
-	if (ret)
-		return ret;
-	if (val)
-		reg_val |= 1 << bit;
-	else
-		reg_val &= ~(1 << bit);
-
-	return ti960_reg_write(va, reg, reg_val);
-}
-
-static int ti960_map_phy_i2c_addr(struct ti960 *va, unsigned short rx_port,
-			      unsigned short addr)
-{
-	int rval;
-
-	rval = ti960_reg_write(va, TI960_RX_PORT_SEL,
-		(rx_port << 4) + (1 << rx_port));
-	if (rval)
-		return rval;
-
-	return ti960_reg_write(va, TI960_SLAVE_ID0, addr);
-}
-
-static int ti960_map_alias_i2c_addr(struct ti960 *va, unsigned short rx_port,
-			      unsigned short addr)
-{
-	int rval;
-
-	rval = ti960_reg_write(va, TI960_RX_PORT_SEL,
-		(rx_port << 4) + (1 << rx_port));
-	if (rval)
-		return rval;
-
-	return ti960_reg_write(va, TI960_SLAVE_ALIAS_ID0, addr);
-}
-
-static int ti960_map_ser_alias_addr(struct ti960 *va, unsigned short rx_port,
-			      unsigned short ser_alias)
-{
-	int rval;
-
-	dev_dbg(va->sd.dev, "%s port %d, ser_alias %x\n", __func__, rx_port, ser_alias);
-	rval = ti960_reg_write(va, TI960_RX_PORT_SEL,
-		(rx_port << 4) + (1 << rx_port));
-	if (rval)
-		return rval;
-
-	return ti960_reg_write(va, TI960_SER_ALIAS_ID, ser_alias);
-}
-
-static int ti960_fsin_gpio_init(struct ti960 *va, unsigned short rx_port,
-		unsigned short ser_alias, unsigned short fsin_gpio)
-{
-	unsigned char gpio_data;
-	int rval;
-	int reg_val;
-
-	dev_dbg(va->sd.dev, "%s\n", __func__);
-	rval = regmap_read(va->regmap8, TI960_FS_CTL, &reg_val);
-	if (rval) {
-		dev_dbg(va->sd.dev, "Failed to read gpio status.\n");
-		return rval;
-	}
-
-	if (!reg_val & TI960_FSIN_ENABLE) {
-		dev_dbg(va->sd.dev, "FSIN not enabled, skip config FSIN GPIO.\n");
-		return 0;
-	}
-
-	rval = ti960_reg_write(va, TI960_RX_PORT_SEL,
-		(rx_port << 4) + (1 << rx_port));
-	if (rval)
-		return rval;
-
-	switch (fsin_gpio) {
-	case 0:
-	case 1:
-		rval = regmap_read(va->regmap8, TI960_BC_GPIO_CTL0, &reg_val);
-		if (rval) {
-			dev_dbg(va->sd.dev, "Failed to read gpio status.\n");
-			return rval;
-		}
-
-		if (fsin_gpio == 0) {
-			reg_val &= ~TI960_GPIO0_MASK;
-			reg_val |= TI960_GPIO0_FSIN;
-		} else {
-			reg_val &= ~TI960_GPIO1_MASK;
-			reg_val |= TI960_GPIO1_FSIN;
-		}
-
-		rval = ti960_reg_write(va, TI960_BC_GPIO_CTL0, reg_val);
-		if (rval)
-			dev_dbg(va->sd.dev, "Failed to set gpio.\n");
-		break;
-	case 2:
-	case 3:
-		rval = regmap_read(va->regmap8, TI960_BC_GPIO_CTL1, &reg_val);
-		if (rval) {
-			dev_dbg(va->sd.dev, "Failed to read gpio status.\n");
-			return rval;
-		}
-
-		if (fsin_gpio == 2) {
-			reg_val &= ~TI960_GPIO2_MASK;
-			reg_val |= TI960_GPIO2_FSIN;
-		} else {
-			reg_val &= ~TI960_GPIO3_MASK;
-			reg_val |= TI960_GPIO3_FSIN;
-		}
-
-		rval = ti960_reg_write(va, TI960_BC_GPIO_CTL1, reg_val);
-		if (rval)
-			dev_dbg(va->sd.dev, "Failed to set gpio.\n");
-		break;
-	}
-
-	/* enable output and remote control */
-	ti953_reg_write(&va->sd, rx_port, ser_alias, TI953_GPIO_INPUT_CTRL, TI953_GPIO_OUT_EN);
-	rval = ti953_reg_read(&va->sd, rx_port, ser_alias, TI953_LOCAL_GPIO_DATA,
-			&gpio_data);
-	if (rval)
-		return rval;
-	ti953_reg_write(&va->sd, rx_port, ser_alias, TI953_LOCAL_GPIO_DATA,
-			gpio_data | TI953_GPIO0_RMTEN << fsin_gpio);
-
-	return rval;
-}
-
-static int ti960_enum_mbus_code(struct v4l2_subdev *sd,
-				struct v4l2_subdev_state *sd_state,
-				struct v4l2_subdev_mbus_code_enum *code)
-{
-	const uint32_t *supported_code =
-		ti960_supported_codes[code->pad];
-	int i;
-
-	for (i = 0; supported_code[i]; i++) {
-		if (i == code->index) {
-			code->code = supported_code[i];
-			return 0;
-		}
-	}
-
-	return -EINVAL;
-}
-
-static const struct ti960_csi_data_format
-		*ti960_validate_csi_data_format(u32 code)
-{
-	unsigned int i;
-
-	for (i = 0; i < ARRAY_SIZE(va_csi_data_formats); i++) {
-		if (va_csi_data_formats[i].code == code)
-			return &va_csi_data_formats[i];
-	}
-
-	return &va_csi_data_formats[0];
-}
-
-static int ti960_get_frame_desc(struct v4l2_subdev *sd,
-	unsigned int pad, struct v4l2_mbus_frame_desc *desc)
-{
-	int source_pad = pad;
-
-	if (source_pad == NR_OF_TI960_SINK_PADS) {
-		struct media_pad *remote_pad = NULL;
-		int i = 0;
-        while (i < NR_OF_TI960_SINK_PADS && !remote_pad) {
-			remote_pad = media_pad_remote_pad_first(&sd->entity.pads[i]);
-			if (remote_pad) {
-				struct v4l2_subdev *rsd =
-					media_entity_to_v4l2_subdev(remote_pad->entity);
-
-            	dev_dbg(sd->dev, "%s remote sd: %s\n", __func__, rsd->name);
-            	v4l2_subdev_call(rsd, pad, get_frame_desc, 0, desc);
-				break;
-        	}
-			i++;
-        }
-    } else
-		dev_err(sd->dev, "can't find the frame desc\n");
-
-	return 0;
-}
-
-static struct v4l2_mbus_framefmt *
-__ti960_get_ffmt(struct v4l2_subdev *subdev,
-		 struct v4l2_subdev_state *sd_state,
-		 unsigned int pad, unsigned int which,
-		 unsigned int stream)
-{
-	struct ti960 *va = to_ti960(subdev);
-
-	if (pad < 0 || pad >= NR_OF_TI960_PADS ||
-	    stream < 0 || stream >= va->nstreams) {
-		dev_err(subdev->dev, "%s invalid pad %d, or stream %d\n", __func__, pad, stream);
-		return NULL;
-	}
-
-	if (which == V4L2_SUBDEV_FORMAT_TRY)
-		return v4l2_subdev_state_get_format(sd_state, pad, stream);
-	else
-		return &va->ffmts[pad][stream];
-}
-
-static int ti960_get_format(struct v4l2_subdev *subdev,
-			    struct v4l2_subdev_state *sd_state,
-			    struct v4l2_subdev_format *fmt)
-{
-	struct ti960 *va = to_ti960(subdev);
-	struct v4l2_mbus_framefmt *ffmt;
-
-	mutex_lock(&va->mutex);
-	ffmt = __ti960_get_ffmt(subdev, sd_state, fmt->pad, fmt->which, fmt->stream);
-	if (!ffmt) {
-		mutex_unlock(&va->mutex);
-		return -EINVAL;
-	}
-	fmt->format = *ffmt;
-	mutex_unlock(&va->mutex);
-
-	dev_dbg(subdev->dev, "subdev_format: which: %s, pad: %d.\n",
-		 fmt->which == V4L2_SUBDEV_FORMAT_ACTIVE ?
-		 "V4L2_SUBDEV_FORMAT_ACTIVE" : "V4L2_SUBDEV_FORMAT_TRY",
-		 fmt->pad);
-
-	dev_dbg(subdev->dev, "framefmt: width: %d, height: %d, code: 0x%x.\n",
-	       fmt->format.width, fmt->format.height, fmt->format.code);
-
-	return 0;
-}
-
-static int ti960_set_format(struct v4l2_subdev *subdev,
-			    struct v4l2_subdev_state *sd_state,
-			    struct v4l2_subdev_format *fmt)
-{
-	struct ti960 *va = to_ti960(subdev);
-	const struct ti960_csi_data_format *csi_format;
-	struct v4l2_mbus_framefmt *ffmt;
-
-	csi_format = ti960_validate_csi_data_format(
-		fmt->format.code);
-
-	mutex_lock(&va->mutex);
-	ffmt = __ti960_get_ffmt(subdev, sd_state, fmt->pad, fmt->which, fmt->stream);
-
-	if (!ffmt) {
-		mutex_unlock(&va->mutex);
-		return -EINVAL;
-	}
-	if (fmt->which == V4L2_SUBDEV_FORMAT_ACTIVE) {
-		ffmt->width = fmt->format.width;
-		ffmt->height = fmt->format.height;
-		ffmt->code = csi_format->code;
-	}
-	fmt->format = *ffmt;
-
-	if (fmt->pad < NR_OF_TI960_SINK_PADS) {
-		set_sub_stream_fmt(fmt->pad, ffmt->code);
-		set_sub_stream_h(fmt->pad, ffmt->height);
-		set_sub_stream_w(fmt->pad, ffmt->width);
-
-		/* select correct csi-2 data type id */
-		if (ffmt->code >= MEDIA_BUS_FMT_UYVY8_1X16 &&
-				ffmt->code <= MEDIA_BUS_FMT_YVYU8_1X16)
-			set_sub_stream_dt(fmt->pad, MIPI_CSI2_TYPE_YUV422_8);
-		else
-			set_sub_stream_dt(fmt->pad, MIPI_CSI2_TYPE_RAW12);
-		set_sub_stream_vc_id(fmt->pad, fmt->pad);
-		dev_dbg(subdev->dev,
-			"framefmt: width: %d, height: %d, code: 0x%x.\n",
-			ffmt->width, ffmt->height, ffmt->code);
-	}
-
-	mutex_unlock(&va->mutex);
-	return 0;
-}
-
-static int ti960_open(struct v4l2_subdev *subdev,
-				struct v4l2_subdev_fh *fh)
-{
-	struct v4l2_mbus_framefmt *try_fmt =
-		v4l2_subdev_state_get_format(fh->state, 0);
-
-	struct v4l2_subdev_format fmt = {
-		.which = V4L2_SUBDEV_FORMAT_TRY,
-		.pad = TI960_PAD_SOURCE,
-		.format = {
-			.width = TI960_MAX_WIDTH,
-			.height = TI960_MAX_HEIGHT,
-			.code = MEDIA_BUS_FMT_SBGGR12_1X12,
-		},
-	};
-
-	*try_fmt = fmt.format;
-
-	return 0;
-}
-
-static int ti960_map_subdevs_addr(struct ti960 *va)
-{
-	unsigned short rx_port, phy_i2c_addr, alias_i2c_addr;
-	int i, rval;
-
-	for (i = 0; i < NR_OF_TI960_SINK_PADS; i++) {
-		rx_port = va->sub_devs[i].rx_port;
-		phy_i2c_addr = va->sub_devs[i].phy_i2c_addr;
-		alias_i2c_addr = va->sub_devs[i].alias_i2c_addr;
-
-		if (!phy_i2c_addr || !alias_i2c_addr)
-			continue;
-
-		rval = ti960_map_phy_i2c_addr(va, rx_port, phy_i2c_addr);
-		if (rval)
-			return rval;
-
-		/* set 7bit alias i2c addr */
-		rval = ti960_map_alias_i2c_addr(va, rx_port,
-						alias_i2c_addr << 1);
-		if (rval)
-			return rval;
-	}
-
-	return 0;
-}
-
-/*
- * FIXME: workaround, reset to avoid block.
- */
-static int reset_sensor(struct ti960 *va, unsigned short rx_port,
-		unsigned short ser_alias, int reset)
-{
-	int rval;
-	unsigned char gpio_data;
-
-	rval = ti953_reg_read(&va->sd, rx_port, ser_alias,
-			TI953_LOCAL_GPIO_DATA,
-			&gpio_data);
-	if (rval)
-		return rval;
-
-	ti953_reg_write(&va->sd, rx_port, ser_alias, TI953_GPIO_INPUT_CTRL,
-			TI953_GPIO_OUT_EN);
-	gpio_data &= ~(TI953_GPIO0_RMTEN << reset);
-	gpio_data &= ~(TI953_GPIO0_OUT << reset);
-	ti953_reg_write(&va->sd, rx_port, ser_alias, TI953_LOCAL_GPIO_DATA,
-			gpio_data);
-	msleep(50);
-	gpio_data |= TI953_GPIO0_OUT << reset;
-	ti953_reg_write(&va->sd, rx_port, ser_alias, TI953_LOCAL_GPIO_DATA,
-			gpio_data);
-
-	return 0;
-}
-
-static int ti960_config_ser(struct ti960 *va, struct ti960_subdev *subdev,
-			    struct ti960_subdev_pdata *pdata)
-{
-	unsigned short rx_port, phy_i2c_addr, alias_i2c_addr, ser_i2c_addr;
-	int i, rval;
-	unsigned char val;
-	bool speed_detect_fail;
-
-	rx_port = subdev->rx_port;
-	phy_i2c_addr = subdev->phy_i2c_addr;
-	alias_i2c_addr = subdev->alias_i2c_addr;
-	ser_i2c_addr = subdev->ser_i2c_addr;
-
-	rval = ti960_map_ser_alias_addr(va, rx_port,
-			ser_i2c_addr << 1);
-	if (rval)
-		return rval;
-
-	if (!ti953_detect(&va->sd, rx_port, ser_i2c_addr))
-		return -ENODEV;
-
-	ti953_reg_write(&va->sd, rx_port, ser_i2c_addr,
-			TI953_RESET_CTL, TI953_DIGITAL_RESET_1);
-	msleep(50);
-
-	if (pdata->module_flags & TI960_FL_INIT_SER) {
-		rval = ti953_init(&va->sd, rx_port, ser_i2c_addr);
-		if (rval)
-			return rval;
-	}
-
-	if (pdata->module_flags & TI960_FL_INIT_SER_CLK) {
-		rval = ti953_init_clk(&va->sd, rx_port, ser_i2c_addr);
-		if (rval)
-			return rval;
-	}
-
-	if (pdata->module_flags & TI960_FL_POWERUP) {
-		ti953_reg_write(&va->sd, rx_port, ser_i2c_addr,
-				TI953_GPIO_INPUT_CTRL, TI953_GPIO_OUT_EN);
-
-		/* boot sequence */
-		for (i = 0; i < TI960_MAX_GPIO_POWERUP_SEQ; i++) {
-			if (pdata->gpio_powerup_seq[i] == (char)-1)
-				break;
-			ti953_reg_write(&va->sd, rx_port, ser_i2c_addr,
-					TI953_LOCAL_GPIO_DATA,
-					pdata->gpio_powerup_seq[i]);
-			msleep(50);
-		}
-	}
-
-	/* Configure ti953 CSI lane */
-	rval = ti953_reg_read(&va->sd, rx_port, ser_i2c_addr,
-			      TI953_GENERAL_CFG, &val);
-	dev_dbg(va->sd.dev, "ti953 read default general CFG (%x)\n", val);
-	if (va->pdata->ser_nlanes == 2)
-		val |= TI953_CSI_2LANE;
-	else if (va->pdata->ser_nlanes == 4)
-		val |= TI953_CSI_4LANE;
-	else
-		dev_err(va->sd.dev, "not expected csi lane\n");
-	rval = ti953_reg_write(&va->sd, rx_port, ser_i2c_addr,
-			       TI953_GENERAL_CFG, val);
-	if (rval != 0) {
-		dev_err(va->sd.dev, "ti953 write failed(%d)\n", rval);
-		return rval;
-	}
-
-	ti953_bus_speed(&va->sd, rx_port, ser_i2c_addr,
-			TI953_I2C_SPEED_FAST_PLUS);
-	speed_detect_fail =
-		ti953_reg_read(&va->sd, rx_port,
-			       alias_i2c_addr, 0, &val);
-	if (speed_detect_fail) {
-		ti953_bus_speed(&va->sd, rx_port, ser_i2c_addr,
-				TI953_I2C_SPEED_FAST);
-		speed_detect_fail =
-			ti953_reg_read(&va->sd, rx_port,
-				       alias_i2c_addr, 0, &val);
-	}
-	if (speed_detect_fail) {
-		ti953_bus_speed(&va->sd, rx_port, ser_i2c_addr,
-				TI953_I2C_SPEED_STANDARD);
-		speed_detect_fail =
-			ti953_reg_read(&va->sd, rx_port,
-				       alias_i2c_addr, 0, &val);
-	}
-	if (speed_detect_fail)
-		dev_err(va->sd.dev, "i2c bus speed standard failed!");
-
-	return 0;
-}
-
-static int ti960_registered(struct v4l2_subdev *subdev)
-{
-	struct ti960 *va = to_ti960(subdev);
-	struct i2c_client *client = v4l2_get_subdevdata(subdev);
-	int i, j, k, l, rval;
-	bool port_registered[NR_OF_TI960_SINK_PADS];
-
-	for (i = 0 ; i < NR_OF_TI960_SINK_PADS; i++)
-		port_registered[i] = false;
-
-	for (i = 0, k = 0; i < va->pdata->subdev_num; i++) {
-		struct ti960_subdev_info *info =
-			&va->pdata->subdev_info[i];
-		struct ti960_subdev_pdata *pdata =
-			(struct ti960_subdev_pdata *)
-			info->board_info.platform_data;
-		struct ti960_subdev sensor_subdev;
-
-		sensor_subdev.rx_port = info->rx_port;
-		sensor_subdev.phy_i2c_addr = info->phy_i2c_addr;
-		sensor_subdev.alias_i2c_addr = info->board_info.addr;
-		sensor_subdev.ser_i2c_addr = info->ser_alias;
-
-		if (k >= va->nsinks)
-			break;
-
-		if (port_registered[info->rx_port]) {
-			dev_err(va->sd.dev,
-				"rx port %d registed already\n",
-				info->rx_port);
-			continue;
-		}
-
-		/*
-		 * The sensors should not share the same pdata structure.
-		 * Clone the pdata for each sensor.
-		 */
-		memcpy(&va->subdev_pdata[k], pdata, sizeof(*pdata));
-
-		va->sub_devs[k].fsin_gpio = va->subdev_pdata[k].fsin;
-
-		/* Spin sensor subdev suffix name */
-		va->subdev_pdata[k].suffix = info->suffix;
-
-		/*
-		 * Change the gpio value to have xshutdown
-		 * and rx port included, so in gpio_set those
-		 * can be caculated from it.
-		 */
-		va->subdev_pdata[k].xshutdown += va->gc.base +
-					info->rx_port * NR_OF_GPIOS_PER_PORT;
-		info->board_info.platform_data = &va->subdev_pdata[k];
-
-		if (!info->phy_i2c_addr || !info->board_info.addr) {
-			dev_err(va->sd.dev, "can't find the physical and alias addr.\n");
-			return -EINVAL;
-		}
-
-		rval = ti960_config_ser(va, &sensor_subdev, pdata);
-		if (rval)
-			continue;
-
-		/* Map PHY I2C address. */
-		rval = ti960_map_phy_i2c_addr(va, info->rx_port,
-					info->phy_i2c_addr);
-		if (rval)
-			return rval;
-
-		/* Map 7bit ALIAS I2C address. */
-		rval = ti960_map_alias_i2c_addr(va, info->rx_port,
-				info->board_info.addr << 1);
-		if (rval)
-			return rval;
-
-		va->sub_devs[k].sd = v4l2_i2c_new_subdev_board(
-			va->sd.v4l2_dev, client->adapter,
-			&info->board_info, 0);
-		if (!va->sub_devs[k].sd) {
-			dev_err(va->sd.dev,
-				"can't create new i2c subdev %c\n",
-				info->suffix);
-			continue;
-		}
-		va->sub_devs[k].rx_port = info->rx_port;
-		va->sub_devs[k].phy_i2c_addr = info->phy_i2c_addr;
-		va->sub_devs[k].alias_i2c_addr = info->board_info.addr;
-		va->sub_devs[k].ser_i2c_addr = info->ser_alias;
-		snprintf(va->sub_devs[k].sd->name, sizeof(va->sd.name), "%s %c",
-			va->subdev_pdata[k].module_name,
-			va->subdev_pdata[k].suffix);
-		memcpy(va->sub_devs[k].sd_name,
-				va->subdev_pdata[k].module_name,
-				min(sizeof(va->sub_devs[k].sd_name) - 1,
-				sizeof(va->subdev_pdata[k].module_name) - 1));
-
-		for (j = 0; j < va->sub_devs[k].sd->entity.num_pads; j++) {
-			if (va->sub_devs[k].sd->entity.pads[j].flags &
-				MEDIA_PAD_FL_SOURCE)
-				break;
-		}
-
-		if (j == va->sub_devs[k].sd->entity.num_pads) {
-			dev_warn(va->sd.dev,
-				"no source pad in subdev %c\n",
-				info->suffix);
-			return -ENOENT;
-		}
-
-		for (l = 0; l < va->nsinks; l++) {
-			rval = media_create_pad_link(
-				&va->sub_devs[k].sd->entity, j,
-				&va->sd.entity, l, MEDIA_LNK_FL_DYNAMIC);
-			if (rval) {
-				dev_err(va->sd.dev,
-					"can't create link to %c\n",
-					info->suffix);
-				return -EINVAL;
-			}
-		}
-		port_registered[va->sub_devs[k].rx_port] = true;
-		k++;
-	}
-	rval = ti960_map_subdevs_addr(va);
-	if (rval)
-		return rval;
-
-	return 0;
-}
-
-static int ti960_set_power(struct v4l2_subdev *subdev, int on)
-{
-	struct ti960 *va = to_ti960(subdev);
-	int ret;
-	u8 val;
-	u8 link_freq;
-
-	ret = ti960_reg_write(va, TI960_RESET,
-			   (on) ? TI960_POWER_ON : TI960_POWER_OFF);
-	if (ret || !on)
-		return ret;
-
-	/* Select TX port 0 R/W by default */
-	ret = ti960_reg_write(va, TI960_CSI_PORT_SEL, 0x01);
-	/* Configure MIPI clock bsaed on control value. */
-	link_freq = v4l2_ctrl_g_ctrl(va->link_freq);
-	ret = ti960_reg_write(va, TI960_CSI_PLL_CTL,
-			    link_freq);
-	if (ret)
-		return ret;
-	val = TI960_CSI_ENABLE;
-
-	/* Configure ti960 CSI lane */
-	if (va->pdata->deser_nlanes == 2)
-		val |= TI960_CSI_2LANE;
-	else if (va->pdata->deser_nlanes == 4)
-		val |= TI960_CSI_4LANE;
-	else
-		dev_err(va->sd.dev, "not expected csi lane\n");
-	/* Enable skew calculation when 1.6Gbps output is enabled. */
-	if (link_freq == TI960_MIPI_1600MBPS)
-		val |= TI960_CSI_SKEWCAL;
-
-	return ti960_reg_write(va, TI960_CSI_CTL, val);
-}
-
-static bool ti960_broadcast_mode(struct v4l2_subdev *subdev)
-{
-	struct ti960 *va = to_ti960(subdev);
-	struct v4l2_subdev_format fmt = { 0 };
-	struct v4l2_subdev *sd;
-	char *sd_name = NULL;
-	bool first = true;
-	unsigned int h = 0, w = 0, code = 0;
-	bool single_stream = true;
-	int i, rval;
-
-	for (i = 0; i < NR_OF_TI960_SINK_PADS; i++) {
-		struct media_pad *remote_pad =
-			media_pad_remote_pad_first(&va->pad[i]);
-
-		if (!remote_pad)
-			continue;
-
-		if (!ti960_set_sub_stream[i])
-			continue;
-
-		sd = media_entity_to_v4l2_subdev(remote_pad->entity);
-		fmt.which = V4L2_SUBDEV_FORMAT_ACTIVE;
-		fmt.pad = remote_pad->index;
-
-		rval = v4l2_subdev_call(sd, pad, get_fmt, NULL, &fmt);
-		if (rval)
-			return false;
-
-		if (first) {
-			sd_name = va->sub_devs[i].sd_name;
-			h = fmt.format.height;
-			w = fmt.format.width;
-			code = fmt.format.code;
-			first = false;
-		} else {
-			if (strncmp(sd_name, va->sub_devs[i].sd_name, 16))
-				return false;
-
-			if (h != fmt.format.height || w != fmt.format.width
-				|| code != fmt.format.code)
-				return false;
-
-			single_stream = false;
-		}
-	}
-
-	if (single_stream)
-		return false;
-
-	return true;
-}
-
-static int ti960_rx_port_config(struct ti960 *va, int sink, int rx_port)
-{
-	int rval;
-	unsigned int csi_vc_map;
-
-	/* Select RX port. */
-	rval = ti960_reg_write(va, TI960_RX_PORT_SEL,
-			(rx_port << 4) + (1 << rx_port));
-	if (rval) {
-		dev_err(va->sd.dev, "Failed to select RX port.\n");
-		return rval;
-	}
-
-	rval = ti960_reg_write(va, TI960_PORT_CONFIG,
-		TI960_FPD3_CSI);
-	if (rval) {
-		dev_err(va->sd.dev, "Failed to set port config.\n");
-		return rval;
-	}
-
-	/*
-	 * CSI VC MAPPING.
-	 */
-	csi_vc_map = sink * 0x55;
-	dev_info(va->sd.dev, "%s sink pad %d, rx_port %d, csi_vc_map %x",
-		 __func__, sink, rx_port, csi_vc_map);
-	rval = ti960_reg_write(va, TI960_CSI_VC_MAP,
-			       csi_vc_map);
-	if (rval) {
-		dev_err(va->sd.dev, "Failed to set port config.\n");
-		return rval;
-	}
-	return 0;
-}
-
-static int ti960_find_subdev_index(struct ti960 *va, struct v4l2_subdev *sd)
-{
-	int i;
-
-	for (i = 0; i < NR_OF_TI960_SINK_PADS; i++) {
-		if (va->sub_devs[i].sd == sd)
-			return i;
-	}
-
-	WARN_ON(1);
-
-	return -EINVAL;
-}
-
-static int ti960_find_subdev_index_by_rx_port(struct ti960 *va, u8 rx_port)
-{
-	int i;
-
-	for (i = 0; i < NR_OF_TI960_SINK_PADS; i++) {
-		if (va->sub_devs[i].rx_port == rx_port)
-			return i;
-	}
-	WARN_ON(1);
-
-	return -EINVAL;
-}
-
-static int ti960_set_frame_sync(struct ti960 *va, int enable)
-{
-	int i, rval;
-	int index = !!enable;
-
-	for (i = 0; i < ARRAY_SIZE(ti960_frame_sync_settings[index]); i++) {
-		rval = ti960_reg_write(va,
-				ti960_frame_sync_settings[index][i].reg,
-				ti960_frame_sync_settings[index][i].val);
-		if (rval) {
-			dev_err(va->sd.dev, "Failed to %s frame sync\n",
-				enable ? "enable" : "disable");
-			return rval;
-		}
-	}
-
-	return 0;
-}
-
-static int ti960_set_stream(struct v4l2_subdev *subdev, int enable)
-{
-	struct ti960 *va = to_ti960(subdev);
-	struct v4l2_subdev *sd;
-	int i, j, rval;
-	bool broadcast;
-	unsigned short rx_port;
-	unsigned short ser_alias;
-	int sd_idx = -1;
-	DECLARE_BITMAP(rx_port_enabled, 32);
-
-	dev_dbg(va->sd.dev, "TI960 set stream, enable %d\n", enable);
-
-	broadcast = ti960_broadcast_mode(subdev);
-	if (enable)
-		dev_info(va->sd.dev, "TI960 in %s mode",
-			broadcast ? "broadcast" : "non broadcast");
-
-	bitmap_zero(rx_port_enabled, 32);
-	for (i = 0; i < NR_OF_TI960_SINK_PADS; i++) {
-		struct media_pad *remote_pad =
-			media_pad_remote_pad_first(&va->pad[i]);
-
-		if (!remote_pad)
-			continue;
-
-		/* Find ti960 subdev */
-		sd = media_entity_to_v4l2_subdev(remote_pad->entity);
-		j = ti960_find_subdev_index(va, sd);
-		if (j < 0)
-			return -EINVAL;
-		rx_port = va->sub_devs[j].rx_port;
-		ser_alias = va->sub_devs[j].ser_i2c_addr;
-		rval = ti960_rx_port_config(va, i, rx_port);
-		if (rval < 0)
-			return rval;
-
-		bitmap_set(rx_port_enabled, rx_port, 1);
-
-		if (broadcast && sd_idx == -1) {
-			sd_idx = j;
-		} else if (broadcast) {
-			rval = ti960_map_alias_i2c_addr(va, rx_port,
-				va->sub_devs[sd_idx].alias_i2c_addr << 1);
-			if (rval < 0)
-				return rval;
-		} else {
-			/* Stream on/off sensor */
-			dev_err(va->sd.dev,
-					"set stream for %s, enable  %d\n",
-					sd->name, enable);
-			rval = v4l2_subdev_call(sd, video, s_stream, enable);
-			if (rval) {
-				dev_err(va->sd.dev,
-					"Failed to set stream for %s, enable  %d\n",
-					sd->name, enable);
-				return rval;
-			}
-
-			/* RX port fordward */
-			rval = ti960_reg_set_bit(va, TI960_FWD_CTL1,
-						rx_port + 4, !enable);
-			if (rval) {
-				dev_err(va->sd.dev,
-					"Failed to forward RX port%d. enable %d\n",
-					i, enable);
-				return rval;
-			}
-			if (va->subdev_pdata[j].module_flags & TI960_FL_RESET) {
-				rval = reset_sensor(va, rx_port, ser_alias,
-						va->subdev_pdata[j].reset);
-				if (rval)
-					return rval;
-			}
-		}
-	}
-
-	if (broadcast) {
-		if (sd_idx < 0) {
-			dev_err(va->sd.dev, "No sensor connected!\n");
-			return -ENODEV;
-		}
-		sd = va->sub_devs[sd_idx].sd;
-		rval = v4l2_subdev_call(sd, video, s_stream, enable);
-		if (rval) {
-			dev_err(va->sd.dev,
-				"Failed to set stream for %s. enable  %d\n",
-				sd->name, enable);
-			return rval;
-		}
-
-		rval = ti960_set_frame_sync(va, enable);
-		if (rval) {
-			dev_err(va->sd.dev,
-				"Failed to set frame sync.\n");
-			return rval;
-		}
-
-		for (i = 0; i < NR_OF_TI960_SINK_PADS; i++) {
-			if (enable && test_bit(i, rx_port_enabled)) {
-				rval = ti960_fsin_gpio_init(va,
-						va->sub_devs[i].rx_port,
-						va->sub_devs[i].ser_i2c_addr,
-						va->sub_devs[i].fsin_gpio);
-				if (rval) {
-					dev_err(va->sd.dev,
-						"Failed to enable frame sync gpio init.\n");
-					return rval;
-				}
-
-				if (va->subdev_pdata[i].module_flags & TI960_FL_RESET) {
-					rx_port = va->sub_devs[i].rx_port;
-					ser_alias = va->sub_devs[i].ser_i2c_addr;
-					rval = reset_sensor(va, rx_port, ser_alias,
-							va->subdev_pdata[i].reset);
-					if (rval)
-						return rval;
-				}
-			}
-		}
-
-		for (i = 0; i < NR_OF_TI960_SINK_PADS; i++) {
-			if (!test_bit(i, rx_port_enabled))
-				continue;
-
-			/* RX port fordward */
-			rval = ti960_reg_set_bit(va, TI960_FWD_CTL1,
-						i + 4, !enable);
-			if (rval) {
-				dev_err(va->sd.dev,
-					"Failed to forward RX port%d. enable %d\n",
-					i, enable);
-				return rval;
-			}
-		}
-
-		/*
-		 * Restore each subdev i2c address as we may
-		 * touch it later.
-		 */
-		rval = ti960_map_subdevs_addr(va);
-		if (rval)
-			return rval;
-	}
-
-	return 0;
-}
-
-static int ti960_set_stream_vc(struct ti960 *va, u8 vc_id, u8 state)
-{
-	unsigned short rx_port;
-	unsigned short ser_alias;
-	struct v4l2_subdev *sd;
-	int rval;
-	int i;
-
-	i = ti960_find_subdev_index_by_rx_port(va, vc_id);
-	if (i < 0)
-		return -EINVAL;
-	rx_port = va->sub_devs[i].rx_port;
-	ser_alias = va->sub_devs[i].ser_i2c_addr;
-	sd = va->sub_devs[i].sd;
-
-	rval = ti960_rx_port_config(va, vc_id, rx_port);
-	if (rval < 0)
-		return rval;
-
-	rval = v4l2_subdev_call(sd, video, s_stream, state);
-	if (rval) {
-		dev_err(va->sd.dev,
-				"Failed to set stream for %s, enable %d\n",
-				sd->name, state);
-		return rval;
-	}
-	dev_info(va->sd.dev, "set stream for %s, enable %d\n",
-			sd->name, state);
-
-	/* RX port fordward */
-	rval = ti960_reg_set_bit(va, TI960_FWD_CTL1,
-			rx_port + 4, !state);
-	if (rval) {
-		dev_err(va->sd.dev,
-				"Failed to forward RX port%d. enable %d\n",
-				i, state);
-		return rval;
-	}
-	if (va->subdev_pdata[i].module_flags & TI960_FL_RESET) {
-		rval = reset_sensor(va, rx_port, ser_alias,
-				va->subdev_pdata[i].reset);
-		if (rval)
-			return rval;
-	}
-
-	return 0;
-}
-
-static int _ti960_set_routing(struct v4l2_subdev *sd,
-			      struct v4l2_subdev_state *state,
-			      struct v4l2_subdev_krouting *routing)
-{
-	static const struct v4l2_mbus_framefmt format = {
-		.width = TI960_MAX_WIDTH,
-		.height = TI960_MAX_HEIGHT,
-		.code = MEDIA_BUS_FMT_SBGGR12_1X12,
-	};
-	int ret;
-
-	/*
-	 * Note: we can only support up to V4L2_FRAME_DESC_ENTRY_MAX, until
-	 * frame desc is made dynamically allocated.
-	 */
-
-	if (routing->num_routes > V4L2_FRAME_DESC_ENTRY_MAX)
-		return -E2BIG;
-
-	ret = v4l2_subdev_routing_validate(sd, routing,
-					   V4L2_SUBDEV_ROUTING_ONLY_1_TO_1 |
-					   V4L2_SUBDEV_ROUTING_NO_SINK_STREAM_MIX);
-	if (ret)
-		return ret;
-
-	ret = v4l2_subdev_set_routing_with_fmt(sd, state, routing, &format);
-	if (ret)
-		return ret;
-
-	return 0;
-}
-
-static int ti960_init_state(struct v4l2_subdev *sd,
-			    struct v4l2_subdev_state *state)
-{
-	struct v4l2_subdev_route routes[] = {
-		{
-			.sink_pad = 0,
-			.sink_stream = 0,
-			.source_pad = 4,
-			.source_stream = 0,
-			.flags = V4L2_SUBDEV_ROUTE_FL_ACTIVE,
-		},
-	};
-
-	struct v4l2_subdev_krouting routing = {
-		.num_routes = ARRAY_SIZE(routes),
-		.routes = routes,
-	};
-
-	return _ti960_set_routing(sd, state, &routing);
-}
-
-static struct v4l2_subdev_internal_ops ti960_sd_internal_ops = {
-	.open = ti960_open,
-	.registered = ti960_registered,
-	.init_state = ti960_init_state,
-};
-
-static const struct v4l2_subdev_video_ops ti960_sd_video_ops = {
-	// .s_stream = ti960_set_stream,
-};
-
-static const struct v4l2_subdev_core_ops ti960_core_subdev_ops = {
-	// .s_power = ti960_set_power,
-};
-
-static u8 ti960_get_nubmer_of_streaming(void)
-{
-	u8 n = 0;
-	u8 i = 0;
-
-	for (; i < ARRAY_SIZE(ti960_set_sub_stream); i++) {
-		if (ti960_set_sub_stream[i])
-			n++;
-	}
-
-	return n;
-}
-
-static int ti960_s_ctrl(struct v4l2_ctrl *ctrl)
-{
-	struct ti960 *va = container_of(ctrl->handler,
-					     struct ti960, ctrl_handler);
-	u32 val;
-	u8 vc_id;
-	u8 state;
-
-	switch (ctrl->id) {
-	default:
-		dev_info(va->sd.dev, "unknown control id: 0x%X\n", ctrl->id);
-	}
-
-	return 0;
-}
-
-static const struct v4l2_ctrl_ops ti960_ctrl_ops = {
-	.s_ctrl = ti960_s_ctrl,
-};
-
-static const struct v4l2_ctrl_config ti960_controls[] = {
-	{
-		.ops = &ti960_ctrl_ops,
-		.id = V4L2_CID_LINK_FREQ,
-		.name = "V4L2_CID_LINK_FREQ",
-		.type = V4L2_CTRL_TYPE_INTEGER_MENU,
-		.min = 0,
-		.max = ARRAY_SIZE(ti960_op_sys_clock) - 1,
-		.def = TI960_MIPI_1200MBPS,
-		.menu_skip_mask = 0,
-		.qmenu_int = ti960_op_sys_clock,
-	},
-	{
-		.ops = &ti960_ctrl_ops,
-		.id = V4L2_CID_TEST_PATTERN,
-		.name = "V4L2_CID_TEST_PATTERN",
-		.type = V4L2_CTRL_TYPE_INTEGER,
-		.min = 0,
-		.max = 1,
-		.step = 1,
-		.def = 0,
-	},
-};
-
-static int ti960_set_routing(struct v4l2_subdev *sd,
-			     struct v4l2_subdev_state *state,
-			     enum v4l2_subdev_format_whence which,
-			     struct v4l2_subdev_krouting *routing)
-{
-	return _ti960_set_routing(sd, state, routing);
-}
-
-static u32 ti960_get_sink_pad_by_pad(u32 source_pad, u32 source_stream,
-					    struct v4l2_subdev_state *state)
-{
-	struct v4l2_subdev_route *routes;
-	u32 sink_pad = 0;
-	unsigned int i;
-
-	if (!state)
-		return 0;
-
-	routes = state->routing.routes;
-	for (i = 0; i < state->routing.num_routes; i++) {
-		if (routes[i].source_pad == source_pad &&
-		    routes[i].source_stream == source_stream) {
-			sink_pad = routes[i].sink_pad;
-			break;
-		}
-	}
-
-	return sink_pad;
-}
-
-static void ti960_set_csi_conts_clock(struct ti960 *va, int state) {
-	u32 val;
-
-	ti960_reg_write(va, TI960_CSI_PORT_SEL, 0x01);
-	ti960_reg_read(va, TI960_CSI_CTL, &val);
-	if (state) {
-		if (va->ref_count == 1)
-			val |= TI960_CSI_CONTS_CLOCK;
-	} else {
-		if (va->ref_count == 0)
-			val &= ~TI960_CSI_CONTS_CLOCK;
-	}
-
-	ti960_reg_write(va, TI960_CSI_CTL, val);
-}
-
-static int ti960_set_streams_(struct v4l2_subdev *subdev,
-					 struct v4l2_subdev_state *state,
-					 u32 pad, u64 streams_mask, int enable)
-{
-	struct ti960 *va = to_ti960(subdev);
-	struct v4l2_subdev *sd;
-	int j, rval;
-	unsigned short rx_port;
-	unsigned short ser_alias;
-	int i = 0;
-	u32 sink_pad = 0;
-	DECLARE_BITMAP(rx_port_enabled, 32);
-
-	dev_dbg(va->sd.dev, "%s TI960\n", enable != 0 ? "enable" : "disable");
-
-	for (i = 0; i < 64; i++) {
-		if (streams_mask & ((u64)1 << i))
-			break;
-	}
-
-	sink_pad = ti960_get_sink_pad_by_pad(pad, i, state);
-
-	bitmap_zero(rx_port_enabled, 32);
-	struct media_pad *remote_pad =
-		media_pad_remote_pad_first(&va->pad[sink_pad]);
-
-	if (!remote_pad)
-		return -EINVAL;
-
-	/* Find ti960 subdev */
-	sd = media_entity_to_v4l2_subdev(remote_pad->entity);
-	j = ti960_find_subdev_index(va, sd);
-	if (j < 0)
-		return -EINVAL;
-	if (enable)
-		va->ref_count++;
-	else
-		va->ref_count--;
-	if (va->ref_count == 1 || va->ref_count == 0) {
-		ti960_set_csi_conts_clock(va, enable);
-		ti960_set_power(&va->sd, enable);
-	}
-	rx_port = va->sub_devs[j].rx_port;
-	ser_alias = va->sub_devs[j].ser_i2c_addr;
-	rval = ti960_rx_port_config(va, sink_pad, rx_port);
-	if (rval < 0)
-		return rval;
-
-	bitmap_set(rx_port_enabled, rx_port, 1);
-
-	rval = v4l2_subdev_call(sd, video, s_stream, enable);
-	if (rval) {
-		dev_err(va->sd.dev,
-			"Failed to set stream for %s, enable  %d\n",
-			sd->name, enable);
-		return rval;
-	}
-
-	/* RX port fordward */
-	rval = ti960_reg_set_bit(va, TI960_FWD_CTL1,
-				rx_port + 4, !enable);
-	if (rval) {
-		dev_err(va->sd.dev,
-			"Failed to forward RX port%d. enable %d\n",
-			sink_pad, enable);
-		return rval;
-	}
-	if (va->subdev_pdata[j].module_flags & TI960_FL_RESET) {
-		rval = reset_sensor(va, rx_port, ser_alias,
-				va->subdev_pdata[j].reset);
-		if (rval)
-			return rval;
-	}
-
-	return 0;
-}
-
-static int ti960_enable_streams(struct v4l2_subdev *subdev,
-					 struct v4l2_subdev_state *state,
-					 u32 pad, u64 streams_mask)
-{
-	return ti960_set_streams_(subdev, state, pad, streams_mask, true);
-}
-
-static int ti960_disable_streams(struct v4l2_subdev *subdev,
-					  struct v4l2_subdev_state *state,
-					  u32 pad, u64 streams_mask)
-{
-	return ti960_set_streams_(subdev, state, pad, streams_mask, false);
-}
-
-static const struct v4l2_subdev_pad_ops ti960_sd_pad_ops = {
-	.get_fmt = ti960_get_format,
-	.set_fmt = ti960_set_format,
-	.get_frame_desc = ti960_get_frame_desc,
-	.enum_mbus_code = ti960_enum_mbus_code,
-	.set_routing = ti960_set_routing,
-	.enable_streams = ti960_enable_streams,
-	.disable_streams = ti960_disable_streams,
-};
-
-static struct v4l2_subdev_ops ti960_sd_ops = {
-	.core = &ti960_core_subdev_ops,
-	.video = &ti960_sd_video_ops,
-	.pad = &ti960_sd_pad_ops,
-};
-
-static int ti960_register_subdev(struct ti960 *va)
-{
-	int i, ret;
-	struct i2c_client *client = v4l2_get_subdevdata(&va->sd);
-
-	snprintf(va->sd.name, sizeof(va->sd.name), "TI960 %c",
-		va->pdata->suffix);
-
-	va->sd.flags |= V4L2_SUBDEV_FL_HAS_DEVNODE | V4L2_SUBDEV_FL_STREAMS;
-
-	va->sd.internal_ops = &ti960_sd_internal_ops;
-	va->sd.entity.function = MEDIA_ENT_F_VID_MUX;
-
-	v4l2_set_subdevdata(&va->sd, client);
-
-	ret = v4l2_ctrl_handler_init(&va->ctrl_handler,
-				ARRAY_SIZE(ti960_controls));
-
-	if (ret < 0) {
-		dev_err(va->sd.dev,
-			"Failed to init ti960 controls. ERR: %d!\n",
-			va->ctrl_handler.error);
-		return va->ctrl_handler.error;
-	}
-
-	va->sd.ctrl_handler = &va->ctrl_handler;
-
-	for (i = 0; i < ARRAY_SIZE(ti960_controls); i++) {
-		const struct v4l2_ctrl_config *cfg =
-			&ti960_controls[i];
-		struct v4l2_ctrl *ctrl;
-
-		ctrl = v4l2_ctrl_new_custom(&va->ctrl_handler, cfg, NULL);
-		if (!ctrl) {
-			dev_err(va->sd.dev,
-				"Failed to create ctrl %s!\n", cfg->name);
-			ret = va->ctrl_handler.error;
-			goto failed_out;
-		}
-	}
-
-	va->link_freq = v4l2_ctrl_find(&va->ctrl_handler, V4L2_CID_LINK_FREQ);
-	switch (va->pdata->link_freq_mbps) {
-	case 1600:
-		__v4l2_ctrl_s_ctrl(va->link_freq, TI960_MIPI_1600MBPS);
-		break;
-	case 1200:
-		__v4l2_ctrl_s_ctrl(va->link_freq, TI960_MIPI_1200MBPS);
-		break;
-	case 800:
-		__v4l2_ctrl_s_ctrl(va->link_freq, TI960_MIPI_800MBPS);
-		break;
-	case 400:
-		__v4l2_ctrl_s_ctrl(va->link_freq, TI960_MIPI_400MBPS);
-		break;
-	default:
-		break;
-	}
-	va->test_pattern = v4l2_ctrl_find(&va->ctrl_handler,
-					  V4L2_CID_TEST_PATTERN);
-
-	for (i = 0; i < va->nsinks; i++)
-		va->pad[i].flags = MEDIA_PAD_FL_SINK;
-	va->pad[TI960_PAD_SOURCE].flags = MEDIA_PAD_FL_SOURCE;
-	ret = media_entity_pads_init(&va->sd.entity,
-				      NR_OF_TI960_PADS, va->pad);
-	if (ret) {
-		dev_err(va->sd.dev,
-			"Failed to init media entity for ti960!\n");
-		goto failed_out;
-	}
-
-	ret = v4l2_subdev_init_finalize(&va->sd);
-	if (ret) {
-		dev_err(va->sd.dev, "v4l2 subdev init error: %d\n", ret);
-		goto err_entity_cleanup;
-	}
-
-	return 0;
-
-err_entity_cleanup:
-	media_entity_cleanup(&va->sd.entity);
-failed_out:
-	v4l2_ctrl_handler_free(&va->ctrl_handler);
-	return ret;
-}
-
-static int ti960_init(struct ti960 *va)
-{
-#ifdef TI960_RESET_NEEDED
-	unsigned int reset_gpio = va->pdata->reset_gpio;
-#endif
-	int i, rval;
-	unsigned int val;
-
-#ifdef TI960_RESET_NEEDED
-	/* TI960 PDB pulled up to high by HW design in some board */
-	gpio_set_value(reset_gpio, 1);
-	usleep_range(2000, 3000);
-	dev_err(va->sd.dev, "Setting reset gpio %d to 1.\n", reset_gpio);
-#endif
-
-	bus_switch(va);
-	usleep_range(8000, 9000);
-
-	rval = ti960_reg_read(va, TI960_DEVID, &val);
-	if (rval) {
-		dev_err(va->sd.dev, "Failed to read device ID of TI960!\n");
-		return rval;
-	}
-	dev_info(va->sd.dev, "TI960 device ID: 0x%X\n", val);
-	for (i = 0; i < ARRAY_SIZE(ti960_gpio_settings); i++) {
-		rval = ti960_reg_write(va,
-			ti960_gpio_settings[i].reg,
-			ti960_gpio_settings[i].val);
-		if (rval) {
-			dev_err(va->sd.dev,
-				"Failed to write TI960 gpio setting, reg %2x, val %2x\n",
-				ti960_gpio_settings[i].reg, ti960_gpio_settings[i].val);
-			return rval;
-		}
-	}
-	usleep_range(10000, 11000);
-
-	for (i = 0; i < ARRAY_SIZE(ti960_init_settings); i++) {
-		if (ti960_init_settings[i].reg == 0) {
-			usleep_range(ti960_init_settings[i].val * 1000, ti960_init_settings[i].val * 1000);
-			continue;
-		}
-		rval = ti960_reg_write(va,
-			ti960_init_settings[i].reg,
-			ti960_init_settings[i].val);
-		if (rval) {
-			dev_err(va->sd.dev,
-				"Failed to write TI960 init setting, reg %2x, val %2x\n",
-				ti960_init_settings[i].reg, ti960_init_settings[i].val);
-			return rval;
-		}
-	}
-	/* wait for ti953 ready */
-	msleep(200);
-
-	rval = ti960_map_subdevs_addr(va);
-	if (rval)
-		return rval;
-
-	return 0;
-}
-
-static void ti960_gpio_set(struct gpio_chip *chip, unsigned int gpio, int value)
-{
-	struct i2c_client *client = to_i2c_client(chip->parent);
-	struct v4l2_subdev *subdev = i2c_get_clientdata(client);
-	struct ti960 *va = to_ti960(subdev);
-	unsigned int reg_val;
-	int rx_port, gpio_port;
-	int ret;
-
-	if (gpio >= NR_OF_TI960_GPIOS)
-		return;
-
-	rx_port = gpio / NR_OF_GPIOS_PER_PORT;
-	gpio_port = gpio % NR_OF_GPIOS_PER_PORT;
-
-	ret = ti960_reg_write(va, TI960_RX_PORT_SEL,
-			  (rx_port << 4) + (1 << rx_port));
-	if (ret) {
-		dev_dbg(&client->dev, "Failed to select RX port.\n");
-		return;
-	}
-	ret = regmap_read(va->regmap8, TI960_BC_GPIO_CTL0, &reg_val);
-	if (ret) {
-		dev_dbg(&client->dev, "Failed to read gpio status.\n");
-		return;
-	}
-
-	if (gpio_port == 0) {
-		reg_val &= ~TI960_GPIO0_MASK;
-		reg_val |= value ? TI960_GPIO0_HIGH : TI960_GPIO0_LOW;
-	} else {
-		reg_val &= ~TI960_GPIO1_MASK;
-		reg_val |= value ? TI960_GPIO1_HIGH : TI960_GPIO1_LOW;
-	}
-
-	ret = ti960_reg_write(va, TI960_BC_GPIO_CTL0, reg_val);
-	if (ret)
-		dev_dbg(&client->dev, "Failed to set gpio.\n");
-}
-
-static int ti960_gpio_direction_output(struct gpio_chip *chip,
-				       unsigned int gpio, int level)
-{
-	return 0;
-}
-
-static int ti960_probe(struct i2c_client *client)
-{
-	struct ti960 *va;
-	int i, rval = 0;
-	int gpio_FPD = 0;
-
-	if (client->dev.platform_data == NULL)
-		return -ENODEV;
-
-	va = devm_kzalloc(&client->dev, sizeof(*va), GFP_KERNEL);
-	if (!va)
-		return -ENOMEM;
-
-	va->pdata = client->dev.platform_data;
-
-	va->nsources = NR_OF_TI960_SOURCE_PADS;
-	va->nsinks = NR_OF_TI960_SINK_PADS;
-	va->npads = NR_OF_TI960_PADS;
-	va->nstreams = NR_OF_TI960_STREAMS;
-
-	va->crop = devm_kcalloc(&client->dev, va->npads,
-				sizeof(struct v4l2_rect), GFP_KERNEL);
-
-	va->compose = devm_kcalloc(&client->dev, va->npads,
-				   sizeof(struct v4l2_rect), GFP_KERNEL);
-
-	if (!va->crop || !va->compose)
-		return -ENOMEM;
-
-	for (i = 0; i < va->npads; i++) {
-		va->ffmts[i] = devm_kcalloc(&client->dev, va->nstreams,
-					    sizeof(struct v4l2_mbus_framefmt),
-					    GFP_KERNEL);
-		if (!va->ffmts[i])
-			return -ENOMEM;
-	}
-
-	va->regmap8 = devm_regmap_init_i2c(client,
-					   &ti960_reg_config8);
-	if (IS_ERR(va->regmap8)) {
-		dev_err(&client->dev, "Failed to init regmap8!\n");
-		return -EIO;
-	}
-
-	va->regmap16 = devm_regmap_init_i2c(client,
-					    &ti960_reg_config16);
-	if (IS_ERR(va->regmap16)) {
-		dev_err(&client->dev, "Failed to init regmap16!\n");
-		return -EIO;
-	}
-
-	mutex_init(&va->mutex);
-	v4l2_i2c_subdev_init(&va->sd, client, &ti960_sd_ops);
-	rval = ti960_register_subdev(va);
-	if (rval) {
-		dev_err(&client->dev, "Failed to register va subdevice!\n");
-		return rval;
-	}
-
-#ifdef TI960_RESET_NEEDED
-	if (devm_gpio_request_one(va->sd.dev, va->pdata->reset_gpio, 0,
-				  "ti960 reset") != 0) {
-		dev_err(va->sd.dev, "Unable to acquire gpio %d\n",
-			va->pdata->reset_gpio);
-		return -ENODEV;
-	}
-#endif
-
-	if (va->pdata->FPD_gpio != -1) {
-		rval = devm_gpio_request_one(&client->dev,
-			va->pdata->FPD_gpio,
-			GPIOF_OUT_INIT_LOW, "Cam");
-		if (rval) {
-			dev_err(&client->dev,
-				"camera power GPIO pin request failed!\n");
-			return rval;
-		}
-
-		/* pull up GPPC_B23 to high for FPD link power */
-		gpio_FPD = gpio_get_value(va->pdata->FPD_gpio);
-		if (gpio_FPD == 0)
-			gpio_set_value(va->pdata->FPD_gpio, 1);
-	}
-
-	rval = ti960_init(va);
-	if (rval) {
-		dev_err(&client->dev, "Failed to init TI960!\n");
-		goto free_gpio;
-	}
-
-	/*
-	 * TI960 has several back channel GPIOs.
-	 * We export GPIO0 and GPIO1 to control reset or fsin.
-	 */
-	va->gc.parent = &client->dev;
-	va->gc.owner = THIS_MODULE;
-	va->gc.label = "TI960 GPIO";
-	va->gc.ngpio = NR_OF_TI960_GPIOS;
-	va->gc.base = -1;
-	va->gc.set = ti960_gpio_set;
-	va->gc.direction_output = ti960_gpio_direction_output;
-	rval = gpiochip_add_data(&va->gc, va);
-	if (rval) {
-		dev_err(&client->dev, "Failed to add gpio chip! %d\n", rval);
-		rval = -EIO;
-		goto free_gpio;
-	}
-
-	rval = v4l2_subdev_init_finalize(&va->sd);
-	if (rval) {
-		dev_err(&client->dev, "failed to init v4l2 subdev\n");
-		goto free_gpio;
-	}
-
-	va->ref_count = 0;
-
-	dev_err(&client->dev, "%s Probe Succeeded", va->sd.name);
-	dev_err(&client->dev, "%s Link Freq %d Mbps", va->sd.name, va->pdata->link_freq_mbps);
-	return 0;
-
-free_gpio:
-	if (va->pdata->FPD_gpio != -1) {
-		dev_err(&client->dev, "restore and free FPD gpio!\n");
-		/* restore GPPC_B23 */
-		if (gpio_FPD == 0)
-			gpio_set_value(va->pdata->FPD_gpio, 0);
-
-		gpio_free(va->pdata->FPD_gpio);
-	}
-
-	dev_err(&client->dev, "%s Probe Failed", va->sd.name);
-	return rval;
-}
-
-static void ti960_remove(struct i2c_client *client)
-{
-	struct v4l2_subdev *subdev = i2c_get_clientdata(client);
-	struct ti960 *va = to_ti960(subdev);
-	int i;
-
-	if (!va)
-		return;
-
-	mutex_destroy(&va->mutex);
-	v4l2_ctrl_handler_free(&va->ctrl_handler);
-	v4l2_device_unregister_subdev(&va->sd);
-	media_entity_cleanup(&va->sd.entity);
-
-	for (i = 0; i < NR_OF_TI960_SINK_PADS; i++) {
-		if (va->sub_devs[i].sd) {
-			struct i2c_client *sub_client =
-				v4l2_get_subdevdata(va->sub_devs[i].sd);
-
-			i2c_unregister_device(sub_client);
-		}
-		va->sub_devs[i].sd = NULL;
-	}
-
-	gpiochip_remove(&va->gc);
-
-}
-
-#ifdef CONFIG_PM
-static int ti960_suspend(struct device *dev)
-{
-	return 0;
-}
-
-static int ti960_resume(struct device *dev)
-{
-	struct i2c_client *client = to_i2c_client(dev);
-	struct v4l2_subdev *subdev = i2c_get_clientdata(client);
-	struct ti960 *va = to_ti960(subdev);
-	int i, rval;
-	struct ti960_subdev *sensor_subdev;
-	struct ti960_subdev_pdata *pdata;
-
-	rval = ti960_init(va);
-	if (rval) {
-		dev_err(va->sd.dev, "resume: failed init ti960");
-		return rval;
-	}
-
-	for (i = 0; i < NR_OF_TI960_SINK_PADS; i++) {
-		sensor_subdev = &va->sub_devs[i];
-		pdata = &va->subdev_pdata[i];
-		if (sensor_subdev->sd == NULL)
-			break;
-
-		rval = ti960_config_ser(va, sensor_subdev, pdata);
-		if (rval)
-			dev_warn(va->sd.dev, "resume: failed config subdev");
-	}
-
-	return 0;
-}
-#else
-#define ti960_suspend	NULL
-#define ti960_resume	NULL
-#endif /* CONFIG_PM */
-
-static const struct i2c_device_id ti960_id_table[] = {
-	{ TI960_NAME, 0 },
-	{ },
-};
-MODULE_DEVICE_TABLE(i2c, ti960_id_table);
-
-static const struct dev_pm_ops ti960_pm_ops = {
-	.suspend = ti960_suspend,
-	.resume = ti960_resume,
-};
-
-static struct i2c_driver ti960_i2c_driver = {
-	.driver = {
-		.name = TI960_NAME,
-		.pm = &ti960_pm_ops,
-	},
-	.probe = ti960_probe,
-	.remove	= ti960_remove,
-	.id_table = ti960_id_table,
-};
-module_i2c_driver(ti960_i2c_driver);
-
-MODULE_AUTHOR("Chen Meng J <meng.j.chen@intel.com>");
-MODULE_LICENSE("GPL");
-MODULE_DESCRIPTION("TI960 CSI2-Aggregator driver");
diff --git a/drivers/media/i2c/ti960-reg.h b/drivers/media/i2c/ti960-reg.h
deleted file mode 100644
index 5330c81799d8..000000000000
--- a/drivers/media/i2c/ti960-reg.h
+++ /dev/null
@@ -1,153 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0 */
-/* Copyright (C) 2022 Intel Corporation */
-
-#ifndef TI960_REG_H
-#define TI960_REG_H
-
-struct ti960_register_write {
-	u8 reg;
-	u8 val;
-};
-
-struct ti960_register_devid {
-	u8 reg;
-	u8 val_expected;
-};
-
-static const struct ti960_register_write ti960_frame_sync_settings[2][5] = {
-	{
-		{0x18, 0x00}, /* Disable frame sync. */
-		{0x19, 0x00},
-		{0x1a, 0x00},
-		{0x1b, 0x00},
-		{0x1c, 0x00},
-	},
-	{
-		{0x19, 0x15}, /* Frame sync high time.*/
-		{0x1a, 0xb3},
-		{0x1b, 0xc3}, /* Frame sync low time. */
-		{0x1c, 0x4f},
-		{0x18, 0x01}, /* Enable frame sync. and use high/low mode */
-	}
-};
-
-static const struct ti960_register_write ti960_gpio_settings[] = {
-	{0x10, 0x81},
-	{0x11, 0x85},
-	{0x12, 0x89},
-	{0x13, 0x8d},
-};
-
-static const struct ti960_register_write ti960_init_settings[] = {
-	{0x0c, 0x0f}, /* RX_PORT_CTL */
-	{0x1f, 0x06}, /* CSI_PLL_CTL */
-	{0x4c, 0x01}, /* FPD3_PORT_SEL */
-	{0x58, 0x5e}, /* BCC_CONFIG */
-	{0x5c, 0xb0}, /* SER_ALIAS_ID */
-	{0x5d, 0x6c}, /* SlaveID[0] */
-	{0x65, 0x60}, /* SlaveAlias[0] */
-	{0x6d, 0x7c}, /* PORT_CONFIG */
-	{0x7c, 0x01}, /* PORT_CONFIG2 */
-	{0x70, 0x2b}, /* RAW10_ID */
-	{0x71, 0x2c}, /* RAW12_ID */
-	{0x72, 0xe4}, /* CSI_VC_MAP */
-	{0x4c, 0x12}, /* FPD3_PORT_SEL */
-	{0x58, 0x5e},
-	{0x5c, 0xb2},
-	{0x5d, 0x6c},
-	{0x65, 0x62},
-	{0x6d, 0x7c},
-	{0x7c, 0x01},
-	{0x70, 0x2b},
-	{0x71, 0x2c},
-	{0x72, 0xee}, /* CSI_VC_MAP */
-	{0x4c, 0x24}, /* FPD3_PORT_SEL */
-	{0x58, 0x5e},
-	{0x5c, 0xb4},
-	{0x5d, 0x6c},
-	{0x65, 0x64},
-	{0x6d, 0x7c},
-	{0x7c, 0x01},
-	{0x70, 0x2b},
-	{0x71, 0x2c},
-	{0x72, 0xe4},
-	{0x4c, 0x38}, /* FPD3_PORT_SEL */
-	{0x58, 0x5e},
-	{0x5c, 0xb6},
-	{0x5d, 0x6c},
-	{0x65, 0x66},
-	{0x6d, 0x7c},
-	{0x7c, 0x01},
-	{0x70, 0x2b},
-	{0x71, 0x2c},
-	{0x72, 0xe4},
-	{0xb0, 0x14}, /* FPD3 RX Shared Reg */
-	{0xb1, 0x03},
-	{0xb2, 0x04},
-	{0xb1, 0x04},
-	{0xb2, 0x04},
-	{0x32, 0x12}, /* select TX1 R/W */
-	{0x33, 0x01}, /* CSI_ENABLE */
-	{0x34, 0x08}, /* CSI_PASS_MODE all */
-	{0x32, 0x01}, /* select TX0 R/W */
-	{0x33, 0x01}, /* CSI_ENABLE */
-	{0x34, 0x08}, /* CSI_PASS_MODE all */
-	{0x20, 0xf0},
-	{0x21, 0x03},
-};
-
-/* register definition */
-#define TI960_DEVID		0x0
-#define TI960_RESET		0x1
-#define TI960_CSI_PLL_CTL	0x1f
-#define TI960_FS_CTL		0x18
-#define TI960_FWD_CTL1		0x20
-#define TI960_RX_PORT_SEL	0x4c
-#define TI960_SER_ALIAS_ID	0x5c
-#define TI960_SLAVE_ID0		0x5d
-#define TI960_SLAVE_ALIAS_ID0	0x65
-#define TI960_PORT_CONFIG	0x6d
-#define TI960_BC_GPIO_CTL0	0x6e
-#define TI960_BC_GPIO_CTL1	0x6f
-#define TI960_RAW10_ID		0x70
-#define TI960_RAW12_ID		0x71
-#define TI960_CSI_VC_MAP	0x72
-#define TI960_PORT_CONFIG2	0x7c
-#define TI960_CSI_PORT_SEL	0x32
-#define TI960_CSI_CTL		0x33
-#define TI960_CSI_CTL2		0x34
-
-/* register value definition */
-#define TI960_POWER_ON		0x1
-#define TI960_POWER_OFF		0x20
-#define TI960_FPD3_RAW10_100MHz	0x7f
-#define TI960_FPD3_RAW12_50MHz	0x7d
-#define TI960_FPD3_RAW12_75MHz	0x7e
-#define TI960_FPD3_CSI		0x7c
-#define TI960_RAW12		0x41
-#define TI960_RAW10_NORMAL	0x1
-#define TI960_RAW10_8BIT	0x81
-#define TI960_GPIO0_HIGH	0x09
-#define TI960_GPIO0_LOW		0x08
-#define TI960_GPIO1_HIGH	0x90
-#define TI960_GPIO1_LOW		0x80
-#define TI960_GPIO0_FSIN	0x0a
-#define TI960_GPIO1_FSIN	0xa0
-#define TI960_GPIO0_MASK	0x0f
-#define TI960_GPIO1_MASK	0xf0
-#define TI960_GPIO2_FSIN	0x0a
-#define TI960_GPIO3_FSIN	0xa0
-#define TI960_GPIO2_MASK	0x0f
-#define TI960_GPIO3_MASK	0xf0
-#define TI960_MIPI_400MBPS	0x3
-#define TI960_MIPI_800MBPS	0x2
-#define TI960_MIPI_1200MBPS	0x1
-#define TI960_MIPI_1600MBPS	0x0
-#define TI960_CSI_ENABLE	0x1
-#define TI960_CSI_CONTS_CLOCK	0x2
-#define TI960_CSI_SKEWCAL	0x40
-#define TI960_FSIN_ENABLE	0x1
-#define TI960_CSI_2LANE		0x20
-#define TI960_CSI_4LANE		0x00
-
-#endif
diff --git a/include/media/imx390.h b/include/media/imx390.h
deleted file mode 100644
index 58e20a0420ee..000000000000
--- a/include/media/imx390.h
+++ /dev/null
@@ -1,24 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0 */
-/* Copyright (C) 2014 - 2024 Intel Corporation */
-
-#ifndef __IMX390_H
-#define __IMX390_H
-
-#include <linux/types.h>
-
-#define IMX390_NAME "imx390"
-
-#define IMX390_D3CM_I2C_ADDRESS (0x21 << 1)
-
-struct imx390_platform_data {
-	unsigned int port;
-	unsigned int lanes;
-	uint32_t i2c_slave_address;
-	int irq_pin;
-	unsigned int irq_pin_flags;
-	char irq_pin_name[16];
-	char suffix;
-	int gpios[4];
-};
-
-#endif /* __IMX390_H  */
diff --git a/include/media/ti960.h b/include/media/ti960.h
deleted file mode 100644
index 14a34f60ff8e..000000000000
--- a/include/media/ti960.h
+++ /dev/null
@@ -1,113 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0 */
-/* Copyright (C) 2020-2024 Intel Corporation */
-
-#ifndef TI960_H
-#define TI960_H
-
-#include <linux/i2c.h>
-#include <linux/regmap.h>
-#include <media/v4l2-common.h>
-#include <media/v4l2-ctrls.h>
-#include <media/v4l2-device.h>
-
-#define TI960_NAME "ti960"
-
-#define TI960_I2C_ADDRESS	0x32
-#define TI960_I2C_ADDRESS_2	0x3d
-
-#define PIXEL_ORDER_GRBG	0
-#define PIXEL_ORDER_RGGB	1
-#define PIXEL_ORDER_BGGR	2
-#define PIXEL_ORDER_GBRG	3
-
-#define NR_OF_TI960_VCS_PER_SINK_PAD 2
-#define NR_OF_TI960_VCS_SOURCE_PAD 4
-#define NR_OF_TI960_SOURCE_PADS	1
-#define NR_OF_TI960_SINK_PADS	4
-#define NR_OF_TI960_PADS \
-	(NR_OF_TI960_SOURCE_PADS + NR_OF_TI960_SINK_PADS)
-/* 4port * 2vc/port * 8 stream total */
-#define NR_OF_TI960_STREAMS	\
-	(NR_OF_TI960_SINK_PADS * NR_OF_TI960_VCS_PER_SINK_PAD \
-	* NR_OF_TI960_VCS_SOURCE_PAD)
-#define NR_OF_GPIOS_PER_PORT	2
-#define NR_OF_TI960_GPIOS	\
-	(NR_OF_TI960_SINK_PADS * NR_OF_GPIOS_PER_PORT)
-
-#define TI960_PAD_SOURCE	4
-
-#define TI960_MIN_WIDTH		640
-#define TI960_MIN_HEIGHT	480
-#define TI960_MAX_WIDTH		1920
-#define TI960_MAX_HEIGHT	1200
-
-struct ti960_csi_data_format {
-	u32 code;
-	u8 width;
-	u8 compressed;
-	u8 pixel_order;
-	u8 mipi_dt_code;
-};
-
-struct ti960_subdev_info {
-	struct i2c_board_info board_info;
-	int i2c_adapter_id;
-	unsigned short rx_port;
-	unsigned short phy_i2c_addr;
-	unsigned short ser_alias;
-	const char suffix; /* suffix for subdevs */
-};
-
-struct ti960_pdata {
-	unsigned int subdev_num;
-	struct ti960_subdev_info *subdev_info;
-	unsigned int reset_gpio;
-	int FPD_gpio;
-	const char suffix;
-	unsigned int link_freq_mbps;
-	unsigned int deser_nlanes;
-	unsigned int ser_nlanes;
-};
-
-#define TI960_MAX_GPIO_POWERUP_SEQ        4
-
-/* set this flag if this module needs serializer initialization */
-#define TI960_FL_INIT_SER	BIT(0)
-/* set this flag if this module has extra powerup sequence */
-#define TI960_FL_POWERUP	BIT(1)
-/* set this flag if this module needs reset signal */
-#define TI960_FL_RESET	BIT(2)
-/* set this flag if it need to init serial clk only */
-#define TI960_FL_INIT_SER_CLK	BIT(4)
-
-struct ti960_subdev_pdata {
-	unsigned short i2c_addr;
-	unsigned short i2c_adapter;
-
-	unsigned int lanes;		/* Number of CSI-2 lanes */
-
-	/* specify gpio pins of Deser for PWDN, FSIN, RESET. */
-	int xshutdown;
-	int fsin;
-	int reset;
-
-	/* specify gpio pins boot timing. */
-	/* Bit 3 write 0/1 on GPIO3
-	 * Bit 2 write 0/1 on GPIO2
-	 * Bit 1 write 0/1 on GPIO1
-	 * Bit 0 write 0/1 on GPIO0
-	 */
-	char gpio_powerup_seq[TI960_MAX_GPIO_POWERUP_SEQ];
-
-	/* module_flags can be:
-	 * TI960_FL_INIT_SER
-	 * TI960_FL_POWERUP
-	 * TI960_FL_RESET
-	 */
-	unsigned int module_flags;
-
-	char module_name[16]; /* module name from ACPI */
-	char suffix; /* suffix to identify multi sensors, abcd.. */
-};
-
-#endif
-- 
2.34.1

